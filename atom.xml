<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某飞行员的随笔</title>
  
  
  <link href="https://peitianyu.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://peitianyu.github.io/blog/"/>
  <updated>2022-06-07T14:10:21.717Z</updated>
  <id>https://peitianyu.github.io/blog/</id>
  
  <author>
    <name>某飞行员</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vscode配置cmake调试</title>
    <link href="https://peitianyu.github.io/blog/2022/06/07/vscode%E9%85%8D%E7%BD%AEcmake%E8%B0%83%E8%AF%95/"/>
    <id>https://peitianyu.github.io/blog/2022/06/07/vscode%E9%85%8D%E7%BD%AEcmake%E8%B0%83%E8%AF%95/</id>
    <published>2022-06-07T04:30:12.000Z</published>
    <updated>2022-06-07T14:10:21.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/LiuXF93/article/details/123066248?ops_request_misc=%7B%22request_id%22:%22165460710316782388054405%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165460710316782388054405&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-7-123066248-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev13%5Econtrol&utm_term=vscode%E9%85%8D%E7%BD%AEcmake%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83&spm=1018.2226.3001.4187">(137条消息) Ubuntu下VsCode和CMake联合调试C++工程_还没想好~的博客-CSDN博客</a> </p><p> <a href="https://blog.csdn.net/Stone_OverLooking/article/details/109544940?ops_request_misc=%7B%22request_id%22:%22165460710316782388054405%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165460710316782388054405&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-9-109544940-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev13%5Econtrol&utm_term=vscode%E9%85%8D%E7%BD%AEcmake%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83&spm=1018.2226.3001.4187">(137条消息) Ubuntu下VSCode+Cmake配置开发环境_Stone_OverLooking的博客-CSDN博客</a> </p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="安装gdb"><a href="#安装gdb" class="headerlink" title="安装gdb"></a>安装gdb</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unable to start debugging. Launch ...... </span></span><br><span class="line">apt-get install gdb</span><br></pre></td></tr></table></figure><h2 id="cmake配置"><a href="#cmake配置" class="headerlink" title="cmake配置"></a>cmake配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置编译模式</span><br><span class="line">set( CMAKE_BUILD_TYPE &quot;Debug&quot; )</span><br><span class="line">set(CMAKE_CXX_FLAGS_DEBUG &quot;$ENV&#123;CXXFLAGS&#125; -O0 -Wall -g2 -ggdb&quot;)</span><br><span class="line">set(CMAKE_CXX_FLAGS_RELEASE &quot;$ENV&#123;CXXFLAGS&#125; -O3 -Wall&quot;)</span><br><span class="line">add_definitions(-std=c++11)</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. &amp;&amp; make -j8</span><br></pre></td></tr></table></figure><h2 id="c-cpp-properties-json"><a href="#c-cpp-properties-json" class="headerlink" title="c_cpp_properties.json"></a>c_cpp_properties.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Linux&quot;</span>,</span><br><span class="line">            <span class="comment">//本地标准头文件</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/usr/include&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/usr/local/include&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span> <span class="comment">//工作目录下的所有子路径</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;defines&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span>: <span class="string">&quot;/usr/bin/gcc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span>: <span class="string">&quot;c11&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span>: <span class="string">&quot;c++17&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span>: <span class="string">&quot;clang-x64&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;compileCommands&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/build/compile_commands.json&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/build/Groot&quot;</span>,<span class="comment">// 表示可执行程序所在的路径，其中，$&#123;workspaceRoot&#125;表示VScode加载的文件夹的根目录</span></span><br><span class="line">            <span class="comment">// &quot;program&quot;: &quot;$&#123;command:cmake.launchTargetPath&#125;&quot;,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;make build&quot;</span> <span class="comment">//###最好删了，不然会影响调试，每次调试都直接执行make build</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // See https://go.microsoft.com/fwlink/?LinkId=733558</span><br><span class="line">    // for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;make build&quot;, </span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;cd ./build ;cmake ../ ;make -8&quot;,</span><br><span class="line">            &quot;group&quot;: &#123;</span><br><span class="line">                &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">                &quot;isDefault&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;clean&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;make clean&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/LiuXF93/article/details/1230</summary>
      
    
    
    
    <category term="模板" scheme="https://peitianyu.github.io/blog/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="模板" scheme="https://peitianyu.github.io/blog/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>C++编译问题</title>
    <link href="https://peitianyu.github.io/blog/2022/06/03/C++%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/"/>
    <id>https://peitianyu.github.io/blog/2022/06/03/C++%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/</id>
    <published>2022-06-03T04:30:12.000Z</published>
    <updated>2022-06-03T01:52:38.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="error-extra-qualification"><a href="#error-extra-qualification" class="headerlink" title="error: extra qualification"></a>error: extra qualification</h1><p> <a href="https://blog.csdn.net/jianguo_liao19840726/article/details/8504354">(136条消息) c++ extra qualification_沈纵情的博客-CSDN博客_extra qualification</a> </p><p>error: extra qualification ‘int_item::’ on member ‘to_editor’ [-fpermissive]</p><p>将int_item::去掉即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;error-extra-qualification&quot;&gt;&lt;a href=&quot;#error-extra-qualification&quot; class=&quot;headerlink&quot; title=&quot;error: extra qualification&quot;&gt;&lt;/a&gt;error: ext</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>MinUnit - C</title>
    <link href="https://peitianyu.github.io/blog/2022/06/02/MinUnit%20-%20C/"/>
    <id>https://peitianyu.github.io/blog/2022/06/02/MinUnit%20-%20C/</id>
    <published>2022-06-02T04:30:12.000Z</published>
    <updated>2022-06-02T05:48:01.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p><a href="https://mp.weixin.qq.com/s/CklfQPoyvJCKv8ohu-oqOw">https://mp.weixin.qq.com/s/CklfQPoyvJCKv8ohu-oqOw</a></p><h1 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// minunit.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mu_assert(message, test) do &#123; <span class="meta-keyword">if</span> (!(test)) return message; &#125; while (0)</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> mu_run_test(test) do &#123; char *message = test(); tests_run++; \</span></span><br><span class="line"><span class="meta">                                <span class="meta-keyword">if</span> (message) return message; &#125; while (0)</span></span><br><span class="line"> <span class="keyword">extern</span> <span class="keyword">int</span> tests_run;</span><br></pre></td></tr></table></figure><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.cc</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;minunit.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> tests_run = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> foo = <span class="number">7</span>;</span><br><span class="line"> <span class="keyword">int</span> bar = <span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">char</span> * <span class="title">test_foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="built_in">mu_assert</span>(<span class="string">&quot;error, foo != 7&quot;</span>, foo == <span class="number">7</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">char</span> * <span class="title">test_bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="built_in">mu_assert</span>(<span class="string">&quot;error, bar != 5&quot;</span>, bar == <span class="number">5</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">char</span> * <span class="title">all_tests</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="built_in">mu_run_test</span>(test_foo);</span><br><span class="line">     <span class="built_in">mu_run_test</span>(test_bar);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">char</span> *result = <span class="built_in">all_tests</span>();</span><br><span class="line">     <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, result);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;ALL TESTS PASSED\n&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;Tests run: %d\n&quot;</span>, tests_run);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> result != <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error, bar != 5</span><br><span class="line">Tests run: 2</span><br></pre></td></tr></table></figure><h1 id="参考之后自己写的cc版本的"><a href="#参考之后自己写的cc版本的" class="headerlink" title="参考之后自己写的cc版本的"></a>参考之后自己写的cc版本的</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写成类似于C语言的宏定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MuTest</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tests_run;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">run_test</span><span class="params">(<span class="keyword">char</span> *(*test)())</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> *message = <span class="built_in">test</span>();</span><br><span class="line">        tests_run++;</span><br><span class="line">        <span class="keyword">if</span> (message)</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">assert_true</span><span class="params">(<span class="keyword">bool</span> test, <span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!test)</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MuTest::tests_run = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">test_fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MuTest::<span class="built_in">assert_true</span>(<span class="literal">false</span>, (<span class="keyword">char</span> *)<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">test_pass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MuTest::<span class="built_in">assert_true</span>(<span class="literal">true</span>, (<span class="keyword">char</span> *)<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例集</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">all_tests</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *message = <span class="number">0</span>;</span><br><span class="line">    message = MuTest::<span class="built_in">run_test</span>(test_fail);</span><br><span class="line">    <span class="keyword">if</span> (message)</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    message = MuTest::<span class="built_in">run_test</span>(test_pass);</span><br><span class="line">    <span class="keyword">if</span> (message)</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *message = <span class="built_in">all_tests</span>();</span><br><span class="line">    <span class="keyword">if</span> (message)</span><br><span class="line">        std::cout &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ALL TESTS PASSED&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Tests run: &quot;</span> &lt;&lt; MuTest::tests_run &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fail</span><br><span class="line">Tests run: 1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址&quot;&gt;&lt;/a&gt;参考网址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/CklfQPoyvJCKv8ohu-oqOw&quot;&gt;ht</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>shenlan_vio_course:02IMU预积分</title>
    <link href="https://peitianyu.github.io/blog/2022/06/01/IMU%E9%A2%84%E7%A7%AF%E5%88%86/"/>
    <id>https://peitianyu.github.io/blog/2022/06/01/IMU%E9%A2%84%E7%A7%AF%E5%88%86/</id>
    <published>2022-06-01T04:30:12.000Z</published>
    <updated>2022-06-02T01:02:56.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p> <a href="https://github.com/cggos/shenlan_vio_course">cggos/shenlan_vio_course: 深蓝学院《视觉SLAM进阶：从零开始手写VIO》第一期 (github.com)</a> </p><p> <a href="https://zhuanlan.zhihu.com/p/150364458">多传感器融合定位理论基础（十一）：IMU预积分模型及应用 - 知乎 (zhihu.com)</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址&quot;&gt;&lt;/a&gt;参考网址&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://github.com/cggos/shenlan_vio_course&quot;&gt;cggos/s</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>shenlan_vio_course:02IMU标定</title>
    <link href="https://peitianyu.github.io/blog/2022/06/01/IMU%E6%A0%87%E5%AE%9A/"/>
    <id>https://peitianyu.github.io/blog/2022/06/01/IMU%E6%A0%87%E5%AE%9A/</id>
    <published>2022-06-01T04:30:12.000Z</published>
    <updated>2022-06-01T12:29:00.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p> <a href="https://github.com/cggos/shenlan_vio_course">cggos/shenlan_vio_course: 深蓝学院《视觉SLAM进阶：从零开始手写VIO》第一期 (github.com)</a> </p><p> <a href="https://zhuanlan.zhihu.com/p/357859357">【传感器标定】IMU - 知乎 (zhihu.com)</a> </p><h1 id="误差来源"><a href="#误差来源" class="headerlink" title="误差来源"></a>误差来源</h1><p><img src="https://s2.loli.net/2022/06/01/nTAN4wsMJraEH29.jpg" alt="v2-6f6b6c556c0e804276bc1e4a53904523_720w.jpg"></p><h1 id="标定方法"><a href="#标定方法" class="headerlink" title="标定方法"></a>标定方法</h1><p><img src="https://s2.loli.net/2022/06/01/y4ijfq1mdJK2htb.jpg" alt="v2-41a0f156c4c54f8cf6d67d6cf3825f62_720w.jpg"></p><h2 id="Allan方差标定"><a href="#Allan方差标定" class="headerlink" title="Allan方差标定"></a>Allan方差标定</h2><p><a href="https://link.zhihu.com/?target=https://github.com/gaowenliang/imu_utils">https://link.zhihu.com/?target=https%3A//github.com/gaowenliang/imu_utils</a></p><p>原理: <a href="https://zhuanlan.zhihu.com/p/125554723">多传感器融合定位理论基础（三）：惯性器件误差分析 - 知乎 (zhihu.com)</a> </p><h2 id="梯度下降迭代优化标定"><a href="#梯度下降迭代优化标定" class="headerlink" title="梯度下降迭代优化标定"></a>梯度下降迭代优化标定</h2><p> <a href="https://github.com/Kyle-ak/imu_tk">Kyle-ak/imu_tk (github.com)</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址&quot;&gt;&lt;/a&gt;参考网址&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://github.com/cggos/shenlan_vio_course&quot;&gt;cggos/s</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>shenlan_vio_course:01四元数与李代数更新估计值</title>
    <link href="https://peitianyu.github.io/blog/2022/06/01/%E6%9D%8E%E4%BB%A3%E6%95%B0%E4%B8%8E%E5%9B%9B%E5%85%83%E6%95%B0%E6%9B%B4%E6%96%B0%E4%BC%B0%E8%AE%A1%E5%80%BC/"/>
    <id>https://peitianyu.github.io/blog/2022/06/01/%E6%9D%8E%E4%BB%A3%E6%95%B0%E4%B8%8E%E5%9B%9B%E5%85%83%E6%95%B0%E6%9B%B4%E6%96%B0%E4%BC%B0%E8%AE%A1%E5%80%BC/</id>
    <published>2022-06-01T04:30:12.000Z</published>
    <updated>2022-06-01T12:00:57.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p> <a href="https://github.com/cggos/shenlan_vio_course">cggos/shenlan_vio_course: 深蓝学院《视觉SLAM进阶：从零开始手写VIO》第一期 (github.com)</a> </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Geometry&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sophus/so3.cpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Eigen::UnitRandom(), ref: http://planning.cs.uiuc.edu/node198.html</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Eigen::Quaterniond <span class="title">unit_random</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> u1 = <span class="built_in">rand</span>() / <span class="built_in"><span class="keyword">double</span></span>(RAND_MAX); <span class="comment">// [0, 1]</span></span><br><span class="line">    <span class="keyword">double</span> u2 = <span class="built_in">rand</span>() / <span class="built_in"><span class="keyword">double</span></span>(RAND_MAX) * M_2_PI;</span><br><span class="line">    <span class="keyword">double</span> u3 = <span class="built_in">rand</span>() / <span class="built_in"><span class="keyword">double</span></span>(RAND_MAX) * M_2_PI;</span><br><span class="line">    <span class="keyword">double</span> a = std::<span class="built_in">sqrt</span>(<span class="number">1</span> - u1);</span><br><span class="line">    <span class="keyword">double</span> b = std::<span class="built_in">sqrt</span>(u1);</span><br><span class="line">    <span class="keyword">return</span> Eigen::<span class="built_in">Quaterniond</span>(a*<span class="built_in">sin</span>(u2), a*<span class="built_in">cos</span>(u2), b*<span class="built_in">sin</span>(u3), b*<span class="built_in">cos</span>(u3)).<span class="built_in">normalized</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Eigen::Matrix3d R = Eigen::AngleAxisd(M_PI_2, Eigen::Vector3d(0,0,1)).toRotationMatrix();</span></span><br><span class="line">    <span class="function">Eigen::Matrix3d <span class="title">R</span><span class="params">(unit_random())</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;the random initial rotation matrix R:\n&quot;</span> &lt;&lt; R &lt;&lt; std::endl &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Sophus::SO3 <span class="title">R_SO3</span><span class="params">(R)</span></span>;</span><br><span class="line">    <span class="function">Eigen::Vector3d <span class="title">omega</span><span class="params">(<span class="number">0.01</span>, <span class="number">0.02</span>, <span class="number">0.03</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 更新旋转矩阵估计位姿</span></span><br><span class="line">    Sophus::SO3 R_SO3_updated = R_SO3 * Sophus::SO3::<span class="built_in">exp</span>(omega);</span><br><span class="line">    Eigen::Matrix3d R1 = R_SO3_updated.<span class="built_in">matrix</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;R1:\n&quot;</span> &lt;&lt; R1 &lt;&lt; std::endl &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Eigen::Quaterniond <span class="title">R_q</span><span class="params">(R)</span></span>;</span><br><span class="line">    <span class="function">Eigen::Quaterniond <span class="title">q_update</span><span class="params">(<span class="number">1</span>, omega[<span class="number">0</span>]*<span class="number">0.5</span>, omega[<span class="number">1</span>]*<span class="number">0.5</span>, omega[<span class="number">2</span>]*<span class="number">0.5</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 更新四元数估计位姿</span></span><br><span class="line">    Eigen::Quaterniond R_q_updated = (R_q*q_update).<span class="built_in">normalized</span>();</span><br><span class="line">    Eigen::Matrix3d R2 = R_q_updated.<span class="built_in">toRotationMatrix</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;R2:\n&quot;</span> &lt;&lt; R2 &lt;&lt; std::endl &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix3d R_error = R1 - R2;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;error matrix (R1-R2):\n&quot;</span> &lt;&lt; R_error &lt;&lt; std::endl &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弗罗贝尼乌斯范数:矩阵各项元素的绝对值平方的总和开根</span></span><br><span class="line">    <span class="comment">// 描述:两个矩阵之间差距</span></span><br><span class="line">    <span class="keyword">double</span> error_f_norm = R_error.<span class="built_in">norm</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;the Frobenius Norm of the error matrix: &quot;</span> &lt;&lt; error_f_norm &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址&quot;&gt;&lt;/a&gt;参考网址&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://github.com/cggos/shenlan_vio_course&quot;&gt;cggos/s</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>聚类</title>
    <link href="https://peitianyu.github.io/blog/2022/06/01/%E8%81%9A%E7%B1%BB/"/>
    <id>https://peitianyu.github.io/blog/2022/06/01/%E8%81%9A%E7%B1%BB/</id>
    <published>2022-06-01T04:30:12.000Z</published>
    <updated>2022-06-01T11:15:02.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cluster</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Options</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Threshold</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">double</span> distance = <span class="number">2.0</span>;</span><br><span class="line">            <span class="keyword">double</span> theta = <span class="number">10.0</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        Threshold threshold = &#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pose</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">double</span> x = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> y = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> theta = <span class="number">0.0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Options m_options;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="built_in">Cluster</span>(<span class="keyword">const</span> Options &amp;options, std::vector&lt;Pose&gt; &amp;pose_list);</span><br><span class="line">    ~<span class="built_in">Cluster</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_cluster</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    std::vector&lt;Pose&gt; m_pose_list;</span><br><span class="line">    <span class="comment">// 数据矩阵保存聚类结果(pose, cluster_id)</span></span><br><span class="line">    std::vector&lt;std::pair&lt;Pose, uint&gt;&gt; m_cluster_result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Cluster::<span class="built_in">Cluster</span>(<span class="keyword">const</span> Options &amp;options, std::vector&lt;Pose&gt; &amp;pose_list)</span><br><span class="line">    : <span class="built_in">m_options</span>(options)</span><br><span class="line">    , <span class="built_in">m_pose_list</span>(pose_list)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Run</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cluster::~<span class="built_in">Cluster</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cluster::Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化聚类结果</span></span><br><span class="line">    m_cluster_result.<span class="built_in">resize</span>(m_pose_list.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; m_pose_list.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        m_cluster_result[i].first = m_pose_list[i];</span><br><span class="line">        m_cluster_result[i].second = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化聚类结果</span></span><br><span class="line">    <span class="function">std::vector&lt;uint&gt; <span class="title">cluster_id_list</span><span class="params">(m_pose_list.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    uint cluster_id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; m_pose_list.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cluster_id_list[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cluster_id_list[i] = cluster_id;</span><br><span class="line">            cluster_id++;</span><br><span class="line">            <span class="keyword">for</span> (uint j = i + <span class="number">1</span>; j &lt; m_pose_list.<span class="built_in">size</span>(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cluster_id_list[j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">double</span> distance = std::<span class="built_in">hypot</span>(m_pose_list[i].x - m_pose_list[j].x, m_pose_list[i].y - m_pose_list[j].y);</span><br><span class="line">                    <span class="keyword">double</span> theta = std::<span class="built_in">abs</span>(m_pose_list[i].theta - m_pose_list[j].theta);</span><br><span class="line">                    <span class="keyword">if</span> (distance &lt; m_options.threshold.distance &amp;&amp; theta &lt; m_options.threshold.theta)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cluster_id_list[j] = cluster_id_list[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查cluster_id_list是否存在阈值交集,并合并交集</span></span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; m_pose_list.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(uint j = i + <span class="number">1</span>; j &lt; m_pose_list.<span class="built_in">size</span>(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> distance = std::<span class="built_in">hypot</span>(m_pose_list[i].x - m_pose_list[j].x, m_pose_list[i].y - m_pose_list[j].y);</span><br><span class="line">            <span class="keyword">double</span> theta = std::<span class="built_in">abs</span>(m_pose_list[i].theta - m_pose_list[j].theta);</span><br><span class="line">            <span class="keyword">if</span> (distance &lt; m_options.threshold.distance &amp;&amp; theta &lt; m_options.threshold.theta)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cluster_id_list[i] != cluster_id_list[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (uint k = <span class="number">0</span>; k &lt; m_pose_list.<span class="built_in">size</span>(); ++k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cluster_id_list[k] == cluster_id_list[j])</span><br><span class="line">                        &#123;</span><br><span class="line">                            cluster_id_list[k] = cluster_id_list[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新聚类结果</span></span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; m_pose_list.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        m_cluster_result[i].second = cluster_id_list[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按照聚类结果排序</span></span><br><span class="line">    <span class="comment">// std::sort(m_cluster_result.begin(), m_cluster_result.end(), [](const std::pair&lt;Pose, uint&gt; &amp;a, const std::pair&lt;Pose, uint&gt; &amp;b) &#123;</span></span><br><span class="line">    <span class="comment">//     return a.second &lt; b.second;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="built_in">print_cluster</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cluster::print_cluster</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;cluster result: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; m_cluster_result.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;pose: &quot;</span> &lt;&lt; m_cluster_result[i].first.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m_cluster_result[i].first.y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m_cluster_result[i].first.theta &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;cluster_id: &quot;</span> &lt;&lt; m_cluster_result[i].second &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否聚类</span></span><br><span class="line">    <span class="keyword">bool</span> is_cluster = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> cluster_id : m_cluster_result)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cluster_id.second != m_cluster_result.<span class="built_in">front</span>().second)</span><br><span class="line">        &#123;</span><br><span class="line">            is_cluster = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;is_cluster: &quot;</span> &lt;&lt; is_cluster &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;Cluster::Pose&gt; pose_list;</span><br><span class="line">    <span class="comment">// 随机生成一组pose_list</span></span><br><span class="line">    std::random_device rd;</span><br><span class="line">    <span class="function">std::mt19937 <span class="title">gen</span><span class="params">(rd())</span></span>;</span><br><span class="line">    std::uniform_real_distribution&lt;&gt; <span class="built_in">dis</span>(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Cluster::Pose pose;</span><br><span class="line">        pose = &#123;<span class="built_in">dis</span>(gen), <span class="built_in">dis</span>(gen), <span class="built_in">dis</span>(gen)&#125;;</span><br><span class="line">        pose_list.<span class="built_in">push_back</span>(pose);</span><br><span class="line">    &#125;</span><br><span class="line">    Cluster::Options options;</span><br><span class="line">    options.threshold.distance = <span class="number">5</span>;</span><br><span class="line">    options.threshold.theta = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Cluster <span class="title">cluster</span><span class="params">(options, pose_list)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;figure class=&quot;highlight cc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>Sophus安装</title>
    <link href="https://peitianyu.github.io/blog/2022/05/28/Sophus%E5%AE%89%E8%A3%85/"/>
    <id>https://peitianyu.github.io/blog/2022/05/28/Sophus%E5%AE%89%E8%A3%85/</id>
    <published>2022-05-28T04:30:12.000Z</published>
    <updated>2022-05-28T01:51:53.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/qq_34078823/article/details/103891404?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0-103891404-blog-105920562.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3">(135条消息) Sophus库使用踩坑_清酒不是九的博客-CSDN博客_卸载sophus</a> </p><p> <a href="https://blog.csdn.net/sulywang/article/details/105920562?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-105920562-blog-77833022.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-105920562-blog-77833022.pc_relevant_antiscanv2&utm_relevant_index=2">(135条消息) Sophus库安装 踩坑心得_sulywang的博客-CSDN博客</a> </p><p> <a href="https://blog.csdn.net/weixin_52402390/article/details/122300882">(135条消息) Sophus库安装及make报错解决记录_weixin_52402390的博客-CSDN博客_sophus安装报错</a> </p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://ghproxy.com/https://github.com/strasdat/Sophus.git</span><br><span class="line">cd Sophus</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h1 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h1><p> Sophus/sophus/so2.cpp 文件修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将</span></span><br><span class="line">SO2::SO2() </span><br><span class="line">&#123; </span><br><span class="line">    unit_complex_.real() = <span class="number">1.</span>; </span><br><span class="line">    unit_complex_.imag() = <span class="number">0.</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改为</span></span><br><span class="line">SO2::SO2() </span><br><span class="line">&#123; </span><br><span class="line">    unit_complex_.real(<span class="number">1.</span>); </span><br><span class="line">    unit_complex_.imag(<span class="number">0.</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/qq_34078823/article/details/</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>检测识别</title>
    <link href="https://peitianyu.github.io/blog/2022/05/26/%E6%A3%80%E6%B5%8B%E8%AF%86%E5%88%AB%E9%97%AE%E9%A2%98/"/>
    <id>https://peitianyu.github.io/blog/2022/05/26/%E6%A3%80%E6%B5%8B%E8%AF%86%E5%88%AB%E9%97%AE%E9%A2%98/</id>
    <published>2022-05-26T04:30:12.000Z</published>
    <updated>2022-05-26T04:46:01.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/qq_24598059/article/details/89066951?ops_request_misc=%7B%22request_id%22:%22165353511716781432944213%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165353511716781432944213&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-89066951-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&utm_term=%E8%AF%AF%E6%88%90%E5%8A%9F%E7%8E%87%E4%B8%8E%E6%BC%8F%E6%88%90%E5%8A%9F%E7%8E%87&spm=1018.2226.3001.4187">(135条消息) 机器学习中性能评估指标中的准确率（Accuracy）、召回率（Recall=TPR）、精确率（Precision）、误报率（FPR）、漏报率（FNR）及其关系_叫我猴哥的博客-CSDN博客_误报率和漏报率</a> </p><p> <a href="https://blog.csdn.net/weixin_43849243/article/details/124284176?ops_request_misc=%7B%22request_id%22:%22165353366516782390596168%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165353366516782390596168&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-124284176-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&utm_term=%E6%95%B0%E6%8D%AE%E6%B3%A2%E5%8A%A8%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B&spm=1018.2226.3001.4187">(135条消息) 数据分析见解-数据异常波动_易夫人0的博客-CSDN博客_数据波动分析</a> </p><p> <a href="https://blog.csdn.net/yexudengzhidao/article/details/103700546?ops_request_misc=%7B%22request_id%22:%22165353726916782390526872%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165353726916782390526872&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-103700546-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&utm_term=%E5%90%8C%E6%AF%94%E7%8E%AF%E6%AF%94&spm=1018.2226.3001.4187">(135条消息) 同比、环比_. . . . .的博客-CSDN博客_月环比和月同比</a> </p><p> <a href="https://blog.csdn.net/hitzhang/article/details/4913044?ops_request_misc=&request_id=&biz_id=102&utm_term=%E4%B8%80%E9%98%B6%E7%9F%A9&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-4913044.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&spm=1018.2226.3001.4187">(135条消息) 一阶矩、二阶矩含义_hitzhang的博客-CSDN博客_二阶矩是什么意思</a> </p><p> <a href="https://blog.csdn.net/u013421629/article/details/103870567?ops_request_misc=%7B%22request_id%22:%22165353711816782395355596%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165353711816782395355596&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-103870567-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&utm_term=3%CF%83%E5%8E%9F%E5%88%99&spm=1018.2226.3001.4187">(135条消息) 【python 机器学习】正态分布检验以及异常值处理3σ原则_东华果汁哥的博客-CSDN博客_正态分布去除异常值</a> </p><h1 id="异常检测"><a href="#异常检测" class="headerlink" title="异常检测"></a>异常检测</h1><h2 id="波动类型"><a href="#波动类型" class="headerlink" title="波动类型"></a>波动类型</h2><ul><li>一次性波动</li><li>周期性波动</li><li>持续性波动</li></ul><h2 id="异常识别"><a href="#异常识别" class="headerlink" title="异常识别"></a>异常识别</h2><ul><li>绝对值预警</li><li>相对值预警<ul><li>同比环比</li><li>周期平滑</li><li>假设检测( <em>3σ原则</em> )</li></ul></li></ul><h1 id="评价性能指标"><a href="#评价性能指标" class="headerlink" title="评价性能指标"></a>评价性能指标</h1><h2 id="精确率（Precision）"><a href="#精确率（Precision）" class="headerlink" title="精确率（Precision）"></a>精确率（Precision）</h2><p> precision 表示的是被识别为正类别的样本中，确实为正类别的比例是多少？ </p><h2 id="召回率（Recall-TPR）"><a href="#召回率（Recall-TPR）" class="headerlink" title="召回率（Recall=TPR）"></a>召回率（Recall=TPR）</h2><p> 在所有正类别样本中，被正确识别为正类别的比例是多少？ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/qq_24598059/article/details/</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>算法设计流程</title>
    <link href="https://peitianyu.github.io/blog/2022/05/26/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/"/>
    <id>https://peitianyu.github.io/blog/2022/05/26/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</id>
    <published>2022-05-26T04:30:12.000Z</published>
    <updated>2022-05-26T03:41:29.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/qq_24598059/article/details/89066951?ops_request_misc=%7B%22request_id%22:%22165353511716781432944213%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165353511716781432944213&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-89066951-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&utm_term=%E8%AF%AF%E6%88%90%E5%8A%9F%E7%8E%87%E4%B8%8E%E6%BC%8F%E6%88%90%E5%8A%9F%E7%8E%87&spm=1018.2226.3001.4187">(135条消息) 机器学习中性能评估指标中的准确率（Accuracy）、召回率（Recall=TPR）、精确率（Precision）、误报率（FPR）、漏报率（FNR）及其关系_叫我猴哥的博客-CSDN博客_误报率和漏报率</a> </p><h1 id="算法设计流程"><a href="#算法设计流程" class="headerlink" title="算法设计流程"></a>算法设计流程</h1><p>例子:</p><p>找出scan中错误点-&gt;定义错误点-&gt;描述实现方法-&gt;coding-&gt;评价-&gt;迭代</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/qq_24598059/article/details/</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>pf重采样</title>
    <link href="https://peitianyu.github.io/blog/2022/05/20/pf%E9%87%8D%E9%87%87%E6%A0%B7/"/>
    <id>https://peitianyu.github.io/blog/2022/05/20/pf%E9%87%8D%E9%87%87%E6%A0%B7/</id>
    <published>2022-05-20T04:30:12.000Z</published>
    <updated>2022-05-20T09:41:47.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/HERO_CJN/article/details/93458674?ops_request_misc=%7B%22request_id%22:%22165302272316782246460201%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165302272316782246460201&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-93458674-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev4%5Econtrol&utm_term=%E4%BD%8E%E6%96%B9%E5%B7%AE%E9%87%8D%E9%87%87%E6%A0%B7&spm=1018.2226.3001.4187">(134条消息) 粒子滤波重采样_cjn_的博客-CSDN博客_粒子滤波重采样</a> </p><p> <a href="https://github.com/softdream/MCL_test">softdream/MCL_test: Monte Carlo Localization( MCL ) (github.com)</a> </p><p> <a href="https://gaoyichao.com/Xiaotu/?book=probabilistic_robotics&title=pr_chapter4">无处不在的小土-pr_chapter4 (gaoyichao.com)</a> </p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>重采样这里提两种方式:轮盘赌与低方差重采样</p><p>低方差重采样优点在于仅用单一随机数实现在X集合中进行采样</p><h1 id="轮盘赌重采样"><a href="#轮盘赌重采样" class="headerlink" title="轮盘赌重采样"></a>轮盘赌重采样</h1><p><img src="https://s2.loli.net/2022/05/20/43idRPbjh8pG6ky.png" alt="轮盘赌重采样.png"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">%生成c,范围为(0~1)</span></span><br><span class="line">    c=<span class="built_in">zeros</span>(<span class="number">1</span>,n);</span><br><span class="line">    c(<span class="number">1</span>)=w(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">2</span>:n</span><br><span class="line">        c(<span class="built_in">j</span>)=c(<span class="built_in">j</span><span class="number">-1</span>)+w(<span class="built_in">j</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">%转盘子，生成随机数，看落在哪个区间</span></span><br><span class="line">    <span class="comment">%首先我们要重采样n个粒子，粒子数要与之前相同</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n</span><br><span class="line">        a=unifrnd(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">%均匀分布随机数</span></span><br><span class="line">        <span class="keyword">for</span> k=<span class="number">1</span>:n</span><br><span class="line">            <span class="keyword">if</span> (a&lt;c(k))</span><br><span class="line">                xnew(<span class="built_in">j</span>)=xold(k);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">%%%%一定要break，否则重采样粒子会被最后一个粒子覆盖，具体见新的第十讲</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">%重采样完毕</span></span><br><span class="line">    <span class="comment">%把新的粒子赋值给xold，为下一步递推做准备</span></span><br><span class="line">    xold=xnew;</span><br><span class="line">    <span class="comment">%所有粒子权重都设为1/n</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n</span><br><span class="line">        w(<span class="built_in">j</span>)=<span class="number">1</span>/n;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">%把每一步的后验概率期望赋值给xplus</span></span><br><span class="line">    xplus(<span class="built_in">i</span>)=sum(xnew)/n;    </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="低方差重采样"><a href="#低方差重采样" class="headerlink" title="低方差重采样"></a>低方差重采样</h1><p><img src="https://s2.loli.net/2022/05/20/nUtkWRL17gNQilJ.png" alt="低方差重采样.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lowVarianceSample</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Particle&gt; <span class="title">particles_temp</span><span class="params">( particles, particles + ParticleNum )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> r = ( rand() / (<span class="keyword">float</span>)RAND_MAX) * (<span class="number">1.0f</span> / (<span class="keyword">float</span>)ParticleNum ); </span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> c = particles[<span class="number">0</span>].getWeight();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; ParticleNum; m ++) &#123;</span><br><span class="line"><span class="keyword">float</span> u = r + (<span class="keyword">float</span>)m / (<span class="keyword">float</span>)ParticleNum ;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (u &gt; c &amp;&amp; i &lt; ParticleNum - <span class="number">1</span>)&#123; </span><br><span class="line">i++;</span><br><span class="line">c += particles_temp[i].getWeight();</span><br><span class="line">&#125;</span><br><span class="line">particles[ m ] = particles_temp[i];  </span><br><span class="line">particles[ m ].setWeight( <span class="number">1.0f</span> / ParticleNum );</span><br><span class="line"></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot; each weight is : &quot; &lt;&lt; particles[m].getWeight() &lt;&lt; std::endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/HERO_CJN/article/details/934</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>config配置</title>
    <link href="https://peitianyu.github.io/blog/2022/05/18/config%E9%85%8D%E7%BD%AE/"/>
    <id>https://peitianyu.github.io/blog/2022/05/18/config%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-18T04:30:12.000Z</published>
    <updated>2022-05-18T01:30:57.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://mp.weixin.qq.com/s/kL24fcjJ-Zu-vKGBltaDzQ">.ini配置文件解析器–minIni (qq.com)</a> </p><p> <a href="https://github.com/peitianyu/config_ini">peitianyu/config_ini (github.com)</a> </p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config_ini</span></span><br><span class="line">Config *USINGINFOPAHT;</span><br><span class="line">USINGINFOPAHT = <span class="built_in">cnf_read_config</span>(ConfigFile_name, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"><span class="built_in">cnf_get_value</span>(USINGINFOPAHT, <span class="string">&quot;scan&quot;</span>, <span class="string">&quot;angle_min&quot;</span>);</span><br><span class="line">angle_min = USINGINFOPAHT-&gt;re_double;</span><br></pre></td></tr></table></figure><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    gcc -o minIni.o -c minIni.c</span></span><br><span class="line"><span class="comment">    g++ -o test2.o -c test2.cc</span></span><br><span class="line"><span class="comment">    g++ -o test2 test2.o minIni.o</span></span><br><span class="line"><span class="comment">    ./test2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std ;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;minIni.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">minIni <span class="title">ini</span><span class="params">(<span class="string">&quot;test.ini&quot;</span>)</span></span>;</span><br><span class="line">  string s;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* string reading */</span></span><br><span class="line">  s = ini.<span class="built_in">gets</span>( <span class="string">&quot;first&quot;</span>, <span class="string">&quot;string&quot;</span> , <span class="string">&quot;aap&quot;</span> );</span><br><span class="line">  <span class="built_in">assert</span>(s == <span class="string">&quot;noot&quot;</span>);</span><br><span class="line">  s = ini.<span class="built_in">gets</span>( <span class="string">&quot;second&quot;</span>, <span class="string">&quot;string&quot;</span> , <span class="string">&quot;aap&quot;</span> );</span><br><span class="line">  <span class="built_in">assert</span>(s == <span class="string">&quot;mies&quot;</span>);</span><br><span class="line">  s = ini.<span class="built_in">gets</span>( <span class="string">&quot;first&quot;</span>, <span class="string">&quot;dummy&quot;</span> , <span class="string">&quot;aap&quot;</span> );</span><br><span class="line">  <span class="built_in">assert</span>(s == <span class="string">&quot;aap&quot;</span>);</span><br><span class="line">  cout &lt;&lt;  <span class="string">&quot;1. String reading tests passed&quot;</span> &lt;&lt; endl ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* value reading */</span></span><br><span class="line">  <span class="keyword">long</span> n;</span><br><span class="line">  n = ini.<span class="built_in">getl</span>(<span class="string">&quot;first&quot;</span>, <span class="string">&quot;val&quot;</span>, <span class="number">-1</span> );</span><br><span class="line">  <span class="built_in">assert</span>(n==<span class="number">1</span>);</span><br><span class="line">  n = ini.<span class="built_in">getl</span>(<span class="string">&quot;second&quot;</span>, <span class="string">&quot;val&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">assert</span>(n==<span class="number">2</span>);</span><br><span class="line">  n = ini.<span class="built_in">getl</span>(<span class="string">&quot;first&quot;</span>, <span class="string">&quot;dummy&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">assert</span>(n==<span class="number">-1</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;2. Value reading tests passed&quot;</span> &lt;&lt; endl ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* string writing */</span></span><br><span class="line">  <span class="keyword">bool</span> b;</span><br><span class="line">  b = ini.<span class="built_in">put</span>(<span class="string">&quot;first&quot;</span>, <span class="string">&quot;alt&quot;</span>, <span class="string">&quot;flagged as \&quot;correct\&quot;&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(b);</span><br><span class="line">  s = ini.<span class="built_in">gets</span>(<span class="string">&quot;first&quot;</span>, <span class="string">&quot;alt&quot;</span>, <span class="string">&quot;aap&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(s==<span class="string">&quot;flagged as \&quot;correct\&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  b = ini.<span class="built_in">put</span>(<span class="string">&quot;second&quot;</span>, <span class="string">&quot;alt&quot;</span>, <span class="string">&quot;correct&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(b);</span><br><span class="line">  s = ini.<span class="built_in">gets</span>(<span class="string">&quot;second&quot;</span>, <span class="string">&quot;alt&quot;</span>, <span class="string">&quot;aap&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(s==<span class="string">&quot;correct&quot;</span>);</span><br><span class="line"></span><br><span class="line">  b = ini.<span class="built_in">put</span>(<span class="string">&quot;third&quot;</span>, <span class="string">&quot;alt&quot;</span>, <span class="string">&quot;correct&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(b);</span><br><span class="line">  s = ini.<span class="built_in">gets</span>(<span class="string">&quot;third&quot;</span>, <span class="string">&quot;alt&quot;</span>, <span class="string">&quot;aap&quot;</span> );</span><br><span class="line">  <span class="built_in">assert</span>(s==<span class="string">&quot;correct&quot;</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;3. String writing tests passed&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* section/key enumeration */</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;4. section/key enumeration; file contents follows&quot;</span> &lt;&lt; endl;</span><br><span class="line">  string section;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> is = <span class="number">0</span>; section = ini.<span class="built_in">getsection</span>(is), section.<span class="built_in">length</span>() &gt; <span class="number">0</span>; is++) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;    [&quot;</span> &lt;&lt; section.<span class="built_in">c_str</span>() &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ik = <span class="number">0</span>; s = ini.<span class="built_in">getkey</span>(section, ik), s.<span class="built_in">length</span>() &gt; <span class="number">0</span>; ik++) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; s.<span class="built_in">c_str</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* string deletion */</span></span><br><span class="line">  b = ini.<span class="built_in">del</span>(<span class="string">&quot;first&quot;</span>, <span class="string">&quot;alt&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(b);</span><br><span class="line">  b = ini.<span class="built_in">del</span>(<span class="string">&quot;second&quot;</span>, <span class="string">&quot;alt&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(b);</span><br><span class="line">  b = ini.<span class="built_in">del</span>(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(b);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;5. string deletion passed &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://mp.weixin.qq.com/s/kL24fcjJ-Zu-vKGBltaDzQ&quot;</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>软件命名规则</title>
    <link href="https://peitianyu.github.io/blog/2022/05/18/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%91%BD%E5%90%8D/"/>
    <id>https://peitianyu.github.io/blog/2022/05/18/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%91%BD%E5%90%8D/</id>
    <published>2022-05-18T04:30:12.000Z</published>
    <updated>2022-05-18T01:02:40.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://mp.weixin.qq.com/s/o_oesCA_1LAEMBI8Qbjvzg">嵌入式软件版本怎么样命名才比较专业？ (qq.com)</a> </p><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主版本号.子版本号.修订版本号.日期_版本阶段</span><br><span class="line">V1.2.3.20220513_rc</span><br></pre></td></tr></table></figure><h1 id="版本阶段"><a href="#版本阶段" class="headerlink" title="版本阶段"></a>版本阶段</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">standard：标准版</span><br><span class="line">full version：完整版，即正式版</span><br><span class="line">lts：长期维护版本</span><br><span class="line">ultimate：旗舰版</span><br><span class="line">alpha：内部版本</span><br><span class="line">beta：测试版</span><br><span class="line">demo：演示版</span><br><span class="line">enhance：增强版</span><br><span class="line">free：自由版</span><br><span class="line">lts：长期维护版本</span><br><span class="line">release：发行版</span><br><span class="line">rc：即将作为正式版发布</span><br><span class="line">standard：标准版</span><br><span class="line">upgrade：升级版</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://mp.weixin.qq.com/s/o_oesCA_1LAEMBI8Qbjvzg&quot;</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>addr2line</title>
    <link href="https://peitianyu.github.io/blog/2022/05/11/addr2line/"/>
    <id>https://peitianyu.github.io/blog/2022/05/11/addr2line/</id>
    <published>2022-05-11T04:30:12.000Z</published>
    <updated>2022-05-15T15:12:46.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/qq_23101811/article/details/122184548">(132条消息) addr2line 输出为?:0可能原因_qq_23101811的博客-CSDN博客</a> </p><p> <a href="https://blog.csdn.net/lhf_tiger/article/details/9088609">(132条消息) addr2line命令_残阳的博客-CSDN博客_addr2line命令用法</a> </p><p> <a href="https://blog.csdn.net/carefree2005/article/details/120737841?ops_request_misc=%7B%22request_id%22:%22165224592316781683954060%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165224592316781683954060&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-120737841-null-null.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&utm_term=dmesg&spm=1018.2226.3001.4187">(132条消息) Linux命令之dmesg命令_浪子吴天的博客-CSDN博客_dmesg</a> </p><p> <a href="https://blog.csdn.net/chi_wy/article/details/82023672?ops_request_misc=%7B%22request_id%22:%22165232444016781667896542%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165232444016781667896542&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-82023672-null-null.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&utm_term=addr2line+-C&spm=1018.2226.3001.4187">(133条消息) addr2line排查地址_AK_Coffee的博客-CSDN博客_addr2line地址</a> </p><h1 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译注意使用-g模式编译</span></span><br><span class="line">gcc -o <span class="built_in">test</span> -g test.c</span><br><span class="line"><span class="comment">#清除内核环形缓冲区(ring butter)</span></span><br><span class="line">dmesg -C </span><br><span class="line"><span class="comment">#执行文件</span></span><br><span class="line">./<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 查看所有开机日志信息</span></span><br><span class="line">dmesg</span><br><span class="line">[3540868.730553] traps: <span class="built_in">test</span>[4331] <span class="built_in">trap</span> divide error ip:55d347e5067b sp:7ffdb3499f50 error:0</span><br><span class="line">[3540868.730567]  <span class="keyword">in</span> <span class="built_in">test</span>[55d347e50000+1000]</span><br><span class="line"><span class="comment"># 计算ip</span></span><br><span class="line">ip: 55d347e5067b - 55d347e50000 = 067b</span><br><span class="line"><span class="comment"># addr2line -e test 067b</span></span><br><span class="line"><span class="comment"># addr2line -a -C -e libstagefright_omx.so  -f 00023808</span></span><br><span class="line">/var/testhelper/programsymbols/tes.c:8</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dmesg -C</span><br><span class="line"><span class="built_in">cd</span> bin &amp;&amp; ./SlamTest</span><br><span class="line">dmesg &gt; /tmp/dmesg.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第一行</span></span><br><span class="line">grep -m 1 -E <span class="string">&quot;SlamTest\[[0-9]+\]: segfault&quot;</span> /tmp/dmesg.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取第一行的ip值,并保存</span></span><br><span class="line">addr_end=$(grep -m 1 -E <span class="string">&quot;SlamTest\[[0-9]+\]: segfault&quot;</span> /tmp/dmesg.txt | awk -F <span class="string">&#x27;ip &#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># echo $addr_end</span></span><br><span class="line"><span class="comment"># 读取第一行的SlamTest值,并去除+后面的值</span></span><br><span class="line">addr_begin=$(grep -m 1 -E <span class="string">&quot;SlamTest\[[0-9]+\]: segfault&quot;</span> /tmp/dmesg.txt | awk -F <span class="string">&#x27;in SlamTest&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="string">&#x27;[&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="string">&#x27;]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># echo $addr_begin</span></span><br><span class="line"><span class="comment"># 5573b4000000+28d000</span></span><br><span class="line"><span class="comment"># 去除+后面的值</span></span><br><span class="line">addr_begin=$(<span class="built_in">echo</span> <span class="variable">$addr_begin</span> | awk -F <span class="string">&#x27;+&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># echo $addr_begin</span></span><br><span class="line"><span class="comment"># 计算出addr_begin和addr_end的十六进制差值</span></span><br><span class="line">addr_diff=$((<span class="number">16</span>#<span class="variable">$addr_end</span>-<span class="number">16</span>#<span class="variable">$addr_begin</span>))</span><br><span class="line"><span class="comment"># 将差值转换成十六进制</span></span><br><span class="line">addr_diff_hex=$(<span class="built_in">printf</span> <span class="string">&quot;%x&quot;</span> <span class="variable">$addr_diff</span>)</span><br><span class="line"><span class="comment"># echo $addr_diff_hex</span></span><br><span class="line">addr2line -a -C -e SlamTest -f  <span class="variable">$addr_diff_hex</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/qq_23101811/article/details/</summary>
      
    
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/categories/tool/"/>
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>c++查看内存使用</title>
    <link href="https://peitianyu.github.io/blog/2022/05/09/C++%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2022/05/09/C++%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-09T04:30:12.000Z</published>
    <updated>2022-05-10T01:14:32.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/zjl_1026_2001/article/details/2294072?ops_request_misc=%7B%22request_id%22:%22165208801016781667894376%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165208801016781667894376&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-2294072-null-null.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&utm_term=/proc/self/statm&spm=1018.2226.3001.4187">(131条消息) PROC系列之—/proc/pid/statm_沙漠里的海豚的博客-CSDN博客_proc statm</a> </p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat  /proc/self/statm</span><br><span class="line">654 57 44 0 0 334 0</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CPU 以及CPU0。。。的每行的每个参数意思（以第一行为例）为：</span><br><span class="line">参数 解释 /proc/ /status</span><br><span class="line">Size (pages) 任务虚拟地址空间的大小 VmSize/4</span><br><span class="line">Resident(pages) 应用程序正在使用的物理内存的大小 VmRSS/4</span><br><span class="line">Shared(pages) 共享页数 0</span><br><span class="line">Trs(pages) 程序所拥有的可执行虚拟内存的大小 VmExe/4</span><br><span class="line">Lrs(pages) 被映像到任务的虚拟内存空间的库的大小 VmLib/4</span><br><span class="line">Drs(pages) 程序数据段和用户态的栈的大小 （VmData+ VmStk ）4</span><br><span class="line">dt(pages) 0 </span><br></pre></td></tr></table></figure><h1 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dump_mem_usage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* f = <span class="built_in">fopen</span>(<span class="string">&quot;/proc/self/statm&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">char</span>   str[<span class="number">300</span>];</span><br><span class="line">    <span class="keyword">size_t</span> n = <span class="built_in">fread</span>(str, <span class="number">1</span>, <span class="number">200</span>, f);</span><br><span class="line">    str[n]   = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;MEM: %s\n&quot;</span>, str);</span><br><span class="line">    <span class="built_in">fclose</span>(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/zjl_1026_2001/article/detail</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>nanoflann</title>
    <link href="https://peitianyu.github.io/blog/2022/05/09/nanoflann/"/>
    <id>https://peitianyu.github.io/blog/2022/05/09/nanoflann/</id>
    <published>2022-05-09T04:30:12.000Z</published>
    <updated>2022-05-10T01:28:29.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/u013019296/article/details/109377104">(131条消息) nanoflann库_Being_young的博客-CSDN博客</a> </p><p> <a href="https://github.com/jlblancoc/nanoflann">nanoflann: a C++11 header-only library for Nearest Neighbor (NN) search with KD-trees </a> </p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.构建kd-tree索引</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">my_kd_tree_t</span> = nanoflann::KDTreeSingleIndexAdaptor&lt;</span><br><span class="line">        nanoflann::L2_Simple_Adaptor&lt;<span class="keyword">num_t</span>, PointCloud&lt;<span class="keyword">num_t</span>&gt;&gt;,</span><br><span class="line">        PointCloud&lt;<span class="keyword">num_t</span>&gt;, <span class="number">3</span> <span class="comment">/* dim */</span></span><br><span class="line">        &gt;;</span><br><span class="line"><span class="function"><span class="keyword">my_kd_tree_t</span> <span class="title">index</span><span class="params">(<span class="number">3</span> <span class="comment">/*dim*/</span>, cloud, &#123;<span class="number">10</span> <span class="comment">/* max leaf */</span>&#125;)</span></span>;</span><br><span class="line"><span class="comment">// 2.knn 检索</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span>                   num_results = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">size_t</span>                         ret_index;</span><br><span class="line"><span class="keyword">num_t</span>                          out_dist_sqr;</span><br><span class="line"><span class="function">nanoflann::KNNResultSet&lt;<span class="keyword">num_t</span>&gt; <span class="title">resultSet</span><span class="params">(num_results)</span></span>;</span><br><span class="line">resultSet.<span class="built_in">init</span>(&amp;ret_index, &amp;out_dist_sqr);</span><br><span class="line">index.<span class="built_in">findNeighbors</span>(resultSet, &amp;query_pt[<span class="number">0</span>], nanoflann::<span class="built_in">SearchParams</span>(<span class="number">10</span>));</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;knnSearch(nn=&quot;</span> &lt;&lt; num_results &lt;&lt; <span class="string">&quot;): \n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ret_index=&quot;</span> &lt;&lt; ret_index</span><br><span class="line">          &lt;&lt; <span class="string">&quot; out_dist_sqr=&quot;</span> &lt;&lt; out_dist_sqr &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/u013019296/article/details/1</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>c++时间操作</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/C++11%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/C++11%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-05T12:01:51.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/u012010054/article/details/81259135?ops_request_misc=%7B%22request_id%22:%22165173467916781683972413%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165173467916781683972413&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81259135.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=clock_gettime&spm=1018.2226.3001.4187">(131条消息) clock_gettime 函数笔记_神秘的羔羊的博客-CSDN博客_clock_gettime</a></p><h1 id="clock-gettime"><a href="#clock-gettime" class="headerlink" title="clock_gettime"></a>clock_gettime</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clock_gettime</span><span class="params">(<span class="keyword">clockid_t</span> clk_id,struct timespec *tp)</span></span>;</span><br><span class="line"><span class="comment">//clk_id : 检索和设置的clk_id指定的时钟时间。</span></span><br><span class="line"><span class="comment">//CLOCK_REALTIME:系统实时时间,随系统实时时间改变而改变,即从UTC1970-1-1 0:0:0开始计时,中间时刻如果系统时间被用户改成其他,则对应的时间相应改变。</span></span><br><span class="line"><span class="comment">//CLOCK_MONOTONIC:从系统启动这一刻起开始计时,不受系统时间被用户改变的影响。</span></span><br><span class="line"><span class="comment">//CLOCK_PROCESS_CPUTIME_ID:本进程到当前代码系统CPU花费的时间。</span></span><br><span class="line"><span class="comment">//CLOCK_THREAD_CPUTIME_ID:本线程到当前代码系统CPU花费的时间。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">time_t</span> tv_sec; <span class="comment">/* 秒*/</span></span><br><span class="line">    <span class="keyword">long</span> tv_nsec; <span class="comment">/* 纳秒*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">time1</span> =</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">time2</span> =</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> temp;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">clock_gettime</span>(CLOCK_REALTIME, &amp;time1);      </span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">clock_gettime</span>(CLOCK_REALTIME, &amp;time2);   </span><br><span class="line">    temp = (time2.tv_nsec - time1.tv_nsec) / <span class="number">1000000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;time = %f ms\n&quot;</span>, temp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u012010054/article/details/81</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>c++智能指针</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/C++11%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/C++11%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-05T11:33:17.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://wentian.blog.csdn.net/article/details/109566645?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&utm_relevant_index=2"> C++自学24:唯一智能指针</a></p><p><a href="https://blog.csdn.net/qfturauyls/article/details/106772813?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_antiscanv2&spm=1001.2101.3001.4242.1&utm_relevant_index=3">尽量使用std::make_unique和std::make_shared而不直接使用new（总结)</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;<span class="keyword">int</span>&gt; a = std::make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">666</span>); <span class="comment">// 智能指针具有唯一性</span></span><br><span class="line">std::unique_ptr&lt;<span class="keyword">int</span>&gt; b = std::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">666</span>);</span><br><span class="line"><span class="comment">// create std::initializer_list</span></span><br><span class="line"><span class="keyword">auto</span> initList = &#123; <span class="number">10</span>, <span class="number">20</span> &#125;;</span><br><span class="line"><span class="comment">// create std::vector using std::initializer_list ctor</span></span><br><span class="line"><span class="keyword">auto</span> spv = std::make_shared&lt;std::vector&lt;<span class="keyword">int</span>&gt;&gt;(initList);</span><br></pre></td></tr></table></figure><h1 id="make-queue"><a href="#make-queue" class="headerlink" title="make_queue"></a>make_queue</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, z;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// following constructor is no longer needed since C++20</span></span><br><span class="line">    <span class="built_in">Vec3</span>(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>, <span class="keyword">int</span> z = <span class="number">0</span>) <span class="keyword">noexcept</span> : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">z</span>(z) &#123; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="keyword">const</span> Vec3&amp; v) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; <span class="string">&quot;&#123; x=&quot;</span> &lt;&lt; v.x &lt;&lt; <span class="string">&quot;, y=&quot;</span> &lt;&lt; v.y &lt;&lt; <span class="string">&quot;, z=&quot;</span> &lt;&lt; v.z &lt;&lt; <span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Use the default constructor.</span></span><br><span class="line">    std::unique_ptr&lt;Vec3&gt; v1 = std::make_unique&lt;Vec3&gt;();</span><br><span class="line">    <span class="comment">// Use the constructor that matches these arguments</span></span><br><span class="line">    std::unique_ptr&lt;Vec3&gt; v2 = std::make_unique&lt;Vec3&gt;(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// Create a unique_ptr to an array of 5 elements</span></span><br><span class="line">    std::unique_ptr&lt;Vec3[]&gt; v3 = std::make_unique&lt;Vec3[]&gt;(<span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;make_unique&lt;Vec3&gt;():      &quot;</span> &lt;&lt; *v1 &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;make_unique&lt;Vec3&gt;(0,1,2): &quot;</span> &lt;&lt; *v2 &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;make_unique&lt;Vec3[]&gt;(5):   &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; std::<span class="built_in">setw</span>(i ? <span class="number">30</span> : <span class="number">0</span>) &lt;&lt; v3[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://wentian.blog.csdn.net/article/details/10956</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>c++那些事</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/C++%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/C++%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-05T13:45:39.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/Light-City/CPlusPlusThings">Light-City/CPlusPlusThings: C++那些事 (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Light-City/CPlusPlusThings&quot;&gt;Ligh</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Singleton</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/Singleton_C++/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/Singleton_C++/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-16T00:59:07.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://github.com/pezy/DesignPatterns/blob/master/Singleton/main.cpp">DesignPatterns (github.com)</a> </p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>主要用于全局变量(单例模式)</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Singleton</span>(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">  Singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">  <span class="built_in">Singleton</span>():<span class="built_in">m_pInstance</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">Singleton</span>()&#123;</span><br><span class="line">    <span class="keyword">delete</span> m_pInstance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">T* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_pInstance == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      m_pInstance = <span class="keyword">new</span> <span class="built_in">T</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_pInstance;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  T* m_pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">static</span> A* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">       <span class="keyword">static</span> Singleton&lt;A&gt; singleton;</span><br><span class="line">       <span class="keyword">return</span> singleton.<span class="built_in">getInstance</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">       std::cout&lt;&lt;<span class="string">&quot;A&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  A* a = A::<span class="built_in">getInstance</span>();</span><br><span class="line">  a-&gt;<span class="built_in">test</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://github.com/pezy/DesignPatterns/blob/master</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
</feed>
