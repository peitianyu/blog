<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某飞行员的随笔</title>
  
  
  <link href="https://peitianyu.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://peitianyu.github.io/blog/"/>
  <updated>2021-12-22T07:41:08.688Z</updated>
  <id>https://peitianyu.github.io/blog/</id>
  
  <author>
    <name>某飞行员</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一种嵌入式设计模式</title>
    <link href="https://peitianyu.github.io/blog/2021/12/22/%E4%B8%80%E7%A7%8D%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://peitianyu.github.io/blog/2021/12/22/%E4%B8%80%E7%A7%8D%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-22T04:30:12.000Z</published>
    <updated>2021-12-22T07:41:08.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>使用<code>set</code>与<code>get</code>方式实现的金字塔型架构,最下层仅提供函数调用,例如tcp,udp,uart,gpio等,第二层是模块层,这一层通过pthread线程实现自循环式模块实现,通过get与set对模块数据进行获取与设置.最后是逻辑层,仅对下层数据进行逻辑操作,不做模块实现.</p><h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── lib</span><br><span class="line">│   └── libcontrolcan.so</span><br><span class="line">└── src</span><br><span class="line">    ├── GROUND_PANEL</span><br><span class="line">    │   ├── Driver</span><br><span class="line">    │   │   ├── Driver.h</span><br><span class="line">    │   │   ├── Driver_utils.cpp</span><br><span class="line">    │   │   ├── Driver_utils.h</span><br><span class="line">    │   │   ├── Gpio.cpp</span><br><span class="line">    │   │   ├── Gpio.h</span><br><span class="line">    │   │   ├── controlcan.cpp</span><br><span class="line">    │   │   ├── controlcan.h</span><br><span class="line">    │   │   ├── socketCAN.cpp</span><br><span class="line">    │   │   ├── socketCAN.h</span><br><span class="line">    │   │   ├── tcp_cilent.cpp</span><br><span class="line">    │   │   ├── tcp_cilent.h</span><br><span class="line">    │   │   ├── usart.cpp</span><br><span class="line">    │   │   └── usart.h</span><br><span class="line">    │   ├── Math</span><br><span class="line">    │   │   ├── Math.h</span><br><span class="line">    │   │   ├── pid_control.cpp</span><br><span class="line">    │   │   └── pid_control.h</span><br><span class="line">    │   ├── ThirdParts</span><br><span class="line">    │   │   ├── CFG_ini.cpp</span><br><span class="line">    │   │   ├── CFG_ini.h</span><br><span class="line">    │   │   ├── ModBUS</span><br><span class="line">    │   │   │   ├── ascii</span><br><span class="line">    │   │   │   │   ├── mbascii.c</span><br><span class="line">    │   │   │   │   └── mbascii.h</span><br><span class="line">    │   │   │   ├── functions</span><br><span class="line">    │   │   │   │   ├── mbfunccoils.c</span><br><span class="line">    │   │   │   │   ├── mbfuncdiag.c</span><br><span class="line">    │   │   │   │   ├── mbfuncdisc.c</span><br><span class="line">    │   │   │   │   ├── mbfuncholding.c</span><br><span class="line">    │   │   │   │   ├── mbfuncinput.c</span><br><span class="line">    │   │   │   │   ├── mbfuncother.c</span><br><span class="line">    │   │   │   │   └── mbutils.c</span><br><span class="line">    │   │   │   ├── include</span><br><span class="line">    │   │   │   │   ├── mb.h</span><br><span class="line">    │   │   │   │   ├── mbconfig.h</span><br><span class="line">    │   │   │   │   ├── mbframe.h</span><br><span class="line">    │   │   │   │   ├── mbfunc.h</span><br><span class="line">    │   │   │   │   ├── mbport.h</span><br><span class="line">    │   │   │   │   ├── mbproto.h</span><br><span class="line">    │   │   │   │   └── mbutils.h</span><br><span class="line">    │   │   │   ├── mb.c</span><br><span class="line">    │   │   │   ├── port</span><br><span class="line">    │   │   │   │   ├── port.h</span><br><span class="line">    │   │   │   │   ├── portevent.c</span><br><span class="line">    │   │   │   │   ├── portother.c</span><br><span class="line">    │   │   │   │   ├── portserial.c</span><br><span class="line">    │   │   │   │   └── porttimer.c</span><br><span class="line">    │   │   │   ├── rtu</span><br><span class="line">    │   │   │   │   ├── mbcrc.c</span><br><span class="line">    │   │   │   │   ├── mbcrc.h</span><br><span class="line">    │   │   │   │   ├── mbrtu.c</span><br><span class="line">    │   │   │   │   └── mbrtu.h</span><br><span class="line">    │   │   │   └── tcp</span><br><span class="line">    │   │   │       ├── mbtcp.c</span><br><span class="line">    │   │   │       └── mbtcp.h</span><br><span class="line">    │   │   ├── cJSON.c</span><br><span class="line">    │   │   ├── cJSON.h</span><br><span class="line">    │   │   ├── tinyxml2.cpp</span><br><span class="line">    │   │   └── tinyxml2.h</span><br><span class="line">    │   └── param</span><br><span class="line">    │       ├── AGVParameter.h</span><br><span class="line">    │       ├── CFG.c</span><br><span class="line">    │       ├── CFG.h</span><br><span class="line">    │       ├── env_configure.c</span><br><span class="line">    │       └── env_configure.h</span><br><span class="line">    ├── Module</span><br><span class="line">    │   ├── ActionCTRL</span><br><span class="line">    │   │   ├── ActionCTRL.cpp</span><br><span class="line">    │   │   ├── ActionCTRL.h</span><br><span class="line">    │   │   └── ActionCTRLData.h</span><br><span class="line">    │   ├── Battery</span><br><span class="line">    │   │   ├── Battery.cpp</span><br><span class="line">    │   │   ├── Battery.h</span><br><span class="line">    │   │   ├── BatteryData.h</span><br><span class="line">    │   │   ├── EIKTO_battery.cpp</span><br><span class="line">    │   │   ├── EIKTO_battery.h</span><br><span class="line">    │   │   ├── FR_battery.cpp</span><br><span class="line">    │   │   └── FR_battery.h</span><br><span class="line">    │   ├── CommWithPC</span><br><span class="line">    │   │   ├── CommWithPC.cpp</span><br><span class="line">    │   │   ├── CommWithPC.h</span><br><span class="line">    │   │   └── CommWithPCData.h</span><br><span class="line">    │   ├── Encoder</span><br><span class="line">    │   │   ├── Encoder.cpp</span><br><span class="line">    │   │   ├── Encoder.h</span><br><span class="line">    │   │   ├── EncoderData.h</span><br><span class="line">    │   │   ├── TOFI_encoder.cpp</span><br><span class="line">    │   │   └── TOFI_encoder.h</span><br><span class="line">    │   ├── HandShank</span><br><span class="line">    │   │   ├── HandShank.cpp</span><br><span class="line">    │   │   ├── HandShank.h</span><br><span class="line">    │   │   ├── HandShankData.h</span><br><span class="line">    │   │   ├── Logitech_controller.cpp</span><br><span class="line">    │   │   └── Logitech_controller.h</span><br><span class="line">    │   ├── IoBoard</span><br><span class="line">    │   │   ├── IoBoard.cpp</span><br><span class="line">    │   │   ├── IoBoard.h</span><br><span class="line">    │   │   └── IoBoardData.h</span><br><span class="line">    │   ├── Location</span><br><span class="line">    │   │   ├── Location.cpp</span><br><span class="line">    │   │   ├── Location.h</span><br><span class="line">    │   │   └── LocationData.h</span><br><span class="line">    │   ├── Map</span><br><span class="line">    │   │   ├── LaserMAP.cpp</span><br><span class="line">    │   │   ├── LaserMAP.h</span><br><span class="line">    │   │   ├── Map.cpp</span><br><span class="line">    │   │   ├── Map.h</span><br><span class="line">    │   │   └── MapData.h</span><br><span class="line">    │   ├── Module.cpp</span><br><span class="line">    │   ├── Module.h</span><br><span class="line">    │   ├── MoveCTRL</span><br><span class="line">    │   │   ├── Kunhou</span><br><span class="line">    │   │   │   ├── Kunhou_cJSON.cpp</span><br><span class="line">    │   │   │   └── Kunhou_cJSON.h</span><br><span class="line">    │   │   ├── MoveCTRL.cpp</span><br><span class="line">    │   │   ├── MoveCTRL.h</span><br><span class="line">    │   │   ├── MoveCtrlData.h</span><br><span class="line">    │   │   └── Tongyi_Diff_Drive</span><br><span class="line">    │   │       ├── Tongyi_Driver.cpp</span><br><span class="line">    │   │       ├── Tongyi_Driver.h</span><br><span class="line">    │   │       ├── diff_control.cpp</span><br><span class="line">    │   │       └── diff_control.h</span><br><span class="line">    │   ├── log.cpp</span><br><span class="line">    │   └── log.h</span><br><span class="line">    ├── Task</span><br><span class="line">    │   ├── ModbusHMI.cpp</span><br><span class="line">    │   ├── ModbusHMI.h</span><br><span class="line">    │   ├── Music_Led.cpp</span><br><span class="line">    │   ├── Music_Led.h</span><br><span class="line">    │   ├── Safety.cpp</span><br><span class="line">    │   ├── Safety.h</span><br><span class="line">    │   ├── Task.cpp</span><br><span class="line">    │   ├── Task.h</span><br><span class="line">    │   ├── autoCtrl.cpp</span><br><span class="line">    │   ├── autoCtrl.h</span><br><span class="line">    │   ├── manualCtrl.cpp</span><br><span class="line">    │   └── manualCtrl.h</span><br><span class="line">    └── main.cpp</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>需要注意的一点是每个特定模块又三个对外文件,<code>module.cpp</code> <code>module.h</code> <code>moduleData.h</code></p><p>模块使用,只有使用时初始化线程,如果不使用则注释掉</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;HandShank.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_HandShank</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Logitech_thread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;set&lt;/code&gt;与&lt;code&gt;get&lt;/code&gt;方式实现的金字塔型架构,最下层仅提供函数调用,例如tcp,udp,ua</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>pthread_mutex使用</title>
    <link href="https://peitianyu.github.io/blog/2021/12/17/pthread_mutex%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2021/12/17/pthread_mutex%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-17T04:30:12.000Z</published>
    <updated>2021-12-17T01:29:20.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/networkhunter/article/details/100218945?ops_request_misc=%7B%22request_id%22:%22163970172716780265411237%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163970172716780265411237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-100218945.pc_search_em_sort&utm_term=pthread&spm=1018.2226.3001.4187">pthread详解_networkhunter的博客-CSDN博客_phread</a></p><p><a href="https://blog.csdn.net/z_muyangren/article/details/105398871?ops_request_misc=%7B%22request_id%22:%22163970180516780271917732%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163970180516780271917732&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-105398871.pc_search_em_sort&utm_term=pthread_mutex_lock&spm=1018.2226.3001.4187">关于pthread_mutex_lock使用_无专精则不能成，无涉猎则不能通-CSDN博客_pthread_mutex_timedlock</a></p><p><a href="https://blog.csdn.net/a6333230/article/details/113654694?ops_request_misc=%7B%22request_id%22:%22163970180516780264024377%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163970180516780264024377&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-113654694.pc_search_em_sort&utm_term=pthread_mutex_lock&spm=1018.2226.3001.4187">linux读写锁 pthread_rwlock/互斥锁pthread_mutex_三眼二郎-CSDN博客_pthread_mutex_t pthread_rwlock_t</a></p><h1 id="常用pthread-mutex-lock"><a href="#常用pthread-mutex-lock" class="headerlink" title="常用pthread_mutex_lock"></a>常用pthread_mutex_lock</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_trylock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_timedlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> abs_timeout)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mtx;</span><br><span class="line"><span class="comment">// 初始化互斥量</span></span><br><span class="line"><span class="comment">// 第二个参数为 NULL，互斥锁的属性会设置为默认属性</span></span><br><span class="line"><span class="built_in">pthread_mutex_init</span>(&amp;mtx, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 阻塞调用</span></span><br><span class="line"><span class="built_in">pthread_mutex_lock</span>(&amp;mtx);</span><br><span class="line"><span class="comment">// 非堵塞调用</span></span><br><span class="line"><span class="keyword">int</span> err = <span class="built_in">pthread_mutex_trylock</span>(&amp;mtx);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> != err) &#123;</span><br><span class="line">    <span class="keyword">if</span>(EBUSY == err) &#123;</span><br><span class="line">        <span class="comment">//The mutex could not be acquired because it was already locked.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 超时调用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">abs_timeout</span>;</span></span><br><span class="line">abs_timeout.tv_sec = <span class="built_in">time</span>(<span class="literal">NULL</span>) + <span class="number">1</span>;</span><br><span class="line">abs_timeout.tv_nsec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> err = <span class="built_in">pthread_mutex_timedlock</span>(&amp;mtx, &amp;abs_timeout);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> != err) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ETIMEDOUT == err) &#123;</span><br><span class="line">        <span class="comment">//The mutex could not be locked before the specified timeout expired.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放互斥锁</span></span><br><span class="line"><span class="built_in">pthread_mutex_unlock</span>(&amp;mtx);</span><br><span class="line"><span class="comment">// 销毁线程锁</span></span><br><span class="line"><span class="built_in">pthread_mutex_destroy</span>(&amp;mtx)</span><br></pre></td></tr></table></figure><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;<span class="comment">/*初始化互斥锁*/</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span>  cond = PTHREAD_COND_INITIALIZER;<span class="comment">//init cond</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//global</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t_a;</span><br><span class="line">    <span class="keyword">pthread_t</span> t_b;<span class="comment">//two thread</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;t_a,<span class="literal">NULL</span>,thread2,(<span class="keyword">void</span>*)<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;t_b,<span class="literal">NULL</span>,thread1,(<span class="keyword">void</span>*)<span class="literal">NULL</span>);<span class="comment">//Create thread</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;t_a:0x%x, t_b:0x%x:&quot;</span>, t_a, t_b);</span><br><span class="line">    <span class="built_in">pthread_join</span>(t_b,<span class="literal">NULL</span>);<span class="comment">//wait a_b thread end</span></span><br><span class="line">    <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">pthread_cond_destroy</span>(&amp;cond);</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">(<span class="keyword">void</span> *junk)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;mutex); <span class="comment">//互斥锁</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call thread1 \n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">pthread_cond_signal</span>(&amp;cond); <span class="comment">//send sianal to t_b</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;thread1:******i=%d\n&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;thread1: %d\n&quot;</span>,i);</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread1: sleep i=%d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread1: sleep i=%d******end\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">(<span class="keyword">void</span>*junk)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call thread2 \n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span> != <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">pthread_cond_wait</span>(&amp;cond,&amp;mutex); <span class="comment">//wait</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread2: %d\n&quot;</span>,i);</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread2: sleep i=%d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread2: sleep i=%d******end\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/networkhunter/article/details</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>pthread简单使用</title>
    <link href="https://peitianyu.github.io/blog/2021/12/17/pthread%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2021/12/17/pthread%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-17T04:30:12.000Z</published>
    <updated>2021-12-17T01:12:27.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/chenwh_cn/article/details/117225053?ops_request_misc=%7B%22request_id%22:%22163970172716780265411237%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163970172716780265411237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-117225053.pc_search_em_sort&utm_term=pthread&spm=1018.2226.3001.4187">pthread 线程基本函数_chenwh_cn的博客-CSDN博客_pthread函数</a></p><p><a href="https://blog.csdn.net/u013457167/article/details/83691039?ops_request_misc=%7B%22request_id%22:%22163970172716780265411237%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163970172716780265411237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-7-83691039.pc_search_em_sort&utm_term=pthread&spm=1018.2226.3001.4187">Pthread线程基础学习_我的梦-CSDN博客_pthread教程</a></p><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread_fun</span><span class="params">(<span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = *((<span class="keyword">int</span>*)arg);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int the new thread: num = %d\n&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">int</span> test = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, thread_fun, (<span class="keyword">void</span> *)&amp;test);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thead_fun</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ret = <span class="number">5</span>; <span class="comment">// thread_join.cpp:7:13: warning: address of local variable ‘ret’ returned [-Wreturn-local-addr]</span></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>((<span class="keyword">void</span>*)&amp;ret);</span><br><span class="line">    <span class="comment">//return (void*)&amp;ret;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等待线程结束并回收线程资源，此函数会阻塞，类似进程的 wait() 函数。如果线程已经结束，那么该函数会立即返回</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">void</span> *ret = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, thead_fun, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_join</span>(tid, &amp;ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, *((<span class="keyword">int</span>*)ret));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分离线程"><a href="#分离线程" class="headerlink" title="分离线程"></a>分离线程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thead_fun</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread is runing\n&quot;</span>);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, thead_fun, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_detach</span>(tid);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pthread_join</span>(tid, <span class="literal">NULL</span>)) <span class="comment">// 立即返回，调用失败</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;join not working\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after join\n&quot;</span>);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;master is leaving\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="退出线程"><a href="#退出线程" class="headerlink" title="退出线程"></a>退出线程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thead_fun</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ret = <span class="number">5</span>; <span class="comment">// thread_join.cpp:7:13: warning: address of local variable ‘ret’ returned [-Wreturn-local-addr]</span></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>((<span class="keyword">void</span>*)&amp;ret);</span><br><span class="line">    <span class="comment">//return (void*)&amp;ret;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">void</span> *ret = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, thead_fun, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_join</span>(tid, &amp;ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, *((<span class="keyword">int</span>*)ret));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="取消线程"><a href="#取消线程" class="headerlink" title="取消线程"></a>取消线程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread_fun</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread start \n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">        <span class="comment">// 调用pthread_testcancel，让内核去检测是否需要取消当前线程。</span></span><br><span class="line"><span class="built_in">pthread_testcancel</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *ret=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> iret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">pthread_t</span> tid;</span><br><span class="line"><span class="built_in">pthread_create</span>(&amp;tid,<span class="literal">NULL</span>,thread_fun,<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">pthread_cancel</span>(tid);<span class="comment">//取消线程</span></span><br><span class="line"><span class="built_in">pthread_join</span>(tid, &amp;ret);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread 3 exit code %d\n&quot;</span>, (<span class="keyword">int</span>)ret);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/chenwh_cn/article/details/117</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>简单pid控制</title>
    <link href="https://peitianyu.github.io/blog/2021/12/16/pid%E6%8E%A7%E5%88%B6/"/>
    <id>https://peitianyu.github.io/blog/2021/12/16/pid%E6%8E%A7%E5%88%B6/</id>
    <published>2021-12-16T04:30:12.000Z</published>
    <updated>2021-12-16T05:03:07.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p>[P、I、D参数分析及倒立摆心得_一念之间、-CSDN博客_pid 倒立摆](<a href="https://blog.csdn.net/tqs_1220/article/details/75249145?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=p%E8%A1%A8%E7%A4%BA">https://blog.csdn.net/tqs_1220/article/details/75249145?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=p表示</a> i表示 d表示&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-8-75249145.pc_search_em_sort&amp;spm=1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/qq_18454025/article/details/103443771?ops_request_misc=%7B%22request_id%22:%22163961834316780274185698%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163961834316780274185698&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-3-103443771.pc_search_em_sort&utm_term=pid&spm=1018.2226.3001.4187">PID控制算法的C语言实现_我的博客-CSDN博客_pid算法c程序</a></p><h1 id="PID作用"><a href="#PID作用" class="headerlink" title="PID作用"></a>PID作用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P-------作用是提高系统响应速度,过大会出现震荡---------------------------快速性</span><br><span class="line"></span><br><span class="line">I-------作用是消除静差----------------------------------------------准确性</span><br><span class="line"></span><br><span class="line">D-------作用是抑制震荡----------------------------------------------稳定性/预测性</span><br></pre></td></tr></table></figure><h1 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pid控制测试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// P:响应 I:稳差 D:预判</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PID_CTRL</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> kp;</span><br><span class="line">    <span class="keyword">float</span> ki;</span><br><span class="line">    <span class="keyword">float</span> kd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">pos_pid_control</span><span class="params">(<span class="keyword">float</span> target, <span class="keyword">float</span> current, struct PID_CTRL pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err_last;</span><br><span class="line">    <span class="keyword">float</span> out,err_sum=<span class="number">0</span>,err_d,err;</span><br><span class="line">    err = target - current;</span><br><span class="line">    err_sum += err;</span><br><span class="line">    err_d = err - err_last;</span><br><span class="line">    out = pid.kp * err + pid.ki * err_sum + pid.kd * err_d;</span><br><span class="line">    err_last = err;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">gain_pid_control</span><span class="params">(<span class="keyword">float</span> target, <span class="keyword">float</span> current, struct PID_CTRL pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err_last;</span><br><span class="line">    <span class="keyword">float</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> err = target - current;</span><br><span class="line">    out += pid.kp * (err-err_last) + pid.ki * err;</span><br><span class="line">    err_last = err;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_pos_pid_control</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PID_CTRL</span> <span class="title">pid</span>&#123;</span><span class="number">0.5</span>,<span class="number">0.1</span>,<span class="number">0.1</span>&#125;;</span><br><span class="line">    pid.kp = <span class="number">0.5</span>;</span><br><span class="line">    pid.ki = <span class="number">0.2</span>;</span><br><span class="line">    pid.kd = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> target = <span class="number">10.0</span>;</span><br><span class="line">    <span class="keyword">float</span> current = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        current += <span class="number">0.1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;target: %f, current: %f, out: %f\n&quot;</span>, target, current, <span class="built_in">pos_pid_control</span>(target, current, pid));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_gain_pid_control</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PID_CTRL</span> <span class="title">pid</span>&#123;</span><span class="number">0.5</span>,<span class="number">0.1</span>,<span class="number">0.1</span>&#125;;</span><br><span class="line">    pid.kp = <span class="number">0.5</span>;</span><br><span class="line">    pid.ki = <span class="number">0.2</span>;</span><br><span class="line">    pid.kd = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> target = <span class="number">10.0</span>;</span><br><span class="line">    <span class="keyword">float</span> current = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        current += <span class="number">0.1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;target: %f, current: %f, out: %f\n&quot;</span>, target, current, <span class="built_in">gain_pid_control</span>(target, current, pid));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test_pos_pid_control</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">test_gain_pid_control</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;[P、I、D参数分析及倒立摆心得_一念之间、-CSDN博客_pid 倒立摆](&lt;a href=&quot;https://blog</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>修改和校正树莓派时间</title>
    <link href="https://peitianyu.github.io/blog/2021/12/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%9B%B4%E6%96%B0%E4%B8%8E%E6%A0%A1%E6%AD%A3%E6%97%B6%E9%97%B4/"/>
    <id>https://peitianyu.github.io/blog/2021/12/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%9B%B4%E6%96%B0%E4%B8%8E%E6%A0%A1%E6%AD%A3%E6%97%B6%E9%97%B4/</id>
    <published>2021-12-16T04:30:12.000Z</published>
    <updated>2021-12-16T03:32:36.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/github_38111866/article/details/76057237">修改和校正树莓派时间_胡嘿嘿-CSDN博客_树莓派修改时间</a></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改时区</span></span><br><span class="line">sudo dpkg-reconfigure tzdata</span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择亚洲时区 Asia</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择上海时间 Shanghai</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查是否设置成功</span></span><br><span class="line">date</span><br><span class="line"><span class="meta">#</span><span class="bash"> 校正时间</span></span><br><span class="line">sudo ntpd -s -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制设置时间</span></span><br><span class="line">sudo date  --s=&quot;2017-07-25 10:43:00&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/github_38111866/article/detai</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>c语言的三种传参方式</title>
    <link href="https://peitianyu.github.io/blog/2021/12/15/c%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%89%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/"/>
    <id>https://peitianyu.github.io/blog/2021/12/15/c%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%89%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/</id>
    <published>2021-12-15T04:30:12.000Z</published>
    <updated>2021-12-15T08:45:10.864Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*a;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">man</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=a*a;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cubeByReference</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *a=*a * *a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">uint8_t</span>* *buffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> buf[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    *buffer = buf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">5</span>,b=<span class="number">5</span>,number=<span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fun1(a)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    man(b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    cubeByReference(&amp;number);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;number&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> *buf;</span><br><span class="line">    fun2(&amp;buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, buf[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; 10; ++i)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;%d\n&quot;, buf[i]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>镜像源</title>
    <link href="https://peitianyu.github.io/blog/2021/12/12/%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <id>https://peitianyu.github.io/blog/2021/12/12/%E9%95%9C%E5%83%8F%E6%BA%90/</id>
    <published>2021-12-12T04:30:12.000Z</published>
    <updated>2021-12-12T13:05:28.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p>华为镜像源: <a href="https://mirrors.huaweicloud.com/home">https://mirrors.huaweicloud.com/home</a></p><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></p><p>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></p><p>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;华为镜像源: &lt;a href=&quot;https://mirrors.huaweicloud.com/home&quot;&gt;https:</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>0ohm电阻作用</title>
    <link href="https://peitianyu.github.io/blog/2021/12/11/0ohm%E7%94%B5%E9%98%BB%E7%9B%AE%E7%9A%84/"/>
    <id>https://peitianyu.github.io/blog/2021/12/11/0ohm%E7%94%B5%E9%98%BB%E7%9B%AE%E7%9A%84/</id>
    <published>2021-12-11T04:30:12.000Z</published>
    <updated>2021-12-11T03:55:31.183Z</updated>
    
    <content type="html"><![CDATA[<p>零欧姆电阻的主要作用有如下：</p><p>1,在电路中没有任何功能，只是在PCB上为了调试方便或兼容设计等原因。<br>2,可以做跳线用，如果某段线路不用，直接不贴该电阻即可（不影响外观）。<br>3,在匹配电路参数不确定的时候，以0欧姆代替，实际调试的时候，确定参数，再以具体数值的元件代替。<br>4,想测某部分电路的耗电流的时候，可以去掉0ohm电阻，接上电流表，这样方便测耗电流。<br>5,在布线时,如果实在布不过去了,也可以加一个0欧的电阻。<br>6,在高频信号下，充当电感或电容。（与外部电路特性有关）电感用，主要是解决EMC问题。如地与地，电源和IC Pin间。<br>7,单点接地（指保护接地、工作接地、直流接地在设备上相互分开,各自成为独立系统。）<br>8,熔丝作用；<br>9，单点接地，只要是地，最终都要接到一起，然后入大地。如果不接在一起就是”浮地”，存在压差，容易积累电荷，造成静电。地是参考0电位，所有电压都是参考地得出的，地的标准要一致，故各种地应短接在一起。人们认为大地能够吸收所有电荷，始终维持稳定，是最终的地参考点。虽然有些板子没有接大地，但发电厂是接大地的，板子上的电源最终还是会返回发电厂入地。如果把模拟地和数字地大面积直接相连，会导致互相干扰。不短接又不妥，理由如上有四种方法解决此问题：1、用磁珠连接；2、用电容连接；3、用电感连接；4、用0欧姆电阻连接。磁珠的等效电路相当于带阻限波器，只对某个频点的噪声有显著抑制作用，使用时需要预先估计噪点频率，以便选用适当型号。对于频率不确定或无法预知的情况，磁珠不合。磁珠的等效电路相当于带阻限波器，只对某个频点的噪声有显著抑制作用，使用时需要预先估计噪点频率，以便选用适当型号。对于频率不确定或无法预知的情况，磁珠不合。电容隔直通交，造成浮地。电感体积大，杂散参数多，不稳定。0欧电阻相当于很窄的电流通路，能够有效地限制环路电流，使噪声得到抑制。电阻在所有频带上都有衰减作用(0欧电阻也有阻抗)，这点比磁珠强。<br>10，跨接时用于电流回路，当分割电地平面后，造成信号最短回流路径断裂，此时，信号回路不得不绕道，形成很大的环路面积，电场和磁场的影响就变强了，容易干扰/被干扰。在分割区上跨接0欧电阻，可以提供较短的回流路径，减小干扰。<br>11，配置电路，一般，产品上不要出现跳线和拨码开关。有时用户会乱动设置，易引起误会，为了减少维护费用，应用0欧电阻代替跳线等焊在板子。空置跳线在高频时相当于天线，用贴片电阻效果好。<br>12，其他用途，布线时跨线；调试/测试用；临时取代其他贴片器件；作为温度补偿器件；更多时候是出于EMC对策的需要。另外，0欧姆电阻比过孔的寄生电感小，而且过孔还会影响地平面（因为要挖孔）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;零欧姆电阻的主要作用有如下：&lt;/p&gt;
&lt;p&gt;1,在电路中没有任何功能，只是在PCB上为了调试方便或兼容设计等原因。&lt;br&gt;2,可以做跳线用，如果某段线路不用，直接不贴该电阻即可（不影响外观）。&lt;br&gt;3,在匹配电路参数不确定的时候，以0欧姆代替，实际调试的时候，确定参数，再</summary>
      
    
    
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/categories/sch/"/>
    
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/tags/sch/"/>
    
  </entry>
  
  <entry>
    <title>pip</title>
    <link href="https://peitianyu.github.io/blog/2021/12/11/pip/"/>
    <id>https://peitianyu.github.io/blog/2021/12/11/pip/</id>
    <published>2021-12-11T04:30:12.000Z</published>
    <updated>2021-12-11T03:58:55.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_43146445/article/details/85078685?ops_request_misc=%7B%22request_id%22:%22162487776816780265445855%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162487776816780265445855&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-85078685.pc_search_result_control_group&utm_term=pip%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">(8条消息) pip安装镜像_转载_qq_2711624322-CSDN博客_pip安装镜像</a></p><p><a href="https://blog.csdn.net/SimpleLikeMe/article/details/104480017?ops_request_misc=%7B%22request_id%22:%22162761016016780265417243%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162761016016780265417243&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-104480017.first_rank_v2_pc_rank_v29&utm_term=pip%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E9%95%9C%E5%83%8F%E6%BA%90&spm=1018.2226.3001.4187">设pip默认镜像源_SimpleLikeMe的博客-CSDN博客</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">临时使用</span></span><br><span class="line">pip install -i https://mirrors.ustc.edu.cn/pypi/web/simple package</span><br><span class="line"><span class="meta">#</span><span class="bash">配置成固定镜像</span></span><br><span class="line">pip config set global.index-url https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_43146445/article/detai</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>k60_can_bootloader</title>
    <link href="https://peitianyu.github.io/blog/2021/12/10/k60_can_bootloader/"/>
    <id>https://peitianyu.github.io/blog/2021/12/10/k60_can_bootloader/</id>
    <published>2021-12-10T04:30:12.000Z</published>
    <updated>2021-12-10T12:58:35.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考demo"><a href="#参考demo" class="headerlink" title="参考demo:"></a>参考demo:</h3><p><a href="https://github.com/peitianyu/k60_bootloader">peitianyu/k60_bootloader (github.com)</a></p><h3 id="main-c文件配置"><a href="#main-c文件配置" class="headerlink" title="main.c文件配置"></a>main.c文件配置</h3><h4 id="进入mian-c文件加入头文件并引用bootloader-entry-函数"><a href="#进入mian-c文件加入头文件并引用bootloader-entry-函数" class="headerlink" title="进入mian.c文件加入头文件并引用bootloader_entry()函数"></a>进入mian.c文件加入头文件并引用bootloader_entry()函数</h4><p><img src="https://s2.loli.net/2021/12/10/ywEp53mGsnHMbYc.png" alt="1.PNG"></p><h4 id="使用ID-0x10发送06-00-00-00-00-00-00-00，表示已经进入app"><a href="#使用ID-0x10发送06-00-00-00-00-00-00-00，表示已经进入app" class="headerlink" title="使用ID=0x10发送06 00 00 00 00 00 00 00，表示已经进入app"></a>使用ID=0x10发送06 00 00 00 00 00 00 00，表示已经进入app</h4><p><img src="https://s2.loli.net/2021/12/10/SvE7taw8y9ozPbh.png" alt="2.png"></p><h4 id="判断bootflag是否制一，若是，进入boot模式"><a href="#判断bootflag是否制一，若是，进入boot模式" class="headerlink" title="判断bootflag是否制一，若是，进入boot模式"></a>判断bootflag是否制一，若是，进入boot模式</h4><p><img src="https://s2.loli.net/2021/12/10/7pd6cl9bwtKPzFT.png" alt="3.png"></p><h3 id="canbus-c文件配置"><a href="#canbus-c文件配置" class="headerlink" title="canbus.c文件配置"></a>canbus.c文件配置</h3><h4 id="在canbus-c文件中引用头文件，并判断是否0x25发来数据，若有且data-data-0-1-则bootflag-1"><a href="#在canbus-c文件中引用头文件，并判断是否0x25发来数据，若有且data-data-0-1-则bootflag-1" class="headerlink" title="在canbus.c文件中引用头文件，并判断是否0x25发来数据，若有且data._data[0]==1,则bootflag=1"></a>在canbus.c文件中引用头文件，并判断是否0x25发来数据，若有且data._data[0]==1,则bootflag=1</h4><p><img src="https://s2.loli.net/2021/12/10/1nd3eMiXpUtBlAr.png" alt="4.png"></p><h3 id="keil配置"><a href="#keil配置" class="headerlink" title="keil配置"></a>keil配置</h3><h4 id="将hex烧录地址改为从0x6000开始"><a href="#将hex烧录地址改为从0x6000开始" class="headerlink" title="将hex烧录地址改为从0x6000开始"></a>将hex烧录地址改为从0x6000开始</h4><p><img src="https://s2.loli.net/2021/12/10/UhGvZDBPQqSeM9Y.png" alt="5.png"></p><h3 id="树莓派使用"><a href="#树莓派使用" class="headerlink" title="树莓派使用"></a>树莓派使用</h3><h4 id="bootloader-can0-xx-hex"><a href="#bootloader-can0-xx-hex" class="headerlink" title="./bootloader can0 xx.hex"></a>./bootloader can0 xx.hex</h4><p><img src="https://s2.loli.net/2021/12/10/wkOHJ3reb8AXVyT.png" alt="7.PNG"></p><h3 id="挂载win10"><a href="#挂载win10" class="headerlink" title="挂载win10"></a>挂载win10</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs //192.168.2.101/2021.04/CH-K-Lib/Project/1/bootloader/MDK/mk60d10/flash /k60 -o username=&quot;pty&quot;,password=&quot;pty123&quot;,sec=ntlmssp,rw</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;参考demo&quot;&gt;&lt;a href=&quot;#参考demo&quot; class=&quot;headerlink&quot; title=&quot;参考demo:&quot;&gt;&lt;/a&gt;参考demo:&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peitianyu/k60_bootloader</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>linux定时器</title>
    <link href="https://peitianyu.github.io/blog/2021/12/10/linux%E5%86%85%E6%A0%B8%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>https://peitianyu.github.io/blog/2021/12/10/linux%E5%86%85%E6%A0%B8%E5%AE%9A%E6%97%B6%E5%99%A8/</id>
    <published>2021-12-10T04:30:12.000Z</published>
    <updated>2021-12-11T01:59:23.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_34358365/article/details/94217782?ops_request_misc=%7B%22request_id%22:%22163914549216780255279840%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163914549216780255279840&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-94217782.nonecase&utm_term=linux%E5%AE%9A%E6%97%B6%E5%99%A8&spm=1018.2226.3001.4187">LInux下几种定时器的比较和使用_weixin_34358365的博客-CSDN博客</a></p><h1 id="1、sleep，usleep和nanosleep"><a href="#1、sleep，usleep和nanosleep" class="headerlink" title="1、sleep，usleep和nanosleep"></a>1、<a href="http://www.jb51.net/LINUXjishu/109403.html">sleep，usleep和nanosleep</a></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COUNT 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MILLION 1000000L</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">slptm</span>;</span></span><br><span class="line">    <span class="keyword">long</span>   tdif;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tend</span>, <span class="title">tstart</span>;</span> </span><br><span class="line">    slptm.tv_sec = <span class="number">0</span>;</span><br><span class="line">    slptm.tv_nsec = <span class="number">1000</span>;      <span class="comment">//1000 ns = 1 us</span></span><br><span class="line">    <span class="comment">//struct sched_param param;    </span></span><br><span class="line">    <span class="comment">//param.sched_priority = 0;</span></span><br><span class="line">    <span class="comment">//sched_setscheduler(getpid(), SCHED_FIFO, &amp;param);</span></span><br><span class="line">    <span class="keyword">if</span> (gettimeofday(&amp;tstart, <span class="literal">NULL</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get start time\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; COUNT; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nanosleep(&amp;slptm, <span class="literal">NULL</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;Failed to nanosleep&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gettimeofday(&amp;tend, <span class="literal">NULL</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get end time\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tdif = MILLION * (tend.tv_sec - tstart.tv_sec) + (tend.tv_usec - tstart.tv_usec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;nanosleep() time is %ld us\n&quot;</span>, tdif/COUNT);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、使用信号量SIGALRM-alarm-只能秒级"><a href="#2、使用信号量SIGALRM-alarm-只能秒级" class="headerlink" title="2、使用信号量SIGALRM + alarm(),只能秒级"></a>2、使用信号量SIGALRM + alarm(),只能秒级</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(SIGALRM == sig)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;timer\n&quot;</span>);</span><br><span class="line">                alarm(<span class="number">1</span>);       <span class="comment">//重新继续定时1s</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        signal(SIGALRM, timer); <span class="comment">//注册安装信号</span></span><br><span class="line">        alarm(<span class="number">1</span>);       <span class="comment">//触发定时器</span></span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、使用RTC-系统硬件提供的RTC，精度可调"><a href="#3、使用RTC-系统硬件提供的RTC，精度可调" class="headerlink" title="3、使用RTC(系统硬件提供的RTC，精度可调)"></a>3、使用RTC(系统硬件提供的RTC，精度可调)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/rtc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> data = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> retval = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fd = open (<span class="string">&quot;/dev/rtc&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(errno);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*Set the freq as 4Hz*/</span></span><br><span class="line">        <span class="keyword">if</span>(ioctl(fd, RTC_IRQP_SET, <span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;ioctl(RTC_IRQP_SET)&quot;</span>);</span><br><span class="line">                close(fd);</span><br><span class="line">                <span class="built_in">exit</span>(errno);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* Enable periodic interrupts */</span></span><br><span class="line">        <span class="keyword">if</span>(ioctl(fd, RTC_PIE_ON, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;ioctl(RTC_PIE_ON)&quot;</span>);</span><br><span class="line">                close(fd);</span><br><span class="line">                <span class="built_in">exit</span>(errno);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(read(fd, &amp;data, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">                        close(fd);</span><br><span class="line">                        <span class="built_in">exit</span>(errno);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;timer\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* Disable periodic interrupts */</span></span><br><span class="line">        ioctl(fd, RTC_PIE_OFF, <span class="number">0</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、使用select"><a href="#4、使用select" class="headerlink" title="4、使用select()"></a>4、使用select()</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Callback_1</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// Callback Function 1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, this is Callback_1: x = %d \n&quot;</span>, x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTimer</span><span class="params">(<span class="keyword">int</span> seconds, <span class="keyword">int</span> mseconds,T arg,<span class="keyword">int</span> (*callback)(T))</span> <span class="comment">// Set Timer</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">temp</span>;</span></span><br><span class="line">        temp.tv_sec = seconds;</span><br><span class="line">        temp.tv_usec = mseconds;</span><br><span class="line">        select(<span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;temp);</span><br><span class="line">        callback(arg);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> last_time;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">get_diff_time</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">        gettimeofday(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">float</span> time = tv.tv_sec%<span class="number">10</span> + tv.tv_usec / <span class="number">1000000.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (time &lt; last_time)</span><br><span class="line">                time += <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">float</span> time_diff = time - last_time;</span><br><span class="line">        last_time = time;</span><br><span class="line">        <span class="keyword">return</span> time_diff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">float</span> time_diff = get_diff_time();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;time_diff = %f \n&quot;</span>, time_diff);</span><br><span class="line">        setTimer(<span class="number">1</span>, <span class="number">0</span>, a, Callback_1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_34358365/article/detai</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ros2安装</title>
    <link href="https://peitianyu.github.io/blog/2021/12/10/ros2%E5%AE%89%E8%A3%85/"/>
    <id>https://peitianyu.github.io/blog/2021/12/10/ros2%E5%AE%89%E8%A3%85/</id>
    <published>2021-12-10T04:30:12.000Z</published>
    <updated>2021-12-13T14:04:24.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/qq_44717317/article/details/104547474">Ubuntu18.04 安装ROS Melodic &amp;&amp; Ros2 Dashing踩坑笔记_LukeyAlvin的博客-CSDN博客_ubuntu18安装ros2</a></p><p><a href="http://fishros.com/#/fish_home">鱼香ROS (fishros.com)</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于ros2很多并不完善,所以采用ros1+ros2的方式实现,这里采用常规+fishros的方式实现安装.最后采用在初始化使用shell脚本选择使用ros版本</p><h1 id="Ros1安装"><a href="#Ros1安装" class="headerlink" title="Ros1安装"></a>Ros1安装</h1><p><a href="https://peitianyu.github.io/blog/2021/10/19/ros%E5%AE%89%E8%A3%85/">ros安装 | 某飞行员的随笔 (peitianyu.github.io)</a></p><h1 id="Ros2安装"><a href="#Ros2安装" class="headerlink" title="Ros2安装"></a>Ros2安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置UTF-8编码</span></span><br><span class="line">sudo locale-gen en_US en_US.UTF-8</span><br><span class="line">sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新软件源</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt install curl gnupg2 lsb-release</span><br><span class="line">curl http://repo.ros2.org/repos.key | sudo apt-key add -</span><br><span class="line">sudo sh -c &#x27;echo &quot;deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros2-latest.list&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; sudo bash fishros</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过如下命令添加到.bashrc(注意这里如果需要使用两个版本,这一步不需要设置)</span></span><br><span class="line">echo &quot;source /opt/ros/dashing/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> RWM功能</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ros-dashing-rmw-opensplice-cpp # for OpenSplice</span><br><span class="line">sudo apt install ros-dashing-rmw-connext-cpp # for RTI Connext (requires license agreement)</span><br><span class="line"><span class="meta">#</span><span class="bash"> ros1与ros2通信</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ros-dashing-ros1-bridge</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装编译工具</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt install -y \</span><br><span class="line">build-essential \</span><br><span class="line">cmake \</span><br><span class="line">git \</span><br><span class="line">python3-colcon-common-extensions \</span><br><span class="line">python3-pip \</span><br><span class="line">python-rosdep \</span><br><span class="line">python3-vcstool \</span><br><span class="line">wget</span><br><span class="line"><span class="meta">#</span><span class="bash"> install some pip packages needed <span class="keyword">for</span> testing</span></span><br><span class="line">sudo -H python3 -m pip install -U \</span><br><span class="line">argcomplete \</span><br><span class="line">flake8 \</span><br><span class="line">flake8-blind-except \</span><br><span class="line">flake8-builtins \</span><br><span class="line">flake8-class-newline \</span><br><span class="line">flake8-comprehensions \</span><br><span class="line">flake8-deprecated \</span><br><span class="line">flake8-docstrings \</span><br><span class="line">flake8-import-order \</span><br><span class="line">flake8-quotes \</span><br><span class="line">pytest-repeat \</span><br><span class="line">pytest-rerunfailures</span><br><span class="line"><span class="meta">#</span><span class="bash"> [Ubuntu 16.04] install extra packages not available or recent enough on Xenial</span></span><br><span class="line">python3 -m pip install -U \</span><br><span class="line">pytest \</span><br><span class="line">pytest-cov \</span><br><span class="line">pytest-runner \</span><br><span class="line">setuptools</span><br><span class="line"><span class="meta">#</span><span class="bash"> install Fast-RTPS dependencies</span></span><br><span class="line">sudo apt install --no-install-recommends -y \</span><br><span class="line">libasio-dev \</span><br><span class="line">libtinyxml2-dev</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">mkdir  ~/ros2_ws</span><br><span class="line">cd /ros2_ws</span><br><span class="line">git clone  https://ghproxy.com/https://github.com/zhangrelay/ros2_tutorials</span><br><span class="line">cd ros2_tutorials</span><br><span class="line">colcon build</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量(也可以将之放入.bashrc中)</span></span><br><span class="line">source /install/setup.sh </span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一个终端</span></span><br><span class="line">cd /ros_ws/ros2_tutorials/install</span><br><span class="line">ros2 run demo_nodes_cpp listener</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个终端</span></span><br><span class="line">ros2 run demo_nodes_cpp talker</span><br></pre></td></tr></table></figure><h1 id="使用多个ros版本"><a href="#使用多个ros版本" class="headerlink" title="使用多个ros版本"></a>使用多个ros版本</h1><h2 id="保存一个脚本文件-使用前运行"><a href="#保存一个脚本文件-使用前运行" class="headerlink" title="保存一个脚本文件,使用前运行"></a>保存一个脚本文件,使用前运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">source</span> /opt/ros/melodic/setup.bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">source</span> /opt/ros/dashing/setup.bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ROS 1.0 melodic or ROS 2.0 Dashing</span></span><br><span class="line">echo Hello alvin! ROS 1.0 or ROS 2.0? 1=Melodic 2=Dashing </span><br><span class="line">read ROS</span><br><span class="line">if (($ROS==1));then</span><br><span class="line">source /opt/ros/melodic/setup.bash</span><br><span class="line">echo &quot;Melodic&quot;</span><br><span class="line">elif (($ROS==2));then</span><br><span class="line">source /opt/ros/dashing/setup.bash</span><br><span class="line">echo &quot;Dashing&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;Non-ROS&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="注意-由于使用不通ros-因此安装时注意将之前保存在-bashrc中的"><a href="#注意-由于使用不通ros-因此安装时注意将之前保存在-bashrc中的" class="headerlink" title="!注意:由于使用不通ros,因此安装时注意将之前保存在.bashrc中的"></a>!注意:由于使用不通ros,因此安装时注意将之前保存在.bashrc中的</h2><h2 id="source-opt-ros-melodic-setup-bash"><a href="#source-opt-ros-melodic-setup-bash" class="headerlink" title="# source /opt/ros/melodic/setup.bash"></a><code># source /opt/ros/melodic/setup.bash</code></h2><p><code># source /opt/ros/dashing/setup.bash</code>注释掉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44717317/article/details/1</summary>
      
    
    
    
    <category term="ros" scheme="https://peitianyu.github.io/blog/categories/ros/"/>
    
    
    <category term="ros" scheme="https://peitianyu.github.io/blog/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>树莓派CAN</title>
    <link href="https://peitianyu.github.io/blog/2021/12/10/%E6%A0%91%E8%8E%93%E6%B4%BECAN/"/>
    <id>https://peitianyu.github.io/blog/2021/12/10/%E6%A0%91%E8%8E%93%E6%B4%BECAN/</id>
    <published>2021-12-10T04:30:12.000Z</published>
    <updated>2021-12-11T02:01:35.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/j353838430/article/details/119486631?ops_request_misc=%7B%22request_id%22:%22163877530616780271559996%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163877530616780271559996&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-119486631.pc_search_mgc_flag&utm_term=%E6%A0%91%E8%8E%93%E6%B4%BEmcp2515&spm=1018.2226.3001.4187">树莓派CAN通讯教程 - MCP2515_j353838430的博客-CSDN博客_树莓派can通信</a></p><p><a href="https://blog.csdn.net/csshuke/article/details/113186248?ops_request_misc=&request_id=&biz_id=102&utm_term=mcp2515%E5%8E%9F%E7%90%86%E5%9B%BE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-113186248.pc_search_mgc_flag&spm=1018.2226.3001.4187">(86条消息) SPI协议、MCP2515裸机驱动详解—-主流SPI总线接口原理_csshuke的专栏-CSDN博客_mcp2515 spi极性</a></p><p>mcp2515模块资料:<a href="http://pan.baidu.com/s/1hsi3I4k">http://pan.baidu.com/s/1hsi3I4k</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>使用mcp2515实现的spi转can通信</p><h1 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h1><p><img src="https://s2.loli.net/2021/12/10/UYg8ehqIX3EOAkb.png" alt="image-20211210213025816.png"></p><p>需要注意的是这里的片选,也就是说可以通过片选CS信号实现一个spi转多个can通信,INT引脚用于中断缓存数据,当接收到数据时会将数据先放入缓冲区</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装cantools</span></span><br><span class="line">sudo apt install can-utils</span><br><span class="line">pip3 install cantools</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检测挂载</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否进入<span class="built_in">read</span>状态</span></span><br><span class="line">sudo ip -s -d link show can0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使能树莓派SPI并加载MCP2515内核驱动</span></span><br><span class="line">dtparam=spi=on</span><br><span class="line">dtoverlay=mcp2515-can0,oscillator=16000000,interrupt=25</span><br><span class="line">dtoverlay=spi1-1cs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">sudo reboot -h now</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭can0</span></span><br><span class="line">sudo ip link set can0 down</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置波特率</span></span><br><span class="line">sudo ip link set can0 type can bitrate 1000000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启can0</span></span><br><span class="line">sudo ip link set can0 up</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">sudo ip -s -d link show can0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 接收报文</span></span><br><span class="line">candump any,0:0,#FFFFFFFF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 发送报文</span></span><br><span class="line">cansend can0 123#1122334455667788</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置回环 波特率 250K ,用于测试can通路,在没有其它硬件连接测试的情况下，可以设定成回环，自发自收</span></span><br><span class="line">sudo ip link set can0 type can bitrate 500000 loopback on</span><br></pre></td></tr></table></figure><h1 id="C语言使用"><a href="#C语言使用" class="headerlink" title="C语言使用"></a>C语言使用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/can.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/can/raw.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> command <span class="meta-string">&quot;ip link set can0 type can bitrate 1000000&quot;</span><span class="comment">//将CAN0波特率设置为500K</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> up <span class="meta-string">&quot;ifconfig can0 up&quot;</span><span class="comment">//打开CAN0</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> down <span class="meta-string">&quot;ifconfig can0 down&quot;</span><span class="comment">//关闭CAN0</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">can_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//关闭CAN设备，设置波特率后，重新打开CAN设备</span></span><br><span class="line">    <span class="built_in">system</span>(down);</span><br><span class="line">    <span class="built_in">system</span>(command);</span><br><span class="line">    <span class="built_in">system</span>(up);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">can_send</span><span class="params">(can_frame frame)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, nbytes;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_can</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">ifr</span>;</span></span><br><span class="line">    <span class="comment">//创建套接字</span></span><br><span class="line">    s = <span class="built_in">socket</span>(PF_CAN, SOCK_RAW, CAN_RAW);</span><br><span class="line">    <span class="built_in">strcpy</span>(ifr.ifr_name, <span class="string">&quot;can0&quot;</span> );</span><br><span class="line">    <span class="comment">//指定 can0 设备</span></span><br><span class="line">    <span class="built_in">ioctl</span>(s, SIOCGIFINDEX, &amp;ifr); </span><br><span class="line">    addr.can_family = AF_CAN;</span><br><span class="line">    addr.can_ifindex = ifr.ifr_ifindex;</span><br><span class="line">    <span class="comment">//将套接字与 can0 绑定</span></span><br><span class="line">    <span class="built_in">bind</span>(s, (struct sockaddr *)&amp;addr, <span class="built_in"><span class="keyword">sizeof</span></span>(addr));</span><br><span class="line">    <span class="comment">//发送 frame[0]</span></span><br><span class="line">    nbytes = <span class="built_in">write</span>(s, &amp;frame, <span class="built_in"><span class="keyword">sizeof</span></span>(frame));</span><br><span class="line">    <span class="keyword">if</span>(nbytes != <span class="built_in"><span class="keyword">sizeof</span></span>(frame))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Send Error frame[0]\n!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">can_receive</span><span class="params">(struct can_frame * r_frame,<span class="keyword">unsigned</span> <span class="keyword">int</span> filter_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, nbytes = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_can</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">ifr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_frame</span> <span class="title">frame</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_filter</span> <span class="title">rfilter</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initial fram</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;frame,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(can_frame));</span><br><span class="line">    <span class="comment">//创建套接字</span></span><br><span class="line">    s = <span class="built_in">socket</span>(PF_CAN, SOCK_RAW, CAN_RAW);</span><br><span class="line">    <span class="built_in">strcpy</span>(ifr.ifr_name, <span class="string">&quot;can0&quot;</span> );</span><br><span class="line">    <span class="comment">//指定 can0 设备</span></span><br><span class="line">    <span class="built_in">ioctl</span>(s, SIOCGIFINDEX, &amp;ifr); </span><br><span class="line">    addr.can_family = AF_CAN;</span><br><span class="line">    addr.can_ifindex = ifr.ifr_ifindex;</span><br><span class="line">    <span class="comment">//将套接字与 can0 绑定</span></span><br><span class="line">    <span class="built_in">bind</span>(s, (struct sockaddr *)&amp;addr, <span class="built_in"><span class="keyword">sizeof</span></span>(addr));</span><br><span class="line">    <span class="comment">//设置过滤规则，取消当前注释为禁用过滤规则，即不接收所有报文，</span></span><br><span class="line">    <span class="comment">// 不设置此项（即如当前代码被注释）为接收所有ID的报文。</span></span><br><span class="line">    <span class="keyword">if</span> (filter_id != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rfilter.can_id   = <span class="number">0x123</span>;</span><br><span class="line">        <span class="comment">// CAN_EFF_MASK | CAN_SFF_MASK</span></span><br><span class="line">        rfilter.can_mask = CAN_SFF_MASK;</span><br><span class="line">        <span class="built_in">setsockopt</span>(s, SOL_CAN_RAW, CAN_RAW_FILTER, &amp;rfilter, <span class="built_in"><span class="keyword">sizeof</span></span>(rfilter));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (nbytes == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//接收总线上的报文保存在frame中</span></span><br><span class="line">        nbytes = <span class="built_in">read</span>(s, &amp;frame, <span class="built_in"><span class="keyword">sizeof</span></span>(frame));</span><br><span class="line">    &#125;</span><br><span class="line">    *r_frame = frame;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MSG_DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the nbytes:%d\n&quot;</span>, nbytes);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length:%d&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(frame));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ID=0x%X DLC=%d\n&quot;</span>, frame.can_id, frame.can_dlc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data0=0x%02x\n&quot;</span>,frame.data[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data1=0x%02x\n&quot;</span>,frame.data[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data2=0x%02x\n&quot;</span>,frame.data[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data3=0x%02x\n&quot;</span>,frame.data[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data4=0x%02x\n&quot;</span>,frame.data[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data5=0x%02x\n&quot;</span>,frame.data[<span class="number">5</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data6=0x%02x\n&quot;</span>,frame.data[<span class="number">6</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data7=0x%02x\n&quot;</span>,frame.data[<span class="number">7</span>]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">led_ctl_on</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_frame</span> <span class="title">frame</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;frame, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(can_frame));</span><br><span class="line">    frame.can_id = <span class="number">0x101</span>;</span><br><span class="line">    frame.can_dlc = <span class="number">8</span>;</span><br><span class="line">    frame.data[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">can_send</span>(frame);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">led_ctl_off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_frame</span> <span class="title">frame</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;frame, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(can_frame));</span><br><span class="line">    frame.can_id = <span class="number">0x101</span>;</span><br><span class="line">    frame.can_dlc = <span class="number">8</span>;</span><br><span class="line">    frame.data[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">can_send</span>(frame);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">can_get_vol</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> vol_vle = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_frame</span> <span class="title">frame</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;frame, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(can_frame));</span><br><span class="line">    <span class="comment">// wait until can frame 100 received</span></span><br><span class="line">    <span class="built_in">can_receive</span>(&amp;frame,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;###############################\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length:%d&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(frame));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ID=0x%X DLC=%d\n&quot;</span>, frame.can_id, frame.can_dlc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data0=0x%02x\n&quot;</span>,frame.data[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data1=0x%02x\n&quot;</span>,frame.data[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data2=0x%02x\n&quot;</span>,frame.data[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data3=0x%02x\n&quot;</span>,frame.data[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data4=0x%02x\n&quot;</span>,frame.data[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data5=0x%02x\n&quot;</span>,frame.data[<span class="number">5</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data6=0x%02x\n&quot;</span>,frame.data[<span class="number">6</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data7=0x%02x\n&quot;</span>,frame.data[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">    vol_vle = (<span class="keyword">float</span>)frame.data[<span class="number">0</span>]/<span class="number">50</span>;</span><br><span class="line">    <span class="keyword">return</span> vol_vle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> control_str[<span class="number">15</span>]; </span><br><span class="line">    <span class="keyword">float</span> vol_val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can_control service_type\n&quot;</span></span><br><span class="line">            <span class="string">&quot;    example: ./can_control led_off/led_on/get_vol\n&quot;</span></span><br><span class="line">            );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(control_str,argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// debug</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Argc : %d\n&quot;</span>,argc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Argv : %s\n , %s\n&quot;</span>,argv[<span class="number">0</span>], argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// can_init();</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(control_str,<span class="string">&quot;led_off&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">led_ctl_off</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(control_str,<span class="string">&quot;led_on&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">led_ctl_on</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(control_str,<span class="string">&quot;get_vol&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vol_val = <span class="built_in">can_get_vol</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Voltage is : %5.2f V\n&quot;</span>, vol_val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Do nothing */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/j353838430/article/details/11</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/tags/sch/"/>
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>linux_shell</title>
    <link href="https://peitianyu.github.io/blog/2021/12/09/linux_shell/"/>
    <id>https://peitianyu.github.io/blog/2021/12/09/linux_shell/</id>
    <published>2021-12-09T04:30:12.000Z</published>
    <updated>2021-12-09T09:56:42.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="删除除某文件以外其他文件"><a href="#删除除某文件以外其他文件" class="headerlink" title="删除除某文件以外其他文件"></a>删除除某文件以外其他文件</h1><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h2><p><a href="https://www.cnblogs.com/blueskycc/p/5139902.html">linux删除指定文件夹中某个文件除外的其他文件 - He元素 - 博客园 (cnblogs.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shopt -s extglob</span><br><span class="line">rm -fr !(file1)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是多个要排除的，可以这样：</span></span><br><span class="line">rm -rf !(file1|file2)</span><br></pre></td></tr></table></figure><h1 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h1><h2 id="参考网址-1"><a href="#参考网址-1" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="https://www.cnblogs.com/windchen/p/6236299.html">ubuntu 挂载windows共享目录的方法 - Supper阿欣 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/fzzfh/p/10330014.html">linux挂载文件报错mount error(13): Permission denied - 风中追风h - 博客园 (cnblogs.com)</a></p><p><a href="https://www.zhihu.com/question/41745930/answer/510335896">win10 家庭版 cmd运行gpedit.msc找不到文件？ - 知乎 (zhihu.com)</a></p><p><a href="https://langbin.blog.csdn.net/article/details/78929045">(2条消息) ubuntu挂载Windows共享文件夹_深藏功与名-CSDN博客_ubuntu挂载windows共享目录</a></p><h2 id="pi挂载Ubuntu"><a href="#pi挂载Ubuntu" class="headerlink" title="pi挂载Ubuntu"></a>pi挂载Ubuntu</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount 192.168.2.111:/home/pty/nfs/ /mnt  </span><br></pre></td></tr></table></figure><h2 id="pi挂载win"><a href="#pi挂载win" class="headerlink" title="pi挂载win"></a>pi挂载win</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs //192.168.10.1/d  /mnt -o username=&quot;pty&quot;,password=&quot;pty123&quot;,sec=ntlmssp,rw,dir_mode=0777,file_mode=0777</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;删除除某文件以外其他文件&quot;&gt;&lt;a href=&quot;#删除除某文件以外其他文件&quot; class=&quot;headerlink&quot; title=&quot;删除除某文件以外其他文件&quot;&gt;&lt;/a&gt;删除除某文件以外其他文件&lt;/h1&gt;&lt;h2 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; cla</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>树莓派GPIO</title>
    <link href="https://peitianyu.github.io/blog/2021/12/06/%E6%A0%91%E8%8E%93%E6%B4%BEGPIO/"/>
    <id>https://peitianyu.github.io/blog/2021/12/06/%E6%A0%91%E8%8E%93%E6%B4%BEGPIO/</id>
    <published>2021-12-06T04:30:12.000Z</published>
    <updated>2021-12-10T08:59:49.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/hu7850/article/details/51785560">树莓派GPIO控制–C语言篇_hu7850的博客-CSDN博客_树莓派c语言控制gpio</a></p><h1 id="IO表示"><a href="#IO表示" class="headerlink" title="IO表示"></a>IO表示</h1><p><img src="https://s2.loli.net/2021/12/10/wLfgq9kbRzoZD2a.png" alt="image-20211210165211671.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~/Cmake/build$ gpio readall</span><br><span class="line"> +-----+-----+---------+------+---+---Pi 4B--+---+------+---------+-----+-----+</span><br><span class="line"> | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |</span><br><span class="line"> +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+</span><br><span class="line"> |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |</span><br><span class="line"> |   2 |   8 |   SDA.1 | ALT0 | 1 |  3 || 4  |   |      | 5v      |     |     |</span><br><span class="line"> |   3 |   9 |   SCL.1 | ALT0 | 1 |  5 || 6  |   |      | 0v      |     |     |</span><br><span class="line"> |   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 1 | ALT5 | TxD     | 15  | 14  |</span><br><span class="line"> |     |     |      0v |      |   |  9 || 10 | 1 | ALT5 | RxD     | 16  | 15  |</span><br><span class="line"> |  17 |   0 | GPIO. 0 |   IN | 1 | 11 || 12 | 0 | IN   | GPIO. 1 | 1   | 18  |</span><br><span class="line"> |  27 |   2 | GPIO. 2 |   IN | 0 | 13 || 14 |   |      | 0v      |     |     |</span><br><span class="line"> |  22 |   3 | GPIO. 3 |   IN | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |</span><br><span class="line"> |     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  |</span><br><span class="line"> |  10 |  12 |    MOSI | ALT0 | 0 | 19 || 20 |   |      | 0v      |     |     |</span><br><span class="line"> |   9 |  13 |    MISO | ALT0 | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  |</span><br><span class="line"> |  11 |  14 |    SCLK | ALT0 | 0 | 23 || 24 | 1 | OUT  | CE0     | 10  | 8   |</span><br><span class="line"> |     |     |      0v |      |   | 25 || 26 | 1 | OUT  | CE1     | 11  | 7   |</span><br><span class="line"> |   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |</span><br><span class="line"> |   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |</span><br><span class="line"> |   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  |</span><br><span class="line"> |  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     |</span><br><span class="line"> |  19 |  24 | GPIO.24 |   IN | 1 | 35 || 36 | 0 | IN   | GPIO.27 | 27  | 16  |</span><br><span class="line"> |  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  |</span><br><span class="line"> |     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |</span><br><span class="line"> +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+</span><br><span class="line"> | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |</span><br><span class="line"> +-----+-----+---------+------+---+---Pi 4B--+---+------+---------+-----+-----+</span><br></pre></td></tr></table></figure><h1 id="wiringpi"><a href="#wiringpi" class="headerlink" title="wiringpi"></a><code>wiringpi</code></h1><h2 id="安装wiring"><a href="#安装wiring" class="headerlink" title="安装wiring"></a>安装wiring</h2><h3 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git://git.drogon.net/wiringPi</span><br><span class="line">cd wiringPi</span><br><span class="line">./build</span><br><span class="line">build脚本会帮助你编译和安装wiringPi</span><br></pre></td></tr></table></figure><p>或者通过此[下载](<a href="https://github.com/WiringPi/WiringPi">WiringPi/WiringPi: Gordon’s Arduino wiring-like WiringPi Library for the Raspberry Pi (Unofficial Mirror for WiringPi bindings) (github.com)</a>)安装</p><h3 id="raspbian上安装"><a href="#raspbian上安装" class="headerlink" title="raspbian上安装"></a>raspbian上安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install wiringpi</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><strong>github</strong>上有<strong>examples</strong>可以测试</p><h2 id="cmake使用wiringpi库"><a href="#cmake使用wiringpi库" class="headerlink" title="cmake使用wiringpi库"></a><strong>cmake使用wiringpi</strong>库</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(display)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(WIRINGPI_LIBRARIES NAMES wiringPi)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(display display.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(display <span class="variable">$&#123;WIRINGPI_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><h1 id="PYTHON"><a href="#PYTHON" class="headerlink" title="PYTHON"></a>PYTHON</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://code.google.com/p/raspberry-gpio-python/</span><br></pre></td></tr></table></figure><h1 id="BCM2835-C-Library"><a href="#BCM2835-C-Library" class="headerlink" title="BCM2835 C Library"></a>BCM2835 C Library</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.airspayce.com/mikem/bcm2835/bcm2835-1.35.tar.gz</span><br><span class="line">tar xvzf bcm2835-1.35.tar.gz</span><br><span class="line">cd bcm2835-1.35</span><br><span class="line">./configure make</span><br><span class="line">sudo make check</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p><strong>可以使用examples测试</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/hu7850/article/details/517855</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>cmake实现多文件编译</title>
    <link href="https://peitianyu.github.io/blog/2021/12/03/cmake%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91/"/>
    <id>https://peitianyu.github.io/blog/2021/12/03/cmake%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91/</id>
    <published>2021-12-03T04:30:12.000Z</published>
    <updated>2021-12-06T06:18:58.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cmake文件结构"><a href="#Cmake文件结构" class="headerlink" title="Cmake文件结构"></a>Cmake文件结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@LAPTOP-49LFJ4NT:/root/cmake# tree</span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">└── src</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── Queue</span><br><span class="line">    │   ├── CMakeLists.txt</span><br><span class="line">    │   └── src</span><br><span class="line">    │       ├── QUE.cpp</span><br><span class="line">    │       ├── QUE.h</span><br><span class="line">    │       └── main.cpp</span><br><span class="line">    └── canalyst_test</span><br><span class="line">        ├── CMakeLists.txt</span><br><span class="line">        ├── lib</span><br><span class="line">        │   └── libcontrolcan.so</span><br><span class="line">        └── src</span><br><span class="line">            ├── Tongyi_Driver.cpp</span><br><span class="line">            ├── Tongyi_Driver.h</span><br><span class="line">            ├── controlcan.cpp</span><br><span class="line">            ├── controlcan.h</span><br><span class="line">            └── main.cpp</span><br></pre></td></tr></table></figure><h3 id="shell-sh"><a href="#shell-sh" class="headerlink" title="shell.sh"></a>shell.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 由于主要在src文件夹下工作，因此在此建一个shell脚本方便编译</span></span><br><span class="line">cd .. &amp;&amp; cd build &amp;&amp; cmake ../src &amp;&amp; make -j </span><br></pre></td></tr></table></figure><h3 id="CmakeLists-txt"><a href="#CmakeLists-txt" class="headerlink" title="CmakeLists.txt"></a>CmakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定cmake版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="comment"># 工程名</span></span><br><span class="line"><span class="keyword">project</span>(Cmake)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加下层cmake</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(canalyst_test)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(Queue)</span><br></pre></td></tr></table></figure><h3 id="执行文件"><a href="#执行文件" class="headerlink" title="执行文件"></a>执行文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd build &amp;&amp; bin/./queue</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Cmake文件结构&quot;&gt;&lt;a href=&quot;#Cmake文件结构&quot; class=&quot;headerlink&quot; title=&quot;Cmake文件结构&quot;&gt;&lt;/a&gt;Cmake文件结构&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>wsl使用串口</title>
    <link href="https://peitianyu.github.io/blog/2021/12/01/wsl%E4%BD%BF%E7%94%A8%E4%B8%B2%E5%8F%A3/"/>
    <id>https://peitianyu.github.io/blog/2021/12/01/wsl%E4%BD%BF%E7%94%A8%E4%B8%B2%E5%8F%A3/</id>
    <published>2021-12-01T04:30:12.000Z</published>
    <updated>2021-12-01T13:06:01.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/chentuo2000/article/details/116447956?ops_request_misc=&request_id=&biz_id=102&utm_term=wsl%E4%BD%BF%E7%94%A8%E4%B8%B2%E5%8F%A3&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-116447956.pc_search_mgc_flag&spm=1018.2226.3001.4187">Win10的Linux子系统Ubuntu使用串口_晨之清风-CSDN博客</a></p><p><a href="https://www.scivision.dev/usb-tty-windows-subsystem-for-linux/">WSL | 上的 USB 到串行适配器科学计算|科学视讯 (scivision.dev)</a></p><p>由于本人技术原因usb转串行没成功</p><p><a href="https://blog.csdn.net/yanhuan136675/article/details/82766466?ops_request_misc=%7B%22request_id%22:%22163832358116780269848091%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163832358116780269848091&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-3-82766466.pc_search_mgc_flag&utm_term=linux%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1&spm=1018.2226.3001.4187">Linux下串口收发通信_颜言研的博客-CSDN博客_linux串口通信</a></p><h1 id="minicom使用"><a href="#minicom使用" class="headerlink" title="minicom使用"></a>minicom使用</h1><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装minicom</span></span><br><span class="line">sudo apt-get install minicom</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置串口,主要该串口号ttyS1,以及将硬件流改为no</span></span><br><span class="line">sudo minicom -s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存</span></span><br><span class="line">Save setup as df1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">sudo minicom</span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+A E:回显</span><br><span class="line">Ctrl+A W：当显示的内容超过一行之后自动换行</span><br><span class="line">Ctrl+A C：清屏</span><br><span class="line">Ctrl+A O：打开配置选项</span><br><span class="line">Ctrl+A X：退出minicom</span><br></pre></td></tr></table></figure><h1 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// usart.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span>  _USART_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _USART_H</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//串口相关的头文件    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>      <span class="comment">/*标准输入输出定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>     <span class="comment">/*标准函数库定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>     <span class="comment">/*Unix 标准函数定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span>       </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span>      <span class="comment">/*文件控制定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;termios.h&gt;</span>    <span class="comment">/*PPSIX 终端控制定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span>      <span class="comment">/*错误号定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span>    </span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line"><span class="comment">//宏定义    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE  -1    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE   0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Open</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span>*port)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART0_Close</span><span class="params">(<span class="keyword">int</span> fd)</span> </span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Set</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> speed,<span class="keyword">int</span> flow_ctrl,<span class="keyword">int</span> databits,<span class="keyword">int</span> stopbits,<span class="keyword">int</span> parity)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Init</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> speed,<span class="keyword">int</span> flow_ctrl,<span class="keyword">int</span> databits,<span class="keyword">int</span> stopbits,<span class="keyword">int</span> parity)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Recv</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *rcv_buf,<span class="keyword">int</span> data_len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Send</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *send_buf,<span class="keyword">int</span> data_len)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// usart.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="comment">/*******************************************************************  </span></span><br><span class="line"><span class="comment">*名称：             UART0_Open  </span></span><br><span class="line"><span class="comment">*功能：             打开串口并返回串口设备文件描述  </span></span><br><span class="line"><span class="comment">*入口参数：         fd      文件描述符</span></span><br><span class="line"><span class="comment">                    port    串口号(ttyS0,ttyS1,ttyS2)  </span></span><br><span class="line"><span class="comment">*出口参数：正确返回为1，错误返回为0  </span></span><br><span class="line"><span class="comment">*******************************************************************/</span>    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Open</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span>*port)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    fd = open( port, O_RDWR|O_NOCTTY|O_NDELAY);    </span><br><span class="line">    <span class="keyword">if</span> (fd&lt;<span class="number">0</span>)    </span><br><span class="line">    &#123;    </span><br><span class="line">        perror(<span class="string">&quot;Can&#x27;t Open Serial Port&quot;</span>);    </span><br><span class="line">        <span class="keyword">return</span>(FALSE);    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//恢复串口为阻塞状态                                   </span></span><br><span class="line">    <span class="keyword">if</span>(fcntl(fd, F_SETFL, <span class="number">0</span>) &lt; <span class="number">0</span>)    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fcntl failed!\n&quot;</span>);    </span><br><span class="line">        <span class="keyword">return</span>(FALSE);    </span><br><span class="line">    &#125;         </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fcntl=%d\n&quot;</span>,fcntl(fd, F_SETFL,<span class="number">0</span>));    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//测试是否为终端设备        </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> == isatty(STDIN_FILENO))    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;standard input is not a terminal device\n&quot;</span>);    </span><br><span class="line">        <span class="keyword">return</span>(FALSE);    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;isatty success!\n&quot;</span>);    </span><br><span class="line">    &#125;                  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fd-&gt;open=%d\n&quot;</span>,fd);    </span><br><span class="line">    <span class="keyword">return</span> fd;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">/*******************************************************************  </span></span><br><span class="line"><span class="comment">*名称：             UART0_Close  </span></span><br><span class="line"><span class="comment">*功能：             关闭串口并返回串口设备文件描述  </span></span><br><span class="line"><span class="comment">*入口参数：         fd          文件描述符   </span></span><br><span class="line"><span class="comment">                    port        串口号(ttyS0,ttyS1,ttyS2)  </span></span><br><span class="line"><span class="comment">*出口参数：void  </span></span><br><span class="line"><span class="comment">*******************************************************************/</span>    </span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART0_Close</span><span class="params">(<span class="keyword">int</span> fd)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    close(fd);    </span><br><span class="line">&#125;    </span><br><span class="line">     </span><br><span class="line"><span class="comment">/*******************************************************************  </span></span><br><span class="line"><span class="comment">*名称：             UART0_Set  </span></span><br><span class="line"><span class="comment">*功能：             设置串口数据位，停止位和效验位  </span></span><br><span class="line"><span class="comment">*入口参数：         fd          串口文件描述符</span></span><br><span class="line"><span class="comment">*                   speed       串口速度  </span></span><br><span class="line"><span class="comment">*                   flow_ctrl   数据流控制  </span></span><br><span class="line"><span class="comment">*                   databits    数据位   取值为 7 或者8  </span></span><br><span class="line"><span class="comment">*                   stopbits    停止位   取值为 1 或者2  </span></span><br><span class="line"><span class="comment">*                   parity      效验类型 取值为N,E,O,,S  </span></span><br><span class="line"><span class="comment">*出口参数：正确返回为1，错误返回为0  </span></span><br><span class="line"><span class="comment">*******************************************************************/</span>    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Set</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> speed,<span class="keyword">int</span> flow_ctrl,<span class="keyword">int</span> databits,<span class="keyword">int</span> stopbits,<span class="keyword">int</span> parity)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">       </span><br><span class="line">    <span class="keyword">int</span>   i;    </span><br><span class="line">    <span class="keyword">int</span>   status;    </span><br><span class="line">    <span class="keyword">int</span>   speed_arr[] = &#123; B115200, B19200, B9600, B4800, B2400, B1200, B300&#125;;    </span><br><span class="line">    <span class="keyword">int</span>   name_arr[] = &#123;<span class="number">115200</span>,  <span class="number">19200</span>,  <span class="number">9600</span>,  <span class="number">4800</span>,  <span class="number">2400</span>,  <span class="number">1200</span>,  <span class="number">300</span>&#125;;    </span><br><span class="line">             </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">options</span>;</span>    </span><br><span class="line">       </span><br><span class="line">    <span class="comment">/*  tcgetattr(fd,&amp;options)得到与fd指向对象的相关参数，并将它们保存于options,该函数还可以测试配置是否正确，</span></span><br><span class="line"><span class="comment">        该串口是否可用等。若调用成功，函数返回值为0，若调用失败，函数返回值为1.  */</span>    </span><br><span class="line">    <span class="keyword">if</span>( tcgetattr( fd,&amp;options)  !=  <span class="number">0</span>)    </span><br><span class="line">    &#123;    </span><br><span class="line">        perror(<span class="string">&quot;SetupSerial 1&quot;</span>);        </span><br><span class="line">        <span class="keyword">return</span>(FALSE);     </span><br><span class="line">    &#125;    </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//设置串口输入波特率和输出波特率    </span></span><br><span class="line">    <span class="keyword">for</span> ( i= <span class="number">0</span>;  i &lt; <span class="keyword">sizeof</span>(speed_arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);  i++)    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span>  (speed == name_arr[i])    </span><br><span class="line">        &#123;                 </span><br><span class="line">            cfsetispeed(&amp;options, speed_arr[i]);     </span><br><span class="line">            cfsetospeed(&amp;options, speed_arr[i]);      </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;         </span><br><span class="line">       </span><br><span class="line">    <span class="comment">//修改控制模式，保证程序不会占用串口    </span></span><br><span class="line">    options.c_cflag |= CLOCAL;    </span><br><span class="line">    <span class="comment">//修改控制模式，使得能够从串口中读取输入数据    </span></span><br><span class="line">    options.c_cflag |= CREAD;    </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//设置数据流控制    </span></span><br><span class="line">    <span class="keyword">switch</span>(flow_ctrl)    </span><br><span class="line">    &#123;    </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span> :<span class="comment">//不使用流控制    </span></span><br><span class="line">              options.c_cflag &amp;= ~CRTSCTS;    </span><br><span class="line">              <span class="keyword">break</span>;       </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> :<span class="comment">//使用硬件流控制    </span></span><br><span class="line">              options.c_cflag |= CRTSCTS;    </span><br><span class="line">              <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :<span class="comment">//使用软件流控制    </span></span><br><span class="line">              options.c_cflag |= IXON | IXOFF | IXANY;    </span><br><span class="line">              <span class="keyword">break</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//设置数据位    </span></span><br><span class="line">    <span class="comment">//屏蔽其他标志位    </span></span><br><span class="line">    options.c_cflag &amp;= ~CSIZE;    </span><br><span class="line">    <span class="keyword">switch</span> (databits)    </span><br><span class="line">    &#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>    :    </span><br><span class="line">                     options.c_cflag |= CS5;    </span><br><span class="line">                     <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>    :    </span><br><span class="line">                     options.c_cflag |= CS6;    </span><br><span class="line">                     <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>    :        </span><br><span class="line">                 options.c_cflag |= CS7;    </span><br><span class="line">                 <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:        </span><br><span class="line">                 options.c_cflag |= CS8;    </span><br><span class="line">                 <span class="keyword">break</span>;      </span><br><span class="line">        <span class="keyword">default</span>:       </span><br><span class="line">                 <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;Unsupported data size\n&quot;</span>);    </span><br><span class="line">                 <span class="keyword">return</span> (FALSE);     </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//设置校验位    </span></span><br><span class="line">    <span class="keyword">switch</span> (parity)    </span><br><span class="line">    &#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:    </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>: <span class="comment">//无奇偶校验位。    </span></span><br><span class="line">                 options.c_cflag &amp;= ~PARENB;     </span><br><span class="line">                 options.c_iflag &amp;= ~INPCK;        </span><br><span class="line">                 <span class="keyword">break</span>;     </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:      </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;O&#x27;</span>:<span class="comment">//设置为奇校验        </span></span><br><span class="line">                 options.c_cflag |= (PARODD | PARENB);     </span><br><span class="line">                 options.c_iflag |= INPCK;                 </span><br><span class="line">                 <span class="keyword">break</span>;     </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:     </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:<span class="comment">//设置为偶校验      </span></span><br><span class="line">                 options.c_cflag |= PARENB;           </span><br><span class="line">                 options.c_cflag &amp;= ~PARODD;           </span><br><span class="line">                 options.c_iflag |= INPCK;          </span><br><span class="line">                 <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:    </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>: <span class="comment">//设置为空格     </span></span><br><span class="line">                 options.c_cflag &amp;= ~PARENB;    </span><br><span class="line">                 options.c_cflag &amp;= ~CSTOPB;    </span><br><span class="line">                 <span class="keyword">break</span>;     </span><br><span class="line">        <span class="keyword">default</span>:      </span><br><span class="line">                 <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;Unsupported parity\n&quot;</span>);        </span><br><span class="line">                 <span class="keyword">return</span> (FALSE);     </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="comment">// 设置停止位     </span></span><br><span class="line">    <span class="keyword">switch</span> (stopbits)    </span><br><span class="line">    &#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:       </span><br><span class="line">                 options.c_cflag &amp;= ~CSTOPB; <span class="keyword">break</span>;     </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:       </span><br><span class="line">                 options.c_cflag |= CSTOPB; <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:       </span><br><span class="line">                       <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;Unsupported stop bits\n&quot;</span>);     </span><br><span class="line">                       <span class="keyword">return</span> (FALSE);    </span><br><span class="line">    &#125;    </span><br><span class="line">       </span><br><span class="line">    <span class="comment">//修改输出模式，原始数据输出    </span></span><br><span class="line">    options.c_oflag &amp;= ~OPOST;    </span><br><span class="line">      </span><br><span class="line">    options.c_lflag &amp;= ~(ICANON | ECHO | ECHOE | ISIG);    </span><br><span class="line">    <span class="comment">//options.c_lflag &amp;= ~(ISIG | ICANON);    </span></span><br><span class="line">       </span><br><span class="line">    <span class="comment">//设置等待时间和最小接收字符    </span></span><br><span class="line">    options.c_cc[VTIME] = <span class="number">1</span>; <span class="comment">/* 读取一个字符等待1*(1/10)s */</span>      </span><br><span class="line">    options.c_cc[VMIN] = <span class="number">1</span>; <span class="comment">/* 读取字符的最少个数为1 */</span>    </span><br><span class="line">       </span><br><span class="line">    <span class="comment">//如果发生数据溢出，接收数据，但是不再读取 刷新收到的数据但是不读    </span></span><br><span class="line">    tcflush(fd,TCIFLUSH);    </span><br><span class="line">       </span><br><span class="line">    <span class="comment">//激活配置 (将修改后的termios数据设置到串口中）    </span></span><br><span class="line">    <span class="keyword">if</span> (tcsetattr(fd,TCSANOW,&amp;options) != <span class="number">0</span>)      </span><br><span class="line">    &#123;    </span><br><span class="line">        perror(<span class="string">&quot;com set error!\n&quot;</span>);      </span><br><span class="line">        <span class="keyword">return</span> (FALSE);     </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> (TRUE);     </span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">/*******************************************************************  </span></span><br><span class="line"><span class="comment">*名称：                UART0_Init()  </span></span><br><span class="line"><span class="comment">*功能：                串口初始化  </span></span><br><span class="line"><span class="comment">*入口参数：            fd         文件描述符    </span></span><br><span class="line"><span class="comment">*                      speed      串口速度  </span></span><br><span class="line"><span class="comment">*                      flow_ctrl  数据流控制  </span></span><br><span class="line"><span class="comment">*                      databits   数据位   取值为 7 或者8  </span></span><br><span class="line"><span class="comment">*                      stopbits   停止位   取值为 1 或者2  </span></span><br><span class="line"><span class="comment">*                      parity     效验类型 取值为N,E,O,,S  </span></span><br><span class="line"><span class="comment">*                        </span></span><br><span class="line"><span class="comment">*出口参数：正确返回为1，错误返回为0  </span></span><br><span class="line"><span class="comment">*******************************************************************/</span>    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Init</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> speed,<span class="keyword">int</span> flow_ctrl,<span class="keyword">int</span> databits,<span class="keyword">int</span> stopbits,<span class="keyword">int</span> parity)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> err;    </span><br><span class="line">    <span class="comment">//设置串口数据帧格式    </span></span><br><span class="line">    <span class="keyword">if</span> (UART0_Set(fd,<span class="number">115200</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="string">&#x27;N&#x27;</span>) == FALSE)    </span><br><span class="line">    &#123;                                                             </span><br><span class="line">        <span class="keyword">return</span> FALSE;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">return</span>  TRUE;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line">     </span><br><span class="line"><span class="comment">/*******************************************************************  </span></span><br><span class="line"><span class="comment">* 名称：            UART0_Recv  </span></span><br><span class="line"><span class="comment">* 功能：            接收串口数据  </span></span><br><span class="line"><span class="comment">* 入口参数：        fd         文件描述符      </span></span><br><span class="line"><span class="comment">*                   rcv_buf    接收串口中数据存入rcv_buf缓冲区中  </span></span><br><span class="line"><span class="comment">*                   data_len   一帧数据的长度  </span></span><br><span class="line"><span class="comment">* 出口参数：        正确返回为1，错误返回为0  </span></span><br><span class="line"><span class="comment">*******************************************************************/</span>    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Recv</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *rcv_buf,<span class="keyword">int</span> data_len)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> len,fs_sel;    </span><br><span class="line">    fd_set fs_read;    </span><br><span class="line">       </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">time</span>;</span>    </span><br><span class="line">       </span><br><span class="line">    FD_ZERO(&amp;fs_read);    </span><br><span class="line">    FD_SET(fd,&amp;fs_read);    </span><br><span class="line">       </span><br><span class="line">    time.tv_sec = <span class="number">10</span>;    </span><br><span class="line">    time.tv_usec = <span class="number">0</span>;    </span><br><span class="line">       </span><br><span class="line">    <span class="comment">//使用select实现串口的多路通信    </span></span><br><span class="line">    fs_sel = select(fd+<span class="number">1</span>,&amp;fs_read,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;time);    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fs_sel = %d\n&quot;</span>,fs_sel);    </span><br><span class="line">    <span class="keyword">if</span>(fs_sel)    </span><br><span class="line">    &#123;    </span><br><span class="line">        len = read(fd,rcv_buf,data_len);    </span><br><span class="line">        <span class="keyword">return</span> len;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">return</span> FALSE;    </span><br><span class="line">    &#125;         </span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">/********************************************************************  </span></span><br><span class="line"><span class="comment">* 名称：            UART0_Send  </span></span><br><span class="line"><span class="comment">* 功能：            发送数据  </span></span><br><span class="line"><span class="comment">* 入口参数：        fd           文件描述符      </span></span><br><span class="line"><span class="comment">*                   send_buf     存放串口发送数据  </span></span><br><span class="line"><span class="comment">*                   data_len     一帧数据的个数  </span></span><br><span class="line"><span class="comment">* 出口参数：        正确返回为1，错误返回为0  </span></span><br><span class="line"><span class="comment">*******************************************************************/</span>    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UART0_Send</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *send_buf,<span class="keyword">int</span> data_len)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;    </span><br><span class="line">       </span><br><span class="line">    len = write(fd,send_buf,data_len);    </span><br><span class="line">    <span class="keyword">if</span> (len == data_len )    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;send data is %s\n&quot;</span>,send_buf);  </span><br><span class="line">        <span class="keyword">return</span> len;    </span><br><span class="line">    &#125;         </span><br><span class="line">    <span class="keyword">else</span>       </span><br><span class="line">    &#123;    </span><br><span class="line">                   </span><br><span class="line">        tcflush(fd,TCOFLUSH);    </span><br><span class="line">        <span class="keyword">return</span> FALSE;    </span><br><span class="line">    &#125;    </span><br><span class="line">       </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>      <span class="comment">/*标准输入输出定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>     <span class="comment">/*标准函数库定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>     <span class="comment">/*Unix 标准函数定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>     </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span>       </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span>      <span class="comment">/*文件控制定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;termios.h&gt;</span>    <span class="comment">/*PPSIX 终端控制定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span>      <span class="comment">/*错误号定义*/</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd = <span class="number">-1</span>;           <span class="comment">//文件描述符，先定义一个与程序无关的值，防止fd为任意值导致程序出bug    </span></span><br><span class="line">    <span class="keyword">int</span> err;               <span class="comment">//返回调用函数的状态    </span></span><br><span class="line">    <span class="keyword">int</span> len;                            </span><br><span class="line">    <span class="keyword">int</span> i;    </span><br><span class="line">    <span class="keyword">char</span> rcv_buf[<span class="number">256</span>];             </span><br><span class="line">    <span class="keyword">char</span> send_buf[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">     fd = UART0_Open(fd,<span class="string">&quot;ttyS1&quot;</span>); <span class="comment">//打开串口，返回文件描述符   </span></span><br><span class="line">     <span class="keyword">do</span>  </span><br><span class="line">    &#123;    </span><br><span class="line">        err = UART0_Init(fd,<span class="number">115200</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="string">&#x27;N&#x27;</span>);    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Set Port Exactly!\n&quot;</span>); </span><br><span class="line">        sleep(<span class="number">1</span>);   </span><br><span class="line">    &#125;<span class="keyword">while</span>(FALSE == err || FALSE == fd);    </span><br><span class="line">       </span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span>)    <span class="comment">//开发板向pc发送数据的模式</span></span><br><span class="line">    &#123;   </span><br><span class="line">        send_buf = (<span class="keyword">char</span>*) <span class="string">&quot;hello world!&quot;</span>; </span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)   </span><br><span class="line">        &#123;    </span><br><span class="line">            len = UART0_Send(fd,send_buf,<span class="number">40</span>);    </span><br><span class="line">            <span class="keyword">if</span>(len &gt; <span class="number">0</span>)    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;send data successful\n&quot;</span>);   </span><br><span class="line">            sleep(<span class="number">1</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">        UART0_Close(fd);                 </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">else</span>                            <span class="comment">//开发板收到pc发送的数据的模式                 </span></span><br><span class="line">    &#123;                                          </span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">//循环读取数据    </span></span><br><span class="line">        &#123;   </span><br><span class="line">            len = UART0_Recv(fd, rcv_buf,<span class="keyword">sizeof</span>(rcv_buf));    </span><br><span class="line">            <span class="keyword">if</span>(len &gt; <span class="number">0</span>)    </span><br><span class="line">            &#123;    </span><br><span class="line">                rcv_buf[len] = <span class="string">&#x27;\0&#x27;</span>;    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;receive data is %s\n&quot;</span>,rcv_buf);    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">else</span>    </span><br><span class="line">            &#123;    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;cannot receive data\n&quot;</span>);    </span><br><span class="line">            &#125;    </span><br><span class="line">            sleep(<span class="number">1</span>);    </span><br><span class="line">        &#125;                </span><br><span class="line">        UART0_Close(fd);     </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/chentuo2000/article/details/1</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/tags/tool/"/>
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>查看程序使用情况</title>
    <link href="https://peitianyu.github.io/blog/2021/12/01/%E6%9F%A5%E7%9C%8B%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2021/12/01/%E6%9F%A5%E7%9C%8B%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-01T04:30:12.000Z</published>
    <updated>2021-12-01T12:37:33.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p><a href="https://blog.csdn.net/mayue_web/article/details/105388617">Linux下查看某个进程所占用的资源_mayue_web的博客-CSDN博客_查看进程占用资源</a></p><h1 id="shell例程"><a href="#shell例程" class="headerlink" title="shell例程"></a>shell例程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改这里的./Tungray运行程序,用于查看pid</span></span><br><span class="line">ps -aux | grep ./Tungray &gt; pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取第一行,并解析pid</span></span><br><span class="line">pid=`awk &#x27;NR==1&#123;print $2&#125;&#x27; pid`</span><br><span class="line"></span><br><span class="line">cat /proc/$pid/status &gt; pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取第一行,并解析pid</span></span><br><span class="line">state=`awk &#x27;NR==2&#123;print $2&#125;&#x27; pid`</span><br><span class="line">echo &quot;state:&quot;$state`awk &#x27;NR==2&#123;print $3&#125;&#x27; pid`</span><br><span class="line">VmSize=`awk &#x27;NR==12&#123;print $2&#125;&#x27; pid`</span><br><span class="line">echo &quot;VmSize:&quot;$VmSize`awk &#x27;NR==12&#123;print $3&#125;&#x27; pid`</span><br><span class="line">VmRSS=`awk &#x27;NR==15&#123;print $2&#125;&#x27; pid`</span><br><span class="line">echo &quot;VmRSS:&quot;$VmRSS`awk &#x27;NR==15&#123;print $3&#125;&#x27; pid`</span><br><span class="line">Threads=`awk &#x27;NR==21&#123;print $2&#125;&#x27; pid`</span><br><span class="line">echo &quot;Threads:&quot;$Threads</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Name 应用程序或命令的名字 </span><br><span class="line">State 任务的状态，运行/睡眠/僵死/ </span><br><span class="line">SleepAVG 任务的平均等待时间(以nanosecond为单位)，交互式任务因为休眠次数多、时间长，它们的 sleep_avg 也会相应地更大一些，所以计算出来的优先级也会相应高一些。 </span><br><span class="line">Tgid 线程组号 </span><br><span class="line">Pid 任务ID </span><br><span class="line">Ppid 父进程ID </span><br><span class="line">TracerPid 接收跟踪该进程信息的进程的ID号 </span><br><span class="line">Uid Uid euid suid fsuid </span><br><span class="line">Gid Gid egid sgid fsgid </span><br><span class="line">FDSize 文件描述符的最大个数，file-&gt;fds </span><br><span class="line">Groups </span><br><span class="line">VmSize(KB) 任务虚拟地址空间的大小 (total_vm-reserved_vm)，其中total_vm为进程的地址空间的大小，reserved_vm：进程在预留或特殊的内存间的物理页 </span><br><span class="line">VmLck(KB) 任务已经锁住的物理内存的大小。锁住的物理内存不能交换到硬盘 (locked_vm) </span><br><span class="line">VmRSS(KB) 应用程序正在使用的物理内存的大小，就是用ps命令的参数rss的值 (rss) </span><br><span class="line">VmData(KB) 程序数据段的大小（所占虚拟内存的大小），存放初始化了的数据； (total_vm-shared_vm-stack_vm) </span><br><span class="line">VmStk(KB) 任务在用户态的栈的大小 (stack_vm) </span><br><span class="line">VmExe(KB) 程序所拥有的可执行虚拟内存的大小，代码段，不包括任务使用的库 (end_code-start_code) </span><br><span class="line">VmLib(KB) 被映像到任务的虚拟内存空间的库的大小 (exec_lib) </span><br><span class="line">VmPTE 该进程的所有页表的大小，单位：kb </span><br><span class="line">Threads 共享使用该信号描述符的任务的个数，在POSIX多线程序应用程序中，线程组中的所有线程使用同一个信号描述符。 </span><br><span class="line">SigQ 待处理信号的个数 </span><br><span class="line">SigPnd 屏蔽位，存储了该线程的待处理信号 </span><br><span class="line">ShdPnd 屏蔽位，存储了该线程组的待处理信号 </span><br><span class="line">SigBlk 存放被阻塞的信号 </span><br><span class="line">SigIgn 存放被忽略的信号 </span><br><span class="line">SigCgt 存放被俘获到的信号 </span><br><span class="line">CapInh Inheritable，能被当前进程执行的程序的继承的能力 </span><br><span class="line">CapPrm Permitted，进程能够使用的能力，可以包含CapEff中没有的能力，这些能力是被进程自己临时放弃的，CapEff是CapPrm的一个子集，进程放弃没有必要的能力有利于提高安全性 </span><br><span class="line">CapEff Effective，进程的有效能力 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址&quot;&gt;&lt;/a&gt;参考网址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/mayue_web/article/details/10538</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>easy_logger</title>
    <link href="https://peitianyu.github.io/blog/2021/11/26/easy_log/"/>
    <id>https://peitianyu.github.io/blog/2021/11/26/easy_log/</id>
    <published>2021-11-26T04:30:12.000Z</published>
    <updated>2021-11-28T03:38:08.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/armink/EasyLogger">一款超轻量级(ROM&lt;1.6K, RAM&lt;0.3k)、高性能的 C/C++ 日志库 </a></p><h1 id="移植到linux"><a href="#移植到linux" class="headerlink" title="移植到linux"></a>移植到linux</h1><p><a href="https://github.com/peitianyu/easy_log">peitianyu/easy_log (github.com)</a></p><p>注意修改log文件保存路径,在<code>easy_log/include/elog_file_cfg.h</code>中</p><p>一款更加轻量化的log工具,可以自行更改函数,实现功能</p><p><a href="https://github.com/peitianyu/light_log/blob/main/README.md"> peitianyu/light_log (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/armink/EasyLogger&quot;&gt;一款超轻量级(ROM&amp;lt</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Mk60+shell_letter</title>
    <link href="https://peitianyu.github.io/blog/2021/11/26/shell_letter/"/>
    <id>https://peitianyu.github.io/blog/2021/11/26/shell_letter/</id>
    <published>2021-11-26T04:30:12.000Z</published>
    <updated>2021-11-26T06:12:11.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/Mculover666/article/details/105141286?ops_request_misc=%7B%22request_id%22:%22163790121416780357282944%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163790121416780357282944&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-105141286.pc_search_mgc_flag&utm_term=%E5%B5%8C%E5%85%A5%E5%BC%8Fshell&spm=1018.2226.3001.4187">letter-shell | 一个功能强大的嵌入式shell_Mculover666的博客（嵌入式）-CSDN博客_letter shell</a></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//shell_port.c</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @briefshell移植到STM32L431时的接口实现</span></span><br><span class="line"><span class="comment"> * @authormculover666</span></span><br><span class="line"><span class="comment"> * @date2020/03/27 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;shell.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;shell_port.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 创建shell对象，开辟shell缓冲区 */</span></span><br><span class="line">Shell shell;</span><br><span class="line"><span class="keyword">char</span> shell_buffer[<span class="number">512</span>];</span><br><span class="line"><span class="comment">/* 2. 自己实现shell写函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shell写函数原型：typedef void (*shellWrite)(const char);</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 用户shell写</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param data 数据</span></span><br><span class="line"><span class="comment"> * @param len 数据长度</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return short 实际写入的数据长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="title">userShellWrite</span><span class="params">(<span class="keyword">char</span> *data, <span class="keyword">unsigned</span> <span class="keyword">short</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">UART_WriteByte(HW_UART0, data[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 编写初始化函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">User_Shell_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//注册自己实现的写函数</span></span><br><span class="line">    shell.write = userShellWrite;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用shell初始化函数</span></span><br><span class="line">    shellInit(&amp;shell, shell_buffer, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shell_port.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SHELL_PORT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>_SHELL_PORT_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;shell.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将shell定义为外部变量，在串口中断回调函数中还要使用 */</span></span><br><span class="line"><span class="keyword">extern</span> Shell shell;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明自己编写的初始化函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">User_Shell_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _SHELL_PORT_H_ */</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;common.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cpuidy.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;shell_port.h&quot;</span></span></span><br><span class="line"><span class="keyword">uint16_t</span> recv_buf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">char</span> ch, <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input int: %d, char: %c, string: %s\r\n&quot;</span>, i, ch, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UART_RX_ISR</span><span class="params">(<span class="keyword">uint16_t</span> byteReceived)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//调用shell处理数据的接口</span></span><br><span class="line">recv_buf = byteReceived;</span><br><span class="line">shellHandler(&amp;shell, recv_buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DelayInit();</span><br><span class="line">    <span class="keyword">uint32_t</span> instance = GPIO_QuickInit(HW_GPIOE, <span class="number">0</span>, kGPIO_Mode_OPP);</span><br><span class="line">    UART_QuickInit(UART0_RX_PA01_TX_PA02, <span class="number">115200</span>);</span><br><span class="line">    <span class="comment">/*  配置UART 中断配置 打开接收中断 安装中断回调函数 */</span></span><br><span class="line">    UART_CallbackRxInstall(HW_UART0, UART_RX_ISR);</span><br><span class="line">    <span class="comment">/* 打开串口接收中断功能 IT 就是中断的意思*/</span></span><br><span class="line">    UART_ITDMAConfig(HW_UART0, kUART_IT_Rx, <span class="literal">true</span>);</span><br><span class="line">    User_Shell_Init();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 闪烁小灯 */</span></span><br><span class="line">        GPIO_ToggleBit(HW_GPIOE, <span class="number">0</span>);</span><br><span class="line">        DelayMs(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出到命令列表里</span></span><br><span class="line">SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(<span class="number">0</span>)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_FUNC), test, test, test);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Mculover666/article/details/1</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
</feed>
