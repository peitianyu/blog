<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某飞行员的随笔</title>
  
  
  <link href="https://peitianyu.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://peitianyu.github.io/blog/"/>
  <updated>2022-01-15T10:35:27.056Z</updated>
  <id>https://peitianyu.github.io/blog/</id>
  
  <author>
    <name>某飞行员</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux报错</title>
    <link href="https://peitianyu.github.io/blog/2022/01/15/linux%E7%BC%96%E8%AF%91/"/>
    <id>https://peitianyu.github.io/blog/2022/01/15/linux%E7%BC%96%E8%AF%91/</id>
    <published>2022-01-15T04:30:12.000Z</published>
    <updated>2022-01-15T10:35:27.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/JIEJINQUANIL/article/details/106414938">(99条消息) 编译警告：warning: Clock skew detected. Your build may be incomplete._竭尽全力的专栏-CSDN博客</a> </p><h1 id="warning-Clock-skew-detected"><a href="#warning-Clock-skew-detected" class="headerlink" title="warning: Clock skew detected"></a>warning: Clock skew detected</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f | xargs -n 5 touch</span><br></pre></td></tr></table></figure><h1 id="apt-upgdate-失败"><a href="#apt-upgdate-失败" class="headerlink" title="apt upgdate 失败"></a>apt upgdate 失败</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/apt/lists/lock</span><br><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br><span class="line">sudo dpkg --configure -a </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/JIEJINQUANIL/article/details</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>常用好用的论文网站</title>
    <link href="https://peitianyu.github.io/blog/2022/01/15/%E8%AE%BA%E6%96%87%E7%BD%91%E7%AB%99/"/>
    <id>https://peitianyu.github.io/blog/2022/01/15/%E8%AE%BA%E6%96%87%E7%BD%91%E7%AB%99/</id>
    <published>2022-01-15T04:30:12.000Z</published>
    <updated>2022-01-15T08:46:48.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://scholar.google.com/scholar?hl=zh-CN&as_sdt=0,5&q=Pure+pursuit+optimization+algorithm&oq=">Google 学术搜索</a> </p><p> <a href="https://sci-hub.mksa.top/">Sci-Hub (mksa.top)</a> </p><p> <a href="https://site.sciping.com/">科塔学术导航 - 最专业、准确、及时和全面的科研与学术资源导航平台 (sciping.com)</a> </p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这里的几个网站中科塔网很全面,可以配合sci_hub使用,极易食用.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://scholar.google.com/scholar?hl=zh-CN&amp;as_sdt</summary>
      
    
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/categories/tool/"/>
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>hex解析</title>
    <link href="https://peitianyu.github.io/blog/2022/01/03/hex%E8%A7%A3%E6%9E%90/"/>
    <id>https://peitianyu.github.io/blog/2022/01/03/hex%E8%A7%A3%E6%9E%90/</id>
    <published>2022-01-03T04:30:12.000Z</published>
    <updated>2022-01-09T13:20:36.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/a1037488611/article/details/43340055?ops_request_misc=%7B%22request_id%22:%22164121480016780269824327%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164121480016780269824327&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduend~default-1-43340055.nonecase&utm_term=hex%E8%A7%A3%E6%9E%90&spm=1018.2226.3001.4450">(94条消息) HEX文件格式解析_a1037488611的专栏-CSDN博客_hex文件格式解析</a> </p><h1 id="格式如下"><a href="#格式如下" class="headerlink" title="格式如下"></a>格式如下</h1><p><img src="https://s2.loli.net/2022/01/03/UjoEasnlNmLwYtZ.png" alt="1641215282358.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">：(冒号)每个Intel HEX 记录 都由冒 号开头 ；</span><br><span class="line">LL 是 数 据 长 度域, 它 代表 记录当 中 数 据字 节 (dd) 的 数量 ；</span><br><span class="line">aaaa 是地址域, 它代表 记录当 中 数据的起始地址；</span><br><span class="line">TT是代表HEX 记录类 型的域 , 它 可能是以下 数 据 当 中的一 个：</span><br><span class="line">    00 – 数 据 记录（Data Record）</span><br><span class="line">    01 – 文件结 束 记录（End of FileRecord）</span><br><span class="line">    02 – 扩展段地址 记录（ExtendedSegment Address Record）</span><br><span class="line">03 – 开始段地址 记录（Start Segment Address Record）</span><br><span class="line">    04 – 扩展 线 性地址 记录（Extended Linear Address Record）</span><br><span class="line">05 – 开始线性地址 记录（Extended Segment Address Record）</span><br><span class="line">dd 是数 据域 , 它 代表一 个 字 节 的 数 据. 一 个记录 可以有 许 多 数 据字 节 . 记录当 中 数 据字 节 的 数 量必 须 和数 据 长 度域(ll) 中指定的 数字相符.</span><br><span class="line">cc 是校验 和域 , 它 表示 这个记录 的校 验 和. 校 验 和的 计 算是通 过将记录当 中所有十六 进 制 编码数 字 对 的 值相加, 以256 为 模 进 行以下 补 足.</span><br><span class="line"></span><br><span class="line">表示为：“：[1字节长度][2字节地址][1字节记录类型][n字节段][1字节校验和] ”</span><br></pre></td></tr></table></figure><h1 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:10 2462 00 464C5549442050524F46494C4500464C33</span><br><span class="line">：[10个数据长度][字节地址为:0x2462][记录类型为:00 数据记录][n字节段数据][crc校验:0x33]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/a1037488611/article/details/</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式分层</title>
    <link href="https://peitianyu.github.io/blog/2022/01/03/%E5%B5%8C%E5%85%A5%E5%BC%8F%E4%BB%BB%E5%8A%A1%E5%88%86%E5%B1%82/"/>
    <id>https://peitianyu.github.io/blog/2022/01/03/%E5%B5%8C%E5%85%A5%E5%BC%8F%E4%BB%BB%E5%8A%A1%E5%88%86%E5%B1%82/</id>
    <published>2022-01-03T04:30:12.000Z</published>
    <updated>2022-01-09T13:20:43.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/wxg_wuchujie88/article/details/85992064">(94条消息) 例解嵌入式系统分层结构_和风化雨-CSDN博客_嵌入式系统分层</a> </p><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p> 分层的目的主要:1,是降低系统开发难度；2,是为了复用。 </p><h1 id="两层结构-硬件层-软件层"><a href="#两层结构-硬件层-软件层" class="headerlink" title="两层结构[硬件层, 软件层]"></a>两层结构[硬件层, 软件层]</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      P1_1=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++);</span><br><span class="line">      P1_1=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三层结构-硬件层，-驱动层，应用层"><a href="#三层结构-硬件层，-驱动层，应用层" class="headerlink" title="三层结构[ 硬件层， 驱动层，应用层 ]"></a>三层结构[ 硬件层， 驱动层，应用层 ]</h1><p>虽然简单但很有逻辑,可以参考</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************驱动头文件 driver.h***********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_on</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_off</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*******************驱动源文件 driver.c************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;driver.h&quot;</span></span></span><br><span class="line"><span class="comment">/*延时函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_on</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   P1_1=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_off</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   P1_1=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************应用系统****************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>“../driver/driver.h”</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">   &#123; </span><br><span class="line">       led_on();</span><br><span class="line">       delay();</span><br><span class="line">       led_off();</span><br><span class="line">       delay();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四层结构-硬件层，驱动层，操作系统层，应用层"><a href="#四层结构-硬件层，驱动层，操作系统层，应用层" class="headerlink" title="四层结构[ 硬件层，驱动层，操作系统层，应用层 ]"></a>四层结构[ 硬件层，驱动层，操作系统层，应用层 ]</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************************驱动****************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/kerel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/mm/h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">led_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_cleanup</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">device_open</span><span class="params">(struct inode *,struct file*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">device_release</span><span class="params">(struct inode *,struct file*)</span></span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span> device _write(struct file*,<span class="keyword">const</span> <span class="keyword">char</span> *,<span class="keyword">size_t</span>,<span class="keyword">loff_t</span> *);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_model</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanup_module</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">led_ops</span>=</span>&#123;</span><br><span class="line">.owner=THIS_MODULE,</span><br><span class="line">..............................</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> led_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">..............................</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> led_cleanup()</span><br><span class="line">&#123;</span><br><span class="line">..............................</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> device_open(struct inode * inode ,struct file* file)</span><br><span class="line">&#123;</span><br><span class="line">..............................</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> device_release(struct inode *inode,struct file* file)</span><br><span class="line">&#123;</span><br><span class="line">..............................</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span> device _write(struct file *file,<span class="keyword">const</span> <span class="keyword">char</span> * buffer,<span class="keyword">size_t</span> length,<span class="keyword">loff_t</span> *offset)</span><br><span class="line">&#123;</span><br><span class="line">..............................</span><br><span class="line"><span class="keyword">int</span> init_model(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">..............................</span><br><span class="line">&#125;</span><br><span class="line">modele_init(led_init);</span><br><span class="line">module_exit(led_cleanup);</span><br><span class="line">MODULE_LICENCE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"><span class="comment">/******************************应用****************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED  <span class="meta-string">&quot;/dev/led&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    File *fp=fopen(LED,RDWR);</span><br><span class="line">    <span class="keyword">if</span>(!fp)&#123;</span><br><span class="line">      <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        ioctl(fp,<span class="number">1</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        ioctl(fp,<span class="number">0</span>);</span><br><span class="line">        sleep(<span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/wxg_wuchujie88/article/detai</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>运算符标签操作</title>
    <link href="https://peitianyu.github.io/blog/2022/01/03/%E8%BF%90%E7%AE%97%E7%AC%A6%E6%A0%87%E7%AD%BE%E6%93%8D%E4%BD%9C/"/>
    <id>https://peitianyu.github.io/blog/2022/01/03/%E8%BF%90%E7%AE%97%E7%AC%A6%E6%A0%87%E7%AD%BE%E6%93%8D%E4%BD%9C/</id>
    <published>2022-01-03T04:30:12.000Z</published>
    <updated>2022-01-09T13:20:51.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/qq_38721302/article/details/82699934?ops_request_misc=%7B%22request_id%22:%22164121291816780261944453%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164121291816780261944453&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-9-82699934.pc_search_insert_es_download&utm_term=c%E8%AF%AD%E8%A8%80%E6%A0%87%E7%AD%BE&spm=1018.2226.3001.4187">(94条消息) 嵌入式学习之C语言运算符标签操作_foolish的博客-CSDN博客</a> </p><h1 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p=xxx； [<span class="number">0x12</span>] <span class="comment">//有一个int类型的指针，它的指针变量存储的地址为0x12。</span></span><br><span class="line">p=p+<span class="number">1</span>；<span class="comment">//指针加法,指向[0x13]</span></span><br></pre></td></tr></table></figure><h1 id="下标运算符"><a href="#下标运算符" class="headerlink" title="下标运算符[]"></a>下标运算符[]</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(p+n)=p[n]; <span class="comment">//n为下标,相当于,数组下标</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/qq_38721302/article/details/</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>linux程序开机启动与后台启动</title>
    <link href="https://peitianyu.github.io/blog/2021/12/27/%E8%87%AA%E5%90%AF%E5%8A%A8_%E5%90%8E%E5%8F%B0%E5%90%AF%E5%8A%A8/"/>
    <id>https://peitianyu.github.io/blog/2021/12/27/%E8%87%AA%E5%90%AF%E5%8A%A8_%E5%90%8E%E5%8F%B0%E5%90%AF%E5%8A%A8/</id>
    <published>2021-12-27T04:30:12.000Z</published>
    <updated>2021-12-27T07:28:24.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/qq_36328643/article/details/89359724?ops_request_misc=%7B%22request_id%22:%22164058731416780265430164%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164058731416780265430164&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-89359724.pc_search_insert_es_download&utm_term=ubuntu18%E8%87%AA%E5%90%AF%E5%8A%A8&spm=1018.2226.3001.4187">(91条消息) Ubuntu18.04 开机自启动脚本_cxh的博客-CSDN博客_ubuntu18.04开机自启动脚本</a> </p><p> <a href="https://blog.csdn.net/qq_42353939/article/details/89242941?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.nonecase">(91条消息) linux如何后台运行服务_六指黑侠i的博客-CSDN博客_linux 后台运行</a> </p><h1 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rc-local.service生成</span></span><br><span class="line">sudo nano /etc/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=/etc/rc.local Compatibility</span><br><span class="line">ConditionPathExists=/etc/rc.local  #脚本文件位置</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start  #配置的脚本文件rc.local为start</span><br><span class="line">TimeoutSec=0    </span><br><span class="line">StandardOutput=tty  #标准输出</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">SysVStartPriority=99  #优先级，当有多个开机启动文件时可以设置不同的值</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成rc.local</span></span><br><span class="line">sudo nano /etc/rc.local</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh -e</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># rc.local</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Make sure that the script will <span class="string">&quot;exit 0&quot;</span> on success or any other</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> value on error.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># In order to enable or disable this script just change the execution</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bits.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># By default this script does nothing.</span></span></span><br><span class="line">echo &quot;看到这行字，说明添加自启动脚本成功。&quot; &gt; /usr/local/test.log</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 给rc.local加上权限，启用服务，启动服务并检查状态</span></span><br><span class="line">sudo chmod +x /etc/rc.local</span><br><span class="line">sudo systemctl enable rc-local</span><br><span class="line">sudo systemctl start rc-local.service</span><br><span class="line">sudo systemctl status rc-local.service</span><br></pre></td></tr></table></figure><h1 id="不挂断后台启动"><a href="#不挂断后台启动" class="headerlink" title="不挂断后台启动"></a>不挂断后台启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup command &amp;</span><br></pre></td></tr></table></figure><h1 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看进程</span></span><br><span class="line">jobs -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 杀死进程</span></span><br><span class="line">sudo kill 7889</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/qq_36328643/article/details/</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>一种嵌入式设计模式</title>
    <link href="https://peitianyu.github.io/blog/2021/12/22/%E4%B8%80%E7%A7%8D%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://peitianyu.github.io/blog/2021/12/22/%E4%B8%80%E7%A7%8D%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-22T04:30:12.000Z</published>
    <updated>2021-12-22T07:41:08.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>使用<code>set</code>与<code>get</code>方式实现的金字塔型架构,最下层仅提供函数调用,例如tcp,udp,uart,gpio等,第二层是模块层,这一层通过pthread线程实现自循环式模块实现,通过get与set对模块数据进行获取与设置.最后是逻辑层,仅对下层数据进行逻辑操作,不做模块实现.</p><h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── lib</span><br><span class="line">│   └── libcontrolcan.so</span><br><span class="line">└── src</span><br><span class="line">    ├── GROUND_PANEL</span><br><span class="line">    │   ├── Driver</span><br><span class="line">    │   │   ├── Driver.h</span><br><span class="line">    │   │   ├── Driver_utils.cpp</span><br><span class="line">    │   │   ├── Driver_utils.h</span><br><span class="line">    │   │   ├── Gpio.cpp</span><br><span class="line">    │   │   ├── Gpio.h</span><br><span class="line">    │   │   ├── controlcan.cpp</span><br><span class="line">    │   │   ├── controlcan.h</span><br><span class="line">    │   │   ├── socketCAN.cpp</span><br><span class="line">    │   │   ├── socketCAN.h</span><br><span class="line">    │   │   ├── tcp_cilent.cpp</span><br><span class="line">    │   │   ├── tcp_cilent.h</span><br><span class="line">    │   │   ├── usart.cpp</span><br><span class="line">    │   │   └── usart.h</span><br><span class="line">    │   ├── Math</span><br><span class="line">    │   │   ├── Math.h</span><br><span class="line">    │   │   ├── pid_control.cpp</span><br><span class="line">    │   │   └── pid_control.h</span><br><span class="line">    │   ├── ThirdParts</span><br><span class="line">    │   │   ├── CFG_ini.cpp</span><br><span class="line">    │   │   ├── CFG_ini.h</span><br><span class="line">    │   │   ├── ModBUS</span><br><span class="line">    │   │   │   ├── ascii</span><br><span class="line">    │   │   │   │   ├── mbascii.c</span><br><span class="line">    │   │   │   │   └── mbascii.h</span><br><span class="line">    │   │   │   ├── functions</span><br><span class="line">    │   │   │   │   ├── mbfunccoils.c</span><br><span class="line">    │   │   │   │   ├── mbfuncdiag.c</span><br><span class="line">    │   │   │   │   ├── mbfuncdisc.c</span><br><span class="line">    │   │   │   │   ├── mbfuncholding.c</span><br><span class="line">    │   │   │   │   ├── mbfuncinput.c</span><br><span class="line">    │   │   │   │   ├── mbfuncother.c</span><br><span class="line">    │   │   │   │   └── mbutils.c</span><br><span class="line">    │   │   │   ├── include</span><br><span class="line">    │   │   │   │   ├── mb.h</span><br><span class="line">    │   │   │   │   ├── mbconfig.h</span><br><span class="line">    │   │   │   │   ├── mbframe.h</span><br><span class="line">    │   │   │   │   ├── mbfunc.h</span><br><span class="line">    │   │   │   │   ├── mbport.h</span><br><span class="line">    │   │   │   │   ├── mbproto.h</span><br><span class="line">    │   │   │   │   └── mbutils.h</span><br><span class="line">    │   │   │   ├── mb.c</span><br><span class="line">    │   │   │   ├── port</span><br><span class="line">    │   │   │   │   ├── port.h</span><br><span class="line">    │   │   │   │   ├── portevent.c</span><br><span class="line">    │   │   │   │   ├── portother.c</span><br><span class="line">    │   │   │   │   ├── portserial.c</span><br><span class="line">    │   │   │   │   └── porttimer.c</span><br><span class="line">    │   │   │   ├── rtu</span><br><span class="line">    │   │   │   │   ├── mbcrc.c</span><br><span class="line">    │   │   │   │   ├── mbcrc.h</span><br><span class="line">    │   │   │   │   ├── mbrtu.c</span><br><span class="line">    │   │   │   │   └── mbrtu.h</span><br><span class="line">    │   │   │   └── tcp</span><br><span class="line">    │   │   │       ├── mbtcp.c</span><br><span class="line">    │   │   │       └── mbtcp.h</span><br><span class="line">    │   │   ├── cJSON.c</span><br><span class="line">    │   │   ├── cJSON.h</span><br><span class="line">    │   │   ├── tinyxml2.cpp</span><br><span class="line">    │   │   └── tinyxml2.h</span><br><span class="line">    │   └── param</span><br><span class="line">    │       ├── AGVParameter.h</span><br><span class="line">    │       ├── CFG.c</span><br><span class="line">    │       ├── CFG.h</span><br><span class="line">    │       ├── env_configure.c</span><br><span class="line">    │       └── env_configure.h</span><br><span class="line">    ├── Module</span><br><span class="line">    │   ├── ActionCTRL</span><br><span class="line">    │   │   ├── ActionCTRL.cpp</span><br><span class="line">    │   │   ├── ActionCTRL.h</span><br><span class="line">    │   │   └── ActionCTRLData.h</span><br><span class="line">    │   ├── Battery</span><br><span class="line">    │   │   ├── Battery.cpp</span><br><span class="line">    │   │   ├── Battery.h</span><br><span class="line">    │   │   ├── BatteryData.h</span><br><span class="line">    │   │   ├── EIKTO_battery.cpp</span><br><span class="line">    │   │   ├── EIKTO_battery.h</span><br><span class="line">    │   │   ├── FR_battery.cpp</span><br><span class="line">    │   │   └── FR_battery.h</span><br><span class="line">    │   ├── CommWithPC</span><br><span class="line">    │   │   ├── CommWithPC.cpp</span><br><span class="line">    │   │   ├── CommWithPC.h</span><br><span class="line">    │   │   └── CommWithPCData.h</span><br><span class="line">    │   ├── Encoder</span><br><span class="line">    │   │   ├── Encoder.cpp</span><br><span class="line">    │   │   ├── Encoder.h</span><br><span class="line">    │   │   ├── EncoderData.h</span><br><span class="line">    │   │   ├── TOFI_encoder.cpp</span><br><span class="line">    │   │   └── TOFI_encoder.h</span><br><span class="line">    │   ├── HandShank</span><br><span class="line">    │   │   ├── HandShank.cpp</span><br><span class="line">    │   │   ├── HandShank.h</span><br><span class="line">    │   │   ├── HandShankData.h</span><br><span class="line">    │   │   ├── Logitech_controller.cpp</span><br><span class="line">    │   │   └── Logitech_controller.h</span><br><span class="line">    │   ├── IoBoard</span><br><span class="line">    │   │   ├── IoBoard.cpp</span><br><span class="line">    │   │   ├── IoBoard.h</span><br><span class="line">    │   │   └── IoBoardData.h</span><br><span class="line">    │   ├── Location</span><br><span class="line">    │   │   ├── Location.cpp</span><br><span class="line">    │   │   ├── Location.h</span><br><span class="line">    │   │   └── LocationData.h</span><br><span class="line">    │   ├── Map</span><br><span class="line">    │   │   ├── LaserMAP.cpp</span><br><span class="line">    │   │   ├── LaserMAP.h</span><br><span class="line">    │   │   ├── Map.cpp</span><br><span class="line">    │   │   ├── Map.h</span><br><span class="line">    │   │   └── MapData.h</span><br><span class="line">    │   ├── Module.cpp</span><br><span class="line">    │   ├── Module.h</span><br><span class="line">    │   ├── MoveCTRL</span><br><span class="line">    │   │   ├── Kunhou</span><br><span class="line">    │   │   │   ├── Kunhou_cJSON.cpp</span><br><span class="line">    │   │   │   └── Kunhou_cJSON.h</span><br><span class="line">    │   │   ├── MoveCTRL.cpp</span><br><span class="line">    │   │   ├── MoveCTRL.h</span><br><span class="line">    │   │   ├── MoveCtrlData.h</span><br><span class="line">    │   │   └── Tongyi_Diff_Drive</span><br><span class="line">    │   │       ├── Tongyi_Driver.cpp</span><br><span class="line">    │   │       ├── Tongyi_Driver.h</span><br><span class="line">    │   │       ├── diff_control.cpp</span><br><span class="line">    │   │       └── diff_control.h</span><br><span class="line">    │   ├── log.cpp</span><br><span class="line">    │   └── log.h</span><br><span class="line">    ├── Task</span><br><span class="line">    │   ├── ModbusHMI.cpp</span><br><span class="line">    │   ├── ModbusHMI.h</span><br><span class="line">    │   ├── Music_Led.cpp</span><br><span class="line">    │   ├── Music_Led.h</span><br><span class="line">    │   ├── Safety.cpp</span><br><span class="line">    │   ├── Safety.h</span><br><span class="line">    │   ├── Task.cpp</span><br><span class="line">    │   ├── Task.h</span><br><span class="line">    │   ├── autoCtrl.cpp</span><br><span class="line">    │   ├── autoCtrl.h</span><br><span class="line">    │   ├── manualCtrl.cpp</span><br><span class="line">    │   └── manualCtrl.h</span><br><span class="line">    └── main.cpp</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>需要注意的一点是每个特定模块又三个对外文件,<code>module.cpp</code> <code>module.h</code> <code>moduleData.h</code></p><p>模块使用,只有使用时初始化线程,如果不使用则注释掉</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;HandShank.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_HandShank</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Logitech_thread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;set&lt;/code&gt;与&lt;code&gt;get&lt;/code&gt;方式实现的金字塔型架构,最下层仅提供函数调用,例如tcp,udp,ua</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo安装</title>
    <link href="https://peitianyu.github.io/blog/2021/12/17/hexo%E5%AE%89%E8%A3%85/"/>
    <id>https://peitianyu.github.io/blog/2021/12/17/hexo%E5%AE%89%E8%A3%85/</id>
    <published>2021-12-17T04:30:12.000Z</published>
    <updated>2021-12-27T03:41:04.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/sinat_37781304/article/details/82729029?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0.no_search_link&spm=1001.2101.3001.4242.1">(91条消息) hexo史上最全搭建教程_Fangzh的技术博客-CSDN博客_hexo</a> </p><p> <a href="https://blog.csdn.net/guzhao593/article/details/81712016?ops_request_misc=%7B%22request_id%22:%22164057576416780357213843%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164057576416780357213843&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81712016.pc_search_insert_es_download&utm_term=%E5%8D%87%E7%BA%A7node%E7%89%88%E6%9C%AC&spm=1018.2226.3001.4187">(91条消息) node版本如何升级_赵天铭的博客-CSDN博客_升级node版本</a> </p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装git</span></span><br><span class="line">sudo apt-get install git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装nodejs</span></span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="nodejs问题"><a href="#nodejs问题" class="headerlink" title="nodejs问题"></a>nodejs问题</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm i -g n</span><br><span class="line">npm i -g n --force</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级版本号</span></span><br><span class="line">n 版本号 如 n 10.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级最新</span></span><br><span class="line">n latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级最近稳定</span></span><br><span class="line">n stable</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/sinat_37781304/article/detai</summary>
      
    
    
    
    <category term="blog" scheme="https://peitianyu.github.io/blog/categories/blog/"/>
    
    
    <category term="blog" scheme="https://peitianyu.github.io/blog/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>pthread_mutex使用</title>
    <link href="https://peitianyu.github.io/blog/2021/12/17/pthread_mutex%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2021/12/17/pthread_mutex%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-17T04:30:12.000Z</published>
    <updated>2021-12-17T01:29:20.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/networkhunter/article/details/100218945?ops_request_misc=%7B%22request_id%22:%22163970172716780265411237%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163970172716780265411237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-100218945.pc_search_em_sort&utm_term=pthread&spm=1018.2226.3001.4187">pthread详解_networkhunter的博客-CSDN博客_phread</a></p><p><a href="https://blog.csdn.net/z_muyangren/article/details/105398871?ops_request_misc=%7B%22request_id%22:%22163970180516780271917732%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163970180516780271917732&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-105398871.pc_search_em_sort&utm_term=pthread_mutex_lock&spm=1018.2226.3001.4187">关于pthread_mutex_lock使用_无专精则不能成，无涉猎则不能通-CSDN博客_pthread_mutex_timedlock</a></p><p><a href="https://blog.csdn.net/a6333230/article/details/113654694?ops_request_misc=%7B%22request_id%22:%22163970180516780264024377%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163970180516780264024377&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-113654694.pc_search_em_sort&utm_term=pthread_mutex_lock&spm=1018.2226.3001.4187">linux读写锁 pthread_rwlock/互斥锁pthread_mutex_三眼二郎-CSDN博客_pthread_mutex_t pthread_rwlock_t</a></p><h1 id="常用pthread-mutex-lock"><a href="#常用pthread-mutex-lock" class="headerlink" title="常用pthread_mutex_lock"></a>常用pthread_mutex_lock</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_trylock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_timedlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> abs_timeout)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mtx;</span><br><span class="line"><span class="comment">// 初始化互斥量</span></span><br><span class="line"><span class="comment">// 第二个参数为 NULL，互斥锁的属性会设置为默认属性</span></span><br><span class="line"><span class="built_in">pthread_mutex_init</span>(&amp;mtx, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 阻塞调用</span></span><br><span class="line"><span class="built_in">pthread_mutex_lock</span>(&amp;mtx);</span><br><span class="line"><span class="comment">// 非堵塞调用</span></span><br><span class="line"><span class="keyword">int</span> err = <span class="built_in">pthread_mutex_trylock</span>(&amp;mtx);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> != err) &#123;</span><br><span class="line">    <span class="keyword">if</span>(EBUSY == err) &#123;</span><br><span class="line">        <span class="comment">//The mutex could not be acquired because it was already locked.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 超时调用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">abs_timeout</span>;</span></span><br><span class="line">abs_timeout.tv_sec = <span class="built_in">time</span>(<span class="literal">NULL</span>) + <span class="number">1</span>;</span><br><span class="line">abs_timeout.tv_nsec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> err = <span class="built_in">pthread_mutex_timedlock</span>(&amp;mtx, &amp;abs_timeout);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> != err) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ETIMEDOUT == err) &#123;</span><br><span class="line">        <span class="comment">//The mutex could not be locked before the specified timeout expired.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放互斥锁</span></span><br><span class="line"><span class="built_in">pthread_mutex_unlock</span>(&amp;mtx);</span><br><span class="line"><span class="comment">// 销毁线程锁</span></span><br><span class="line"><span class="built_in">pthread_mutex_destroy</span>(&amp;mtx)</span><br></pre></td></tr></table></figure><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;<span class="comment">/*初始化互斥锁*/</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span>  cond = PTHREAD_COND_INITIALIZER;<span class="comment">//init cond</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//global</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t_a;</span><br><span class="line">    <span class="keyword">pthread_t</span> t_b;<span class="comment">//two thread</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;t_a,<span class="literal">NULL</span>,thread2,(<span class="keyword">void</span>*)<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;t_b,<span class="literal">NULL</span>,thread1,(<span class="keyword">void</span>*)<span class="literal">NULL</span>);<span class="comment">//Create thread</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;t_a:0x%x, t_b:0x%x:&quot;</span>, t_a, t_b);</span><br><span class="line">    <span class="built_in">pthread_join</span>(t_b,<span class="literal">NULL</span>);<span class="comment">//wait a_b thread end</span></span><br><span class="line">    <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">pthread_cond_destroy</span>(&amp;cond);</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">(<span class="keyword">void</span> *junk)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;mutex); <span class="comment">//互斥锁</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call thread1 \n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">pthread_cond_signal</span>(&amp;cond); <span class="comment">//send sianal to t_b</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;thread1:******i=%d\n&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;thread1: %d\n&quot;</span>,i);</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread1: sleep i=%d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread1: sleep i=%d******end\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">(<span class="keyword">void</span>*junk)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call thread2 \n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span> != <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">pthread_cond_wait</span>(&amp;cond,&amp;mutex); <span class="comment">//wait</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread2: %d\n&quot;</span>,i);</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread2: sleep i=%d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread2: sleep i=%d******end\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/networkhunter/article/details</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>pthread简单使用</title>
    <link href="https://peitianyu.github.io/blog/2021/12/17/pthread%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2021/12/17/pthread%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-17T04:30:12.000Z</published>
    <updated>2021-12-17T01:12:27.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/chenwh_cn/article/details/117225053?ops_request_misc=%7B%22request_id%22:%22163970172716780265411237%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163970172716780265411237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-117225053.pc_search_em_sort&utm_term=pthread&spm=1018.2226.3001.4187">pthread 线程基本函数_chenwh_cn的博客-CSDN博客_pthread函数</a></p><p><a href="https://blog.csdn.net/u013457167/article/details/83691039?ops_request_misc=%7B%22request_id%22:%22163970172716780265411237%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163970172716780265411237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-7-83691039.pc_search_em_sort&utm_term=pthread&spm=1018.2226.3001.4187">Pthread线程基础学习_我的梦-CSDN博客_pthread教程</a></p><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread_fun</span><span class="params">(<span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = *((<span class="keyword">int</span>*)arg);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int the new thread: num = %d\n&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">int</span> test = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, thread_fun, (<span class="keyword">void</span> *)&amp;test);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thead_fun</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ret = <span class="number">5</span>; <span class="comment">// thread_join.cpp:7:13: warning: address of local variable ‘ret’ returned [-Wreturn-local-addr]</span></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>((<span class="keyword">void</span>*)&amp;ret);</span><br><span class="line">    <span class="comment">//return (void*)&amp;ret;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等待线程结束并回收线程资源，此函数会阻塞，类似进程的 wait() 函数。如果线程已经结束，那么该函数会立即返回</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">void</span> *ret = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, thead_fun, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_join</span>(tid, &amp;ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, *((<span class="keyword">int</span>*)ret));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分离线程"><a href="#分离线程" class="headerlink" title="分离线程"></a>分离线程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thead_fun</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread is runing\n&quot;</span>);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, thead_fun, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_detach</span>(tid);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pthread_join</span>(tid, <span class="literal">NULL</span>)) <span class="comment">// 立即返回，调用失败</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;join not working\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after join\n&quot;</span>);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;master is leaving\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="退出线程"><a href="#退出线程" class="headerlink" title="退出线程"></a>退出线程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thead_fun</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ret = <span class="number">5</span>; <span class="comment">// thread_join.cpp:7:13: warning: address of local variable ‘ret’ returned [-Wreturn-local-addr]</span></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>((<span class="keyword">void</span>*)&amp;ret);</span><br><span class="line">    <span class="comment">//return (void*)&amp;ret;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">void</span> *ret = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, thead_fun, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_join</span>(tid, &amp;ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, *((<span class="keyword">int</span>*)ret));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="取消线程"><a href="#取消线程" class="headerlink" title="取消线程"></a>取消线程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread_fun</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread start \n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">        <span class="comment">// 调用pthread_testcancel，让内核去检测是否需要取消当前线程。</span></span><br><span class="line"><span class="built_in">pthread_testcancel</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *ret=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> iret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">pthread_t</span> tid;</span><br><span class="line"><span class="built_in">pthread_create</span>(&amp;tid,<span class="literal">NULL</span>,thread_fun,<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">pthread_cancel</span>(tid);<span class="comment">//取消线程</span></span><br><span class="line"><span class="built_in">pthread_join</span>(tid, &amp;ret);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread 3 exit code %d\n&quot;</span>, (<span class="keyword">int</span>)ret);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/chenwh_cn/article/details/117</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>简单pid控制</title>
    <link href="https://peitianyu.github.io/blog/2021/12/16/pid%E6%8E%A7%E5%88%B6/"/>
    <id>https://peitianyu.github.io/blog/2021/12/16/pid%E6%8E%A7%E5%88%B6/</id>
    <published>2021-12-16T04:30:12.000Z</published>
    <updated>2021-12-16T05:03:07.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p>[P、I、D参数分析及倒立摆心得_一念之间、-CSDN博客_pid 倒立摆](<a href="https://blog.csdn.net/tqs_1220/article/details/75249145?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=p%E8%A1%A8%E7%A4%BA">https://blog.csdn.net/tqs_1220/article/details/75249145?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=p表示</a> i表示 d表示&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-8-75249145.pc_search_em_sort&amp;spm=1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/qq_18454025/article/details/103443771?ops_request_misc=%7B%22request_id%22:%22163961834316780274185698%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163961834316780274185698&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-3-103443771.pc_search_em_sort&utm_term=pid&spm=1018.2226.3001.4187">PID控制算法的C语言实现_我的博客-CSDN博客_pid算法c程序</a></p><h1 id="PID作用"><a href="#PID作用" class="headerlink" title="PID作用"></a>PID作用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P-------作用是提高系统响应速度,过大会出现震荡---------------------------快速性</span><br><span class="line"></span><br><span class="line">I-------作用是消除静差----------------------------------------------准确性</span><br><span class="line"></span><br><span class="line">D-------作用是抑制震荡----------------------------------------------稳定性/预测性</span><br></pre></td></tr></table></figure><h1 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pid控制测试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// P:响应 I:稳差 D:预判</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PID_CTRL</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> kp;</span><br><span class="line">    <span class="keyword">float</span> ki;</span><br><span class="line">    <span class="keyword">float</span> kd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">pos_pid_control</span><span class="params">(<span class="keyword">float</span> target, <span class="keyword">float</span> current, struct PID_CTRL pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err_last;</span><br><span class="line">    <span class="keyword">float</span> out,err_sum=<span class="number">0</span>,err_d,err;</span><br><span class="line">    err = target - current;</span><br><span class="line">    err_sum += err;</span><br><span class="line">    err_d = err - err_last;</span><br><span class="line">    out = pid.kp * err + pid.ki * err_sum + pid.kd * err_d;</span><br><span class="line">    err_last = err;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">gain_pid_control</span><span class="params">(<span class="keyword">float</span> target, <span class="keyword">float</span> current, struct PID_CTRL pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err_last;</span><br><span class="line">    <span class="keyword">float</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> err = target - current;</span><br><span class="line">    out += pid.kp * (err-err_last) + pid.ki * err;</span><br><span class="line">    err_last = err;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_pos_pid_control</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PID_CTRL</span> <span class="title">pid</span>&#123;</span><span class="number">0.5</span>,<span class="number">0.1</span>,<span class="number">0.1</span>&#125;;</span><br><span class="line">    pid.kp = <span class="number">0.5</span>;</span><br><span class="line">    pid.ki = <span class="number">0.2</span>;</span><br><span class="line">    pid.kd = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> target = <span class="number">10.0</span>;</span><br><span class="line">    <span class="keyword">float</span> current = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        current += <span class="number">0.1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;target: %f, current: %f, out: %f\n&quot;</span>, target, current, <span class="built_in">pos_pid_control</span>(target, current, pid));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_gain_pid_control</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PID_CTRL</span> <span class="title">pid</span>&#123;</span><span class="number">0.5</span>,<span class="number">0.1</span>,<span class="number">0.1</span>&#125;;</span><br><span class="line">    pid.kp = <span class="number">0.5</span>;</span><br><span class="line">    pid.ki = <span class="number">0.2</span>;</span><br><span class="line">    pid.kd = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> target = <span class="number">10.0</span>;</span><br><span class="line">    <span class="keyword">float</span> current = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        current += <span class="number">0.1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;target: %f, current: %f, out: %f\n&quot;</span>, target, current, <span class="built_in">gain_pid_control</span>(target, current, pid));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test_pos_pid_control</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">test_gain_pid_control</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;[P、I、D参数分析及倒立摆心得_一念之间、-CSDN博客_pid 倒立摆](&lt;a href=&quot;https://blog</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>修改和校正树莓派时间</title>
    <link href="https://peitianyu.github.io/blog/2021/12/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%9B%B4%E6%96%B0%E4%B8%8E%E6%A0%A1%E6%AD%A3%E6%97%B6%E9%97%B4/"/>
    <id>https://peitianyu.github.io/blog/2021/12/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%9B%B4%E6%96%B0%E4%B8%8E%E6%A0%A1%E6%AD%A3%E6%97%B6%E9%97%B4/</id>
    <published>2021-12-16T04:30:12.000Z</published>
    <updated>2021-12-16T03:32:36.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/github_38111866/article/details/76057237">修改和校正树莓派时间_胡嘿嘿-CSDN博客_树莓派修改时间</a></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改时区</span></span><br><span class="line">sudo dpkg-reconfigure tzdata</span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择亚洲时区 Asia</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择上海时间 Shanghai</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查是否设置成功</span></span><br><span class="line">date</span><br><span class="line"><span class="meta">#</span><span class="bash"> 校正时间</span></span><br><span class="line">sudo ntpd -s -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制设置时间</span></span><br><span class="line">sudo date  --s=&quot;2017-07-25 10:43:00&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/github_38111866/article/detai</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>c语言的三种传参方式</title>
    <link href="https://peitianyu.github.io/blog/2021/12/15/c%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%89%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/"/>
    <id>https://peitianyu.github.io/blog/2021/12/15/c%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%89%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/</id>
    <published>2021-12-15T04:30:12.000Z</published>
    <updated>2021-12-15T08:45:10.864Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*a;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">man</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=a*a;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cubeByReference</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *a=*a * *a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">uint8_t</span>* *buffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> buf[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    *buffer = buf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">5</span>,b=<span class="number">5</span>,number=<span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fun1(a)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    man(b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    cubeByReference(&amp;number);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;number&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> *buf;</span><br><span class="line">    fun2(&amp;buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, buf[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; 10; ++i)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;%d\n&quot;, buf[i]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>镜像源</title>
    <link href="https://peitianyu.github.io/blog/2021/12/12/%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <id>https://peitianyu.github.io/blog/2021/12/12/%E9%95%9C%E5%83%8F%E6%BA%90/</id>
    <published>2021-12-12T04:30:12.000Z</published>
    <updated>2021-12-12T13:05:28.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p>华为镜像源: <a href="https://mirrors.huaweicloud.com/home">https://mirrors.huaweicloud.com/home</a></p><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></p><p>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></p><p>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;华为镜像源: &lt;a href=&quot;https://mirrors.huaweicloud.com/home&quot;&gt;https:</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>0ohm电阻作用</title>
    <link href="https://peitianyu.github.io/blog/2021/12/11/0ohm%E7%94%B5%E9%98%BB%E7%9B%AE%E7%9A%84/"/>
    <id>https://peitianyu.github.io/blog/2021/12/11/0ohm%E7%94%B5%E9%98%BB%E7%9B%AE%E7%9A%84/</id>
    <published>2021-12-11T04:30:12.000Z</published>
    <updated>2021-12-11T03:55:31.183Z</updated>
    
    <content type="html"><![CDATA[<p>零欧姆电阻的主要作用有如下：</p><p>1,在电路中没有任何功能，只是在PCB上为了调试方便或兼容设计等原因。<br>2,可以做跳线用，如果某段线路不用，直接不贴该电阻即可（不影响外观）。<br>3,在匹配电路参数不确定的时候，以0欧姆代替，实际调试的时候，确定参数，再以具体数值的元件代替。<br>4,想测某部分电路的耗电流的时候，可以去掉0ohm电阻，接上电流表，这样方便测耗电流。<br>5,在布线时,如果实在布不过去了,也可以加一个0欧的电阻。<br>6,在高频信号下，充当电感或电容。（与外部电路特性有关）电感用，主要是解决EMC问题。如地与地，电源和IC Pin间。<br>7,单点接地（指保护接地、工作接地、直流接地在设备上相互分开,各自成为独立系统。）<br>8,熔丝作用；<br>9，单点接地，只要是地，最终都要接到一起，然后入大地。如果不接在一起就是”浮地”，存在压差，容易积累电荷，造成静电。地是参考0电位，所有电压都是参考地得出的，地的标准要一致，故各种地应短接在一起。人们认为大地能够吸收所有电荷，始终维持稳定，是最终的地参考点。虽然有些板子没有接大地，但发电厂是接大地的，板子上的电源最终还是会返回发电厂入地。如果把模拟地和数字地大面积直接相连，会导致互相干扰。不短接又不妥，理由如上有四种方法解决此问题：1、用磁珠连接；2、用电容连接；3、用电感连接；4、用0欧姆电阻连接。磁珠的等效电路相当于带阻限波器，只对某个频点的噪声有显著抑制作用，使用时需要预先估计噪点频率，以便选用适当型号。对于频率不确定或无法预知的情况，磁珠不合。磁珠的等效电路相当于带阻限波器，只对某个频点的噪声有显著抑制作用，使用时需要预先估计噪点频率，以便选用适当型号。对于频率不确定或无法预知的情况，磁珠不合。电容隔直通交，造成浮地。电感体积大，杂散参数多，不稳定。0欧电阻相当于很窄的电流通路，能够有效地限制环路电流，使噪声得到抑制。电阻在所有频带上都有衰减作用(0欧电阻也有阻抗)，这点比磁珠强。<br>10，跨接时用于电流回路，当分割电地平面后，造成信号最短回流路径断裂，此时，信号回路不得不绕道，形成很大的环路面积，电场和磁场的影响就变强了，容易干扰/被干扰。在分割区上跨接0欧电阻，可以提供较短的回流路径，减小干扰。<br>11，配置电路，一般，产品上不要出现跳线和拨码开关。有时用户会乱动设置，易引起误会，为了减少维护费用，应用0欧电阻代替跳线等焊在板子。空置跳线在高频时相当于天线，用贴片电阻效果好。<br>12，其他用途，布线时跨线；调试/测试用；临时取代其他贴片器件；作为温度补偿器件；更多时候是出于EMC对策的需要。另外，0欧姆电阻比过孔的寄生电感小，而且过孔还会影响地平面（因为要挖孔）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;零欧姆电阻的主要作用有如下：&lt;/p&gt;
&lt;p&gt;1,在电路中没有任何功能，只是在PCB上为了调试方便或兼容设计等原因。&lt;br&gt;2,可以做跳线用，如果某段线路不用，直接不贴该电阻即可（不影响外观）。&lt;br&gt;3,在匹配电路参数不确定的时候，以0欧姆代替，实际调试的时候，确定参数，再</summary>
      
    
    
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/categories/sch/"/>
    
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/tags/sch/"/>
    
  </entry>
  
  <entry>
    <title>pip</title>
    <link href="https://peitianyu.github.io/blog/2021/12/11/pip/"/>
    <id>https://peitianyu.github.io/blog/2021/12/11/pip/</id>
    <published>2021-12-11T04:30:12.000Z</published>
    <updated>2021-12-11T03:58:55.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_43146445/article/details/85078685?ops_request_misc=%7B%22request_id%22:%22162487776816780265445855%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162487776816780265445855&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-85078685.pc_search_result_control_group&utm_term=pip%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">(8条消息) pip安装镜像_转载_qq_2711624322-CSDN博客_pip安装镜像</a></p><p><a href="https://blog.csdn.net/SimpleLikeMe/article/details/104480017?ops_request_misc=%7B%22request_id%22:%22162761016016780265417243%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162761016016780265417243&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-104480017.first_rank_v2_pc_rank_v29&utm_term=pip%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E9%95%9C%E5%83%8F%E6%BA%90&spm=1018.2226.3001.4187">设pip默认镜像源_SimpleLikeMe的博客-CSDN博客</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">临时使用</span></span><br><span class="line">pip install -i https://mirrors.ustc.edu.cn/pypi/web/simple package</span><br><span class="line"><span class="meta">#</span><span class="bash">配置成固定镜像</span></span><br><span class="line">pip config set global.index-url https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_43146445/article/detai</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>k60_can_bootloader</title>
    <link href="https://peitianyu.github.io/blog/2021/12/10/k60_can_bootloader/"/>
    <id>https://peitianyu.github.io/blog/2021/12/10/k60_can_bootloader/</id>
    <published>2021-12-10T04:30:12.000Z</published>
    <updated>2021-12-10T12:58:35.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考demo"><a href="#参考demo" class="headerlink" title="参考demo:"></a>参考demo:</h3><p><a href="https://github.com/peitianyu/k60_bootloader">peitianyu/k60_bootloader (github.com)</a></p><h3 id="main-c文件配置"><a href="#main-c文件配置" class="headerlink" title="main.c文件配置"></a>main.c文件配置</h3><h4 id="进入mian-c文件加入头文件并引用bootloader-entry-函数"><a href="#进入mian-c文件加入头文件并引用bootloader-entry-函数" class="headerlink" title="进入mian.c文件加入头文件并引用bootloader_entry()函数"></a>进入mian.c文件加入头文件并引用bootloader_entry()函数</h4><p><img src="https://s2.loli.net/2021/12/10/ywEp53mGsnHMbYc.png" alt="1.PNG"></p><h4 id="使用ID-0x10发送06-00-00-00-00-00-00-00，表示已经进入app"><a href="#使用ID-0x10发送06-00-00-00-00-00-00-00，表示已经进入app" class="headerlink" title="使用ID=0x10发送06 00 00 00 00 00 00 00，表示已经进入app"></a>使用ID=0x10发送06 00 00 00 00 00 00 00，表示已经进入app</h4><p><img src="https://s2.loli.net/2021/12/10/SvE7taw8y9ozPbh.png" alt="2.png"></p><h4 id="判断bootflag是否制一，若是，进入boot模式"><a href="#判断bootflag是否制一，若是，进入boot模式" class="headerlink" title="判断bootflag是否制一，若是，进入boot模式"></a>判断bootflag是否制一，若是，进入boot模式</h4><p><img src="https://s2.loli.net/2021/12/10/7pd6cl9bwtKPzFT.png" alt="3.png"></p><h3 id="canbus-c文件配置"><a href="#canbus-c文件配置" class="headerlink" title="canbus.c文件配置"></a>canbus.c文件配置</h3><h4 id="在canbus-c文件中引用头文件，并判断是否0x25发来数据，若有且data-data-0-1-则bootflag-1"><a href="#在canbus-c文件中引用头文件，并判断是否0x25发来数据，若有且data-data-0-1-则bootflag-1" class="headerlink" title="在canbus.c文件中引用头文件，并判断是否0x25发来数据，若有且data._data[0]==1,则bootflag=1"></a>在canbus.c文件中引用头文件，并判断是否0x25发来数据，若有且data._data[0]==1,则bootflag=1</h4><p><img src="https://s2.loli.net/2021/12/10/1nd3eMiXpUtBlAr.png" alt="4.png"></p><h3 id="keil配置"><a href="#keil配置" class="headerlink" title="keil配置"></a>keil配置</h3><h4 id="将hex烧录地址改为从0x6000开始"><a href="#将hex烧录地址改为从0x6000开始" class="headerlink" title="将hex烧录地址改为从0x6000开始"></a>将hex烧录地址改为从0x6000开始</h4><p><img src="https://s2.loli.net/2021/12/10/UhGvZDBPQqSeM9Y.png" alt="5.png"></p><h3 id="树莓派使用"><a href="#树莓派使用" class="headerlink" title="树莓派使用"></a>树莓派使用</h3><h4 id="bootloader-can0-xx-hex"><a href="#bootloader-can0-xx-hex" class="headerlink" title="./bootloader can0 xx.hex"></a>./bootloader can0 xx.hex</h4><p><img src="https://s2.loli.net/2021/12/10/wkOHJ3reb8AXVyT.png" alt="7.PNG"></p><h3 id="挂载win10"><a href="#挂载win10" class="headerlink" title="挂载win10"></a>挂载win10</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs //192.168.2.101/2021.04/CH-K-Lib/Project/1/bootloader/MDK/mk60d10/flash /k60 -o username=&quot;pty&quot;,password=&quot;pty123&quot;,sec=ntlmssp,rw</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;参考demo&quot;&gt;&lt;a href=&quot;#参考demo&quot; class=&quot;headerlink&quot; title=&quot;参考demo:&quot;&gt;&lt;/a&gt;参考demo:&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peitianyu/k60_bootloader</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>linux定时器</title>
    <link href="https://peitianyu.github.io/blog/2021/12/10/linux%E5%86%85%E6%A0%B8%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>https://peitianyu.github.io/blog/2021/12/10/linux%E5%86%85%E6%A0%B8%E5%AE%9A%E6%97%B6%E5%99%A8/</id>
    <published>2021-12-10T04:30:12.000Z</published>
    <updated>2021-12-11T01:59:23.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_34358365/article/details/94217782?ops_request_misc=%7B%22request_id%22:%22163914549216780255279840%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163914549216780255279840&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-94217782.nonecase&utm_term=linux%E5%AE%9A%E6%97%B6%E5%99%A8&spm=1018.2226.3001.4187">LInux下几种定时器的比较和使用_weixin_34358365的博客-CSDN博客</a></p><h1 id="1、sleep，usleep和nanosleep"><a href="#1、sleep，usleep和nanosleep" class="headerlink" title="1、sleep，usleep和nanosleep"></a>1、<a href="http://www.jb51.net/LINUXjishu/109403.html">sleep，usleep和nanosleep</a></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COUNT 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MILLION 1000000L</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">slptm</span>;</span></span><br><span class="line">    <span class="keyword">long</span>   tdif;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tend</span>, <span class="title">tstart</span>;</span> </span><br><span class="line">    slptm.tv_sec = <span class="number">0</span>;</span><br><span class="line">    slptm.tv_nsec = <span class="number">1000</span>;      <span class="comment">//1000 ns = 1 us</span></span><br><span class="line">    <span class="comment">//struct sched_param param;    </span></span><br><span class="line">    <span class="comment">//param.sched_priority = 0;</span></span><br><span class="line">    <span class="comment">//sched_setscheduler(getpid(), SCHED_FIFO, &amp;param);</span></span><br><span class="line">    <span class="keyword">if</span> (gettimeofday(&amp;tstart, <span class="literal">NULL</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get start time\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; COUNT; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nanosleep(&amp;slptm, <span class="literal">NULL</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;Failed to nanosleep&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gettimeofday(&amp;tend, <span class="literal">NULL</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get end time\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tdif = MILLION * (tend.tv_sec - tstart.tv_sec) + (tend.tv_usec - tstart.tv_usec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;nanosleep() time is %ld us\n&quot;</span>, tdif/COUNT);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、使用信号量SIGALRM-alarm-只能秒级"><a href="#2、使用信号量SIGALRM-alarm-只能秒级" class="headerlink" title="2、使用信号量SIGALRM + alarm(),只能秒级"></a>2、使用信号量SIGALRM + alarm(),只能秒级</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(SIGALRM == sig)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;timer\n&quot;</span>);</span><br><span class="line">                alarm(<span class="number">1</span>);       <span class="comment">//重新继续定时1s</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        signal(SIGALRM, timer); <span class="comment">//注册安装信号</span></span><br><span class="line">        alarm(<span class="number">1</span>);       <span class="comment">//触发定时器</span></span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、使用RTC-系统硬件提供的RTC，精度可调"><a href="#3、使用RTC-系统硬件提供的RTC，精度可调" class="headerlink" title="3、使用RTC(系统硬件提供的RTC，精度可调)"></a>3、使用RTC(系统硬件提供的RTC，精度可调)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/rtc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> data = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> retval = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fd = open (<span class="string">&quot;/dev/rtc&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(errno);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*Set the freq as 4Hz*/</span></span><br><span class="line">        <span class="keyword">if</span>(ioctl(fd, RTC_IRQP_SET, <span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;ioctl(RTC_IRQP_SET)&quot;</span>);</span><br><span class="line">                close(fd);</span><br><span class="line">                <span class="built_in">exit</span>(errno);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* Enable periodic interrupts */</span></span><br><span class="line">        <span class="keyword">if</span>(ioctl(fd, RTC_PIE_ON, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;ioctl(RTC_PIE_ON)&quot;</span>);</span><br><span class="line">                close(fd);</span><br><span class="line">                <span class="built_in">exit</span>(errno);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(read(fd, &amp;data, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">                        close(fd);</span><br><span class="line">                        <span class="built_in">exit</span>(errno);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;timer\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* Disable periodic interrupts */</span></span><br><span class="line">        ioctl(fd, RTC_PIE_OFF, <span class="number">0</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、使用select"><a href="#4、使用select" class="headerlink" title="4、使用select()"></a>4、使用select()</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Callback_1</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// Callback Function 1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, this is Callback_1: x = %d \n&quot;</span>, x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTimer</span><span class="params">(<span class="keyword">int</span> seconds, <span class="keyword">int</span> mseconds,T arg,<span class="keyword">int</span> (*callback)(T))</span> <span class="comment">// Set Timer</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">temp</span>;</span></span><br><span class="line">        temp.tv_sec = seconds;</span><br><span class="line">        temp.tv_usec = mseconds;</span><br><span class="line">        select(<span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;temp);</span><br><span class="line">        callback(arg);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> last_time;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">get_diff_time</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">        gettimeofday(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">float</span> time = tv.tv_sec%<span class="number">10</span> + tv.tv_usec / <span class="number">1000000.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (time &lt; last_time)</span><br><span class="line">                time += <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">float</span> time_diff = time - last_time;</span><br><span class="line">        last_time = time;</span><br><span class="line">        <span class="keyword">return</span> time_diff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">float</span> time_diff = get_diff_time();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;time_diff = %f \n&quot;</span>, time_diff);</span><br><span class="line">        setTimer(<span class="number">1</span>, <span class="number">0</span>, a, Callback_1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_34358365/article/detai</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ros2安装</title>
    <link href="https://peitianyu.github.io/blog/2021/12/10/ros2%E5%AE%89%E8%A3%85/"/>
    <id>https://peitianyu.github.io/blog/2021/12/10/ros2%E5%AE%89%E8%A3%85/</id>
    <published>2021-12-10T04:30:12.000Z</published>
    <updated>2021-12-13T14:04:24.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/qq_44717317/article/details/104547474">Ubuntu18.04 安装ROS Melodic &amp;&amp; Ros2 Dashing踩坑笔记_LukeyAlvin的博客-CSDN博客_ubuntu18安装ros2</a></p><p><a href="http://fishros.com/#/fish_home">鱼香ROS (fishros.com)</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于ros2很多并不完善,所以采用ros1+ros2的方式实现,这里采用常规+fishros的方式实现安装.最后采用在初始化使用shell脚本选择使用ros版本</p><h1 id="Ros1安装"><a href="#Ros1安装" class="headerlink" title="Ros1安装"></a>Ros1安装</h1><p><a href="https://peitianyu.github.io/blog/2021/10/19/ros%E5%AE%89%E8%A3%85/">ros安装 | 某飞行员的随笔 (peitianyu.github.io)</a></p><h1 id="Ros2安装"><a href="#Ros2安装" class="headerlink" title="Ros2安装"></a>Ros2安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置UTF-8编码</span></span><br><span class="line">sudo locale-gen en_US en_US.UTF-8</span><br><span class="line">sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新软件源</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt install curl gnupg2 lsb-release</span><br><span class="line">curl http://repo.ros2.org/repos.key | sudo apt-key add -</span><br><span class="line">sudo sh -c &#x27;echo &quot;deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros2-latest.list&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; sudo bash fishros</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过如下命令添加到.bashrc(注意这里如果需要使用两个版本,这一步不需要设置)</span></span><br><span class="line">echo &quot;source /opt/ros/dashing/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> RWM功能</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ros-dashing-rmw-opensplice-cpp # for OpenSplice</span><br><span class="line">sudo apt install ros-dashing-rmw-connext-cpp # for RTI Connext (requires license agreement)</span><br><span class="line"><span class="meta">#</span><span class="bash"> ros1与ros2通信</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ros-dashing-ros1-bridge</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装编译工具</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt install -y \</span><br><span class="line">build-essential \</span><br><span class="line">cmake \</span><br><span class="line">git \</span><br><span class="line">python3-colcon-common-extensions \</span><br><span class="line">python3-pip \</span><br><span class="line">python-rosdep \</span><br><span class="line">python3-vcstool \</span><br><span class="line">wget</span><br><span class="line"><span class="meta">#</span><span class="bash"> install some pip packages needed <span class="keyword">for</span> testing</span></span><br><span class="line">sudo -H python3 -m pip install -U \</span><br><span class="line">argcomplete \</span><br><span class="line">flake8 \</span><br><span class="line">flake8-blind-except \</span><br><span class="line">flake8-builtins \</span><br><span class="line">flake8-class-newline \</span><br><span class="line">flake8-comprehensions \</span><br><span class="line">flake8-deprecated \</span><br><span class="line">flake8-docstrings \</span><br><span class="line">flake8-import-order \</span><br><span class="line">flake8-quotes \</span><br><span class="line">pytest-repeat \</span><br><span class="line">pytest-rerunfailures</span><br><span class="line"><span class="meta">#</span><span class="bash"> [Ubuntu 16.04] install extra packages not available or recent enough on Xenial</span></span><br><span class="line">python3 -m pip install -U \</span><br><span class="line">pytest \</span><br><span class="line">pytest-cov \</span><br><span class="line">pytest-runner \</span><br><span class="line">setuptools</span><br><span class="line"><span class="meta">#</span><span class="bash"> install Fast-RTPS dependencies</span></span><br><span class="line">sudo apt install --no-install-recommends -y \</span><br><span class="line">libasio-dev \</span><br><span class="line">libtinyxml2-dev</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">mkdir  ~/ros2_ws</span><br><span class="line">cd /ros2_ws</span><br><span class="line">git clone  https://ghproxy.com/https://github.com/zhangrelay/ros2_tutorials</span><br><span class="line">cd ros2_tutorials</span><br><span class="line">colcon build</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量(也可以将之放入.bashrc中)</span></span><br><span class="line">source /install/setup.sh </span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一个终端</span></span><br><span class="line">cd /ros_ws/ros2_tutorials/install</span><br><span class="line">ros2 run demo_nodes_cpp listener</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个终端</span></span><br><span class="line">ros2 run demo_nodes_cpp talker</span><br></pre></td></tr></table></figure><h1 id="使用多个ros版本"><a href="#使用多个ros版本" class="headerlink" title="使用多个ros版本"></a>使用多个ros版本</h1><h2 id="保存一个脚本文件-使用前运行"><a href="#保存一个脚本文件-使用前运行" class="headerlink" title="保存一个脚本文件,使用前运行"></a>保存一个脚本文件,使用前运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">source</span> /opt/ros/melodic/setup.bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">source</span> /opt/ros/dashing/setup.bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ROS 1.0 melodic or ROS 2.0 Dashing</span></span><br><span class="line">echo Hello alvin! ROS 1.0 or ROS 2.0? 1=Melodic 2=Dashing </span><br><span class="line">read ROS</span><br><span class="line">if (($ROS==1));then</span><br><span class="line">source /opt/ros/melodic/setup.bash</span><br><span class="line">echo &quot;Melodic&quot;</span><br><span class="line">elif (($ROS==2));then</span><br><span class="line">source /opt/ros/dashing/setup.bash</span><br><span class="line">echo &quot;Dashing&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;Non-ROS&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="注意-由于使用不通ros-因此安装时注意将之前保存在-bashrc中的"><a href="#注意-由于使用不通ros-因此安装时注意将之前保存在-bashrc中的" class="headerlink" title="!注意:由于使用不通ros,因此安装时注意将之前保存在.bashrc中的"></a>!注意:由于使用不通ros,因此安装时注意将之前保存在.bashrc中的</h2><h2 id="source-opt-ros-melodic-setup-bash"><a href="#source-opt-ros-melodic-setup-bash" class="headerlink" title="# source /opt/ros/melodic/setup.bash"></a><code># source /opt/ros/melodic/setup.bash</code></h2><p><code># source /opt/ros/dashing/setup.bash</code>注释掉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44717317/article/details/1</summary>
      
    
    
    
    <category term="ros" scheme="https://peitianyu.github.io/blog/categories/ros/"/>
    
    
    <category term="ros" scheme="https://peitianyu.github.io/blog/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>树莓派CAN</title>
    <link href="https://peitianyu.github.io/blog/2021/12/10/%E6%A0%91%E8%8E%93%E6%B4%BECAN/"/>
    <id>https://peitianyu.github.io/blog/2021/12/10/%E6%A0%91%E8%8E%93%E6%B4%BECAN/</id>
    <published>2021-12-10T04:30:12.000Z</published>
    <updated>2022-01-13T06:37:03.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/j353838430/article/details/119486631?ops_request_misc=%7B%22request_id%22:%22163877530616780271559996%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163877530616780271559996&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-119486631.pc_search_mgc_flag&utm_term=%E6%A0%91%E8%8E%93%E6%B4%BEmcp2515&spm=1018.2226.3001.4187">树莓派CAN通讯教程 - MCP2515_j353838430的博客-CSDN博客_树莓派can通信</a></p><p><a href="https://blog.csdn.net/csshuke/article/details/113186248?ops_request_misc=&request_id=&biz_id=102&utm_term=mcp2515%E5%8E%9F%E7%90%86%E5%9B%BE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-113186248.pc_search_mgc_flag&spm=1018.2226.3001.4187">(86条消息) SPI协议、MCP2515裸机驱动详解—-主流SPI总线接口原理_csshuke的专栏-CSDN博客_mcp2515 spi极性</a></p><p>mcp2515模块资料:<a href="http://pan.baidu.com/s/1hsi3I4k">http://pan.baidu.com/s/1hsi3I4k</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>使用mcp2515实现的spi转can通信</p><h1 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h1><p><img src="https://s2.loli.net/2021/12/10/UYg8ehqIX3EOAkb.png" alt="image-20211210213025816.png"></p><p>需要注意的是这里的片选,也就是说可以通过片选CS信号实现一个spi转多个can通信,INT引脚用于中断缓存数据,当接收到数据时会将数据先放入缓冲区</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装cantools</span></span><br><span class="line">sudo apt install can-utils</span><br><span class="line">pip3 install cantools</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检测挂载</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否进入<span class="built_in">read</span>状态</span></span><br><span class="line">sudo ip -s -d link show can0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使能树莓派SPI并加载MCP2515内核驱动</span></span><br><span class="line">dtparam=spi=on</span><br><span class="line">dtoverlay=mcp2515-can0,oscillator=16000000,interrupt=25</span><br><span class="line">dtoverlay=spi1-1cs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">sudo reboot -h now</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭can0</span></span><br><span class="line">sudo ip link set can0 down</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置波特率</span></span><br><span class="line">sudo ip link set can0 type can bitrate 1000000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启can0</span></span><br><span class="line">sudo ip link set can0 up</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">sudo ip -s -d link show can0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 接收报文</span></span><br><span class="line">candump any,0:0,#FFFFFFFF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 过滤</span></span><br><span class="line">candump can0,620:1fffffff,255:7ff</span><br><span class="line"><span class="meta">#</span><span class="bash"> 发送报文</span></span><br><span class="line">cansend can0 123#1122334455667788</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置回环 波特率 250K ,用于测试can通路,在没有其它硬件连接测试的情况下，可以设定成回环，自发自收</span></span><br><span class="line">sudo ip link set can0 type can bitrate 500000 loopback on</span><br></pre></td></tr></table></figure><h1 id="C语言使用"><a href="#C语言使用" class="headerlink" title="C语言使用"></a>C语言使用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/can.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/can/raw.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> command <span class="meta-string">&quot;ip link set can0 type can bitrate 1000000&quot;</span><span class="comment">//将CAN0波特率设置为500K</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> up <span class="meta-string">&quot;ifconfig can0 up&quot;</span><span class="comment">//打开CAN0</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> down <span class="meta-string">&quot;ifconfig can0 down&quot;</span><span class="comment">//关闭CAN0</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">can_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//关闭CAN设备，设置波特率后，重新打开CAN设备</span></span><br><span class="line">    <span class="built_in">system</span>(down);</span><br><span class="line">    <span class="built_in">system</span>(command);</span><br><span class="line">    <span class="built_in">system</span>(up);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">can_send</span><span class="params">(can_frame frame)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, nbytes;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_can</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">ifr</span>;</span></span><br><span class="line">    <span class="comment">//创建套接字</span></span><br><span class="line">    s = <span class="built_in">socket</span>(PF_CAN, SOCK_RAW, CAN_RAW);</span><br><span class="line">    <span class="built_in">strcpy</span>(ifr.ifr_name, <span class="string">&quot;can0&quot;</span> );</span><br><span class="line">    <span class="comment">//指定 can0 设备</span></span><br><span class="line">    <span class="built_in">ioctl</span>(s, SIOCGIFINDEX, &amp;ifr); </span><br><span class="line">    addr.can_family = AF_CAN;</span><br><span class="line">    addr.can_ifindex = ifr.ifr_ifindex;</span><br><span class="line">    <span class="comment">//将套接字与 can0 绑定</span></span><br><span class="line">    <span class="built_in">bind</span>(s, (struct sockaddr *)&amp;addr, <span class="built_in"><span class="keyword">sizeof</span></span>(addr));</span><br><span class="line">    <span class="comment">//发送 frame[0]</span></span><br><span class="line">    nbytes = <span class="built_in">write</span>(s, &amp;frame, <span class="built_in"><span class="keyword">sizeof</span></span>(frame));</span><br><span class="line">    <span class="keyword">if</span>(nbytes != <span class="built_in"><span class="keyword">sizeof</span></span>(frame))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Send Error frame[0]\n!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">can_receive</span><span class="params">(struct can_frame * r_frame,<span class="keyword">unsigned</span> <span class="keyword">int</span> filter_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, nbytes = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_can</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">ifr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_frame</span> <span class="title">frame</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_filter</span> <span class="title">rfilter</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initial fram</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;frame,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(can_frame));</span><br><span class="line">    <span class="comment">//创建套接字</span></span><br><span class="line">    s = <span class="built_in">socket</span>(PF_CAN, SOCK_RAW, CAN_RAW);</span><br><span class="line">    <span class="built_in">strcpy</span>(ifr.ifr_name, <span class="string">&quot;can0&quot;</span> );</span><br><span class="line">    <span class="comment">//指定 can0 设备</span></span><br><span class="line">    <span class="built_in">ioctl</span>(s, SIOCGIFINDEX, &amp;ifr); </span><br><span class="line">    addr.can_family = AF_CAN;</span><br><span class="line">    addr.can_ifindex = ifr.ifr_ifindex;</span><br><span class="line">    <span class="comment">//将套接字与 can0 绑定</span></span><br><span class="line">    <span class="built_in">bind</span>(s, (struct sockaddr *)&amp;addr, <span class="built_in"><span class="keyword">sizeof</span></span>(addr));</span><br><span class="line">    <span class="comment">//设置过滤规则，取消当前注释为禁用过滤规则，即不接收所有报文，</span></span><br><span class="line">    <span class="comment">// 不设置此项（即如当前代码被注释）为接收所有ID的报文。</span></span><br><span class="line">    <span class="keyword">if</span> (filter_id != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rfilter.can_id   = <span class="number">0x123</span>;</span><br><span class="line">        <span class="comment">// CAN_EFF_MASK | CAN_SFF_MASK</span></span><br><span class="line">        rfilter.can_mask = CAN_SFF_MASK;</span><br><span class="line">        <span class="built_in">setsockopt</span>(s, SOL_CAN_RAW, CAN_RAW_FILTER, &amp;rfilter, <span class="built_in"><span class="keyword">sizeof</span></span>(rfilter));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (nbytes == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//接收总线上的报文保存在frame中</span></span><br><span class="line">        nbytes = <span class="built_in">read</span>(s, &amp;frame, <span class="built_in"><span class="keyword">sizeof</span></span>(frame));</span><br><span class="line">    &#125;</span><br><span class="line">    *r_frame = frame;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MSG_DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the nbytes:%d\n&quot;</span>, nbytes);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length:%d&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(frame));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ID=0x%X DLC=%d\n&quot;</span>, frame.can_id, frame.can_dlc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data0=0x%02x\n&quot;</span>,frame.data[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data1=0x%02x\n&quot;</span>,frame.data[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data2=0x%02x\n&quot;</span>,frame.data[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data3=0x%02x\n&quot;</span>,frame.data[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data4=0x%02x\n&quot;</span>,frame.data[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data5=0x%02x\n&quot;</span>,frame.data[<span class="number">5</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data6=0x%02x\n&quot;</span>,frame.data[<span class="number">6</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data7=0x%02x\n&quot;</span>,frame.data[<span class="number">7</span>]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">led_ctl_on</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_frame</span> <span class="title">frame</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;frame, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(can_frame));</span><br><span class="line">    frame.can_id = <span class="number">0x101</span>;</span><br><span class="line">    frame.can_dlc = <span class="number">8</span>;</span><br><span class="line">    frame.data[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">can_send</span>(frame);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">led_ctl_off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_frame</span> <span class="title">frame</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;frame, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(can_frame));</span><br><span class="line">    frame.can_id = <span class="number">0x101</span>;</span><br><span class="line">    frame.can_dlc = <span class="number">8</span>;</span><br><span class="line">    frame.data[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">can_send</span>(frame);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">can_get_vol</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> vol_vle = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">can_frame</span> <span class="title">frame</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;frame, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(can_frame));</span><br><span class="line">    <span class="comment">// wait until can frame 100 received</span></span><br><span class="line">    <span class="built_in">can_receive</span>(&amp;frame,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;###############################\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length:%d&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(frame));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ID=0x%X DLC=%d\n&quot;</span>, frame.can_id, frame.can_dlc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data0=0x%02x\n&quot;</span>,frame.data[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data1=0x%02x\n&quot;</span>,frame.data[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data2=0x%02x\n&quot;</span>,frame.data[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data3=0x%02x\n&quot;</span>,frame.data[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data4=0x%02x\n&quot;</span>,frame.data[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data5=0x%02x\n&quot;</span>,frame.data[<span class="number">5</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data6=0x%02x\n&quot;</span>,frame.data[<span class="number">6</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data7=0x%02x\n&quot;</span>,frame.data[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">    vol_vle = (<span class="keyword">float</span>)frame.data[<span class="number">0</span>]/<span class="number">50</span>;</span><br><span class="line">    <span class="keyword">return</span> vol_vle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> control_str[<span class="number">15</span>]; </span><br><span class="line">    <span class="keyword">float</span> vol_val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can_control service_type\n&quot;</span></span><br><span class="line">            <span class="string">&quot;    example: ./can_control led_off/led_on/get_vol\n&quot;</span></span><br><span class="line">            );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(control_str,argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// debug</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Argc : %d\n&quot;</span>,argc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Argv : %s\n , %s\n&quot;</span>,argv[<span class="number">0</span>], argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// can_init();</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(control_str,<span class="string">&quot;led_off&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">led_ctl_off</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(control_str,<span class="string">&quot;led_on&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">led_ctl_on</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(control_str,<span class="string">&quot;get_vol&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vol_val = <span class="built_in">can_get_vol</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Voltage is : %5.2f V\n&quot;</span>, vol_val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Do nothing */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/j353838430/article/details/11</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/tags/sch/"/>
    
  </entry>
  
</feed>
