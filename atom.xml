<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某飞行员的随笔</title>
  
  
  <link href="https://peitianyu.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://peitianyu.github.io/blog/"/>
  <updated>2022-05-11T05:56:40.442Z</updated>
  <id>https://peitianyu.github.io/blog/</id>
  
  <author>
    <name>某飞行员</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>addr2line</title>
    <link href="https://peitianyu.github.io/blog/2022/05/11/addr2line/"/>
    <id>https://peitianyu.github.io/blog/2022/05/11/addr2line/</id>
    <published>2022-05-11T04:30:12.000Z</published>
    <updated>2022-05-11T05:56:40.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/qq_23101811/article/details/122184548">(132条消息) addr2line 输出为?:0可能原因_qq_23101811的博客-CSDN博客</a> </p><p> <a href="https://blog.csdn.net/lhf_tiger/article/details/9088609">(132条消息) addr2line命令_残阳的博客-CSDN博客_addr2line命令用法</a> </p><p> <a href="https://blog.csdn.net/carefree2005/article/details/120737841?ops_request_misc=%7B%22request_id%22:%22165224592316781683954060%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165224592316781683954060&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-120737841-null-null.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&utm_term=dmesg&spm=1018.2226.3001.4187">(132条消息) Linux命令之dmesg命令_浪子吴天的博客-CSDN博客_dmesg</a> </p><h1 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译注意使用-g模式编译</span></span><br><span class="line">gcc -o <span class="built_in">test</span> -g test.c</span><br><span class="line"><span class="comment">#清除内核环形缓冲区(ring butter)</span></span><br><span class="line">dmesg -C </span><br><span class="line"><span class="comment">#执行文件</span></span><br><span class="line">./<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 查看所有开机日志信息</span></span><br><span class="line">dmesg</span><br><span class="line">[3540868.730553] traps: <span class="built_in">test</span>[4331] <span class="built_in">trap</span> divide error ip:55d347e5067b sp:7ffdb3499f50 error:0</span><br><span class="line">[3540868.730567]  <span class="keyword">in</span> <span class="built_in">test</span>[55d347e50000+1000]</span><br><span class="line"><span class="comment"># 计算ip</span></span><br><span class="line">ip: 55d347e5067b - 55d347e50000 = 067b</span><br><span class="line"><span class="comment"># addr2line -e test 067b</span></span><br><span class="line">/var/testhelper/programsymbols/tes.c:8</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/qq_23101811/article/details/</summary>
      
    
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/categories/tool/"/>
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>c++查看内存使用</title>
    <link href="https://peitianyu.github.io/blog/2022/05/09/C++%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2022/05/09/C++%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-09T04:30:12.000Z</published>
    <updated>2022-05-10T01:14:32.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/zjl_1026_2001/article/details/2294072?ops_request_misc=%7B%22request_id%22:%22165208801016781667894376%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165208801016781667894376&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-2294072-null-null.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&utm_term=/proc/self/statm&spm=1018.2226.3001.4187">(131条消息) PROC系列之—/proc/pid/statm_沙漠里的海豚的博客-CSDN博客_proc statm</a> </p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat  /proc/self/statm</span><br><span class="line">654 57 44 0 0 334 0</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CPU 以及CPU0。。。的每行的每个参数意思（以第一行为例）为：</span><br><span class="line">参数 解释 /proc/ /status</span><br><span class="line">Size (pages) 任务虚拟地址空间的大小 VmSize/4</span><br><span class="line">Resident(pages) 应用程序正在使用的物理内存的大小 VmRSS/4</span><br><span class="line">Shared(pages) 共享页数 0</span><br><span class="line">Trs(pages) 程序所拥有的可执行虚拟内存的大小 VmExe/4</span><br><span class="line">Lrs(pages) 被映像到任务的虚拟内存空间的库的大小 VmLib/4</span><br><span class="line">Drs(pages) 程序数据段和用户态的栈的大小 （VmData+ VmStk ）4</span><br><span class="line">dt(pages) 0 </span><br></pre></td></tr></table></figure><h1 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dump_mem_usage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* f = <span class="built_in">fopen</span>(<span class="string">&quot;/proc/self/statm&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">char</span>   str[<span class="number">300</span>];</span><br><span class="line">    <span class="keyword">size_t</span> n = <span class="built_in">fread</span>(str, <span class="number">1</span>, <span class="number">200</span>, f);</span><br><span class="line">    str[n]   = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;MEM: %s\n&quot;</span>, str);</span><br><span class="line">    <span class="built_in">fclose</span>(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/zjl_1026_2001/article/detail</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>nanoflann</title>
    <link href="https://peitianyu.github.io/blog/2022/05/09/nanoflann/"/>
    <id>https://peitianyu.github.io/blog/2022/05/09/nanoflann/</id>
    <published>2022-05-09T04:30:12.000Z</published>
    <updated>2022-05-10T01:28:29.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/u013019296/article/details/109377104">(131条消息) nanoflann库_Being_young的博客-CSDN博客</a> </p><p> <a href="https://github.com/jlblancoc/nanoflann">nanoflann: a C++11 header-only library for Nearest Neighbor (NN) search with KD-trees </a> </p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.构建kd-tree索引</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">my_kd_tree_t</span> = nanoflann::KDTreeSingleIndexAdaptor&lt;</span><br><span class="line">        nanoflann::L2_Simple_Adaptor&lt;<span class="keyword">num_t</span>, PointCloud&lt;<span class="keyword">num_t</span>&gt;&gt;,</span><br><span class="line">        PointCloud&lt;<span class="keyword">num_t</span>&gt;, <span class="number">3</span> <span class="comment">/* dim */</span></span><br><span class="line">        &gt;;</span><br><span class="line"><span class="function"><span class="keyword">my_kd_tree_t</span> <span class="title">index</span><span class="params">(<span class="number">3</span> <span class="comment">/*dim*/</span>, cloud, &#123;<span class="number">10</span> <span class="comment">/* max leaf */</span>&#125;)</span></span>;</span><br><span class="line"><span class="comment">// 2.knn 检索</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span>                   num_results = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">size_t</span>                         ret_index;</span><br><span class="line"><span class="keyword">num_t</span>                          out_dist_sqr;</span><br><span class="line"><span class="function">nanoflann::KNNResultSet&lt;<span class="keyword">num_t</span>&gt; <span class="title">resultSet</span><span class="params">(num_results)</span></span>;</span><br><span class="line">resultSet.<span class="built_in">init</span>(&amp;ret_index, &amp;out_dist_sqr);</span><br><span class="line">index.<span class="built_in">findNeighbors</span>(resultSet, &amp;query_pt[<span class="number">0</span>], nanoflann::<span class="built_in">SearchParams</span>(<span class="number">10</span>));</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;knnSearch(nn=&quot;</span> &lt;&lt; num_results &lt;&lt; <span class="string">&quot;): \n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ret_index=&quot;</span> &lt;&lt; ret_index</span><br><span class="line">          &lt;&lt; <span class="string">&quot; out_dist_sqr=&quot;</span> &lt;&lt; out_dist_sqr &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/u013019296/article/details/1</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>c++时间操作</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/C++11%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/C++11%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-05T12:01:51.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/u012010054/article/details/81259135?ops_request_misc=%7B%22request_id%22:%22165173467916781683972413%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165173467916781683972413&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81259135.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=clock_gettime&spm=1018.2226.3001.4187">(131条消息) clock_gettime 函数笔记_神秘的羔羊的博客-CSDN博客_clock_gettime</a></p><h1 id="clock-gettime"><a href="#clock-gettime" class="headerlink" title="clock_gettime"></a>clock_gettime</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clock_gettime</span><span class="params">(<span class="keyword">clockid_t</span> clk_id,struct timespec *tp)</span></span>;</span><br><span class="line"><span class="comment">//clk_id : 检索和设置的clk_id指定的时钟时间。</span></span><br><span class="line"><span class="comment">//CLOCK_REALTIME:系统实时时间,随系统实时时间改变而改变,即从UTC1970-1-1 0:0:0开始计时,中间时刻如果系统时间被用户改成其他,则对应的时间相应改变。</span></span><br><span class="line"><span class="comment">//CLOCK_MONOTONIC:从系统启动这一刻起开始计时,不受系统时间被用户改变的影响。</span></span><br><span class="line"><span class="comment">//CLOCK_PROCESS_CPUTIME_ID:本进程到当前代码系统CPU花费的时间。</span></span><br><span class="line"><span class="comment">//CLOCK_THREAD_CPUTIME_ID:本线程到当前代码系统CPU花费的时间。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">time_t</span> tv_sec; <span class="comment">/* 秒*/</span></span><br><span class="line">    <span class="keyword">long</span> tv_nsec; <span class="comment">/* 纳秒*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">time1</span> =</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">time2</span> =</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> temp;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">clock_gettime</span>(CLOCK_REALTIME, &amp;time1);      </span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">clock_gettime</span>(CLOCK_REALTIME, &amp;time2);   </span><br><span class="line">    temp = (time2.tv_nsec - time1.tv_nsec) / <span class="number">1000000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;time = %f ms\n&quot;</span>, temp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u012010054/article/details/81</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>c++那些事</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/C++%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/C++%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-05T13:45:39.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/Light-City/CPlusPlusThings">Light-City/CPlusPlusThings: C++那些事 (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Light-City/CPlusPlusThings&quot;&gt;Ligh</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>c++智能指针</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/C++11%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/C++11%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-05T11:33:17.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://wentian.blog.csdn.net/article/details/109566645?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&utm_relevant_index=2"> C++自学24:唯一智能指针</a></p><p><a href="https://blog.csdn.net/qfturauyls/article/details/106772813?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_antiscanv2&spm=1001.2101.3001.4242.1&utm_relevant_index=3">尽量使用std::make_unique和std::make_shared而不直接使用new（总结)</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;<span class="keyword">int</span>&gt; a = std::make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">666</span>); <span class="comment">// 智能指针具有唯一性</span></span><br><span class="line">std::unique_ptr&lt;<span class="keyword">int</span>&gt; b = std::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">666</span>);</span><br><span class="line"><span class="comment">// create std::initializer_list</span></span><br><span class="line"><span class="keyword">auto</span> initList = &#123; <span class="number">10</span>, <span class="number">20</span> &#125;;</span><br><span class="line"><span class="comment">// create std::vector using std::initializer_list ctor</span></span><br><span class="line"><span class="keyword">auto</span> spv = std::make_shared&lt;std::vector&lt;<span class="keyword">int</span>&gt;&gt;(initList);</span><br></pre></td></tr></table></figure><h1 id="make-queue"><a href="#make-queue" class="headerlink" title="make_queue"></a>make_queue</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, z;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// following constructor is no longer needed since C++20</span></span><br><span class="line">    <span class="built_in">Vec3</span>(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>, <span class="keyword">int</span> z = <span class="number">0</span>) <span class="keyword">noexcept</span> : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">z</span>(z) &#123; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="keyword">const</span> Vec3&amp; v) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; <span class="string">&quot;&#123; x=&quot;</span> &lt;&lt; v.x &lt;&lt; <span class="string">&quot;, y=&quot;</span> &lt;&lt; v.y &lt;&lt; <span class="string">&quot;, z=&quot;</span> &lt;&lt; v.z &lt;&lt; <span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Use the default constructor.</span></span><br><span class="line">    std::unique_ptr&lt;Vec3&gt; v1 = std::make_unique&lt;Vec3&gt;();</span><br><span class="line">    <span class="comment">// Use the constructor that matches these arguments</span></span><br><span class="line">    std::unique_ptr&lt;Vec3&gt; v2 = std::make_unique&lt;Vec3&gt;(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// Create a unique_ptr to an array of 5 elements</span></span><br><span class="line">    std::unique_ptr&lt;Vec3[]&gt; v3 = std::make_unique&lt;Vec3[]&gt;(<span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;make_unique&lt;Vec3&gt;():      &quot;</span> &lt;&lt; *v1 &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;make_unique&lt;Vec3&gt;(0,1,2): &quot;</span> &lt;&lt; *v2 &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;make_unique&lt;Vec3[]&gt;(5):   &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; std::<span class="built_in">setw</span>(i ? <span class="number">30</span> : <span class="number">0</span>) &lt;&lt; v3[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://wentian.blog.csdn.net/article/details/10956</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Singleton</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/Singleton_C++/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/Singleton_C++/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-09T09:09:09.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://github.com/pezy/DesignPatterns/blob/master/Singleton/main.cpp">DesignPatterns (github.com)</a> </p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>主要用于全局变量(单例模式)</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">President</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> President &amp;<span class="title">GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> President instance;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">President</span>(<span class="keyword">const</span> President &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">  President &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> President &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;I am the president of the United States of America.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">President</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> President &amp;president1 = President::<span class="built_in">GetInstance</span>();</span><br><span class="line">  <span class="keyword">const</span> President &amp;president2 = President::<span class="built_in">GetInstance</span>();</span><br><span class="line"></span><br><span class="line">  president1.<span class="built_in">Speak</span>();</span><br><span class="line">  president2.<span class="built_in">Speak</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>(&amp;president1 == &amp;president2); <span class="comment">// same address, point to same object.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://github.com/pezy/DesignPatterns/blob/master</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>lambda表达式</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-05T11:43:54.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_57023347/article/details/120999277?ops_request_misc=&request_id=&biz_id=102&utm_term=lambda%E8%A1%A8%E8%BE%BE%E5%BC%8Fc++&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-120999277.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&spm=1018.2226.3001.4187">(131条消息) C++11——lambda表达式_两片空白的博客-CSDN博客_lambda表达式c++11</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//最简单的lambda表达式</span></span><br><span class="line">[]&#123;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//捕捉当前作用域的变量，没有参数，编译器推导返回值类型。</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">[=]&#123;<span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用和仿函数差不多</span></span><br><span class="line"><span class="keyword">auto</span> fun1 = [&amp;](<span class="keyword">int</span> c)&#123;b = a + c; &#125;;</span><br><span class="line"><span class="built_in">fun1</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">auto</span> fun2 = [&amp;](<span class="keyword">int</span> c)-&gt;<span class="keyword">int</span>&#123;<span class="keyword">return</span> a + c; &#125;;</span><br><span class="line"><span class="built_in">fun2</span>(<span class="number">20</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">fun2</span>(<span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//传值捕捉</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">auto</span> add0 = [x, y]()<span class="keyword">mutable</span>-&gt;<span class="keyword">int</span>&#123; x *= <span class="number">2</span>;<span class="comment">//捕捉传递传值具有常性</span></span><br><span class="line"><span class="keyword">return</span> x + y; &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">add0</span>() &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">auto</span> add1 = [&amp;x, y]()-&gt;<span class="keyword">int</span>&#123; x *= <span class="number">2</span>;<span class="comment">//捕捉传递引用不具有常性</span></span><br><span class="line"><span class="keyword">return</span> x + y; &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">add1</span>() &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">auto</span> add2 = [](<span class="keyword">int</span> s, <span class="keyword">int</span> m)-&gt;<span class="keyword">int</span>&#123; s *= <span class="number">2</span>;<span class="comment">//参数不具有常性</span></span><br><span class="line"><span class="keyword">return</span> s + m; &#125;;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//最简单的lambda表达式</span></span><br><span class="line">[]&#123;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//捕捉当前作用域的变量，没有参数，编译器推导返回值类型。</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//auto fun1 = [x, y]()-&gt;int&#123;return x + y; &#125;;//编译错误，要和捕捉参数名相同</span></span><br><span class="line"><span class="comment">//传值传递是捕捉变量的拷贝，实际外面的a，b没有交换</span></span><br><span class="line"><span class="keyword">auto</span> swap1 = [a, b]()<span class="keyword">mutable</span>&#123;<span class="keyword">int</span> z = a; a = b; b = z; &#125;;</span><br><span class="line"><span class="built_in">swap1</span>();<span class="comment">//注意还需要调用</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//传引用才能真正修改</span></span><br><span class="line"><span class="keyword">auto</span> swap2 = [&amp;a, &amp;b]&#123;<span class="keyword">int</span> z = a; a = b; b = z; &#125;;</span><br><span class="line"><span class="built_in">swap2</span>();</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">void</span></span> (*PF)();</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">auto</span> f1 = []&#123;cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line"><span class="keyword">auto</span> f2 = []&#123;cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line"><span class="comment">// 此处先不解释原因，等lambda表达式底层实现原理看完后，大家就清楚了</span></span><br><span class="line"><span class="comment">//f1 = f2; // 编译失败---&gt;提示找不到operator=()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 允许使用一个lambda表达式拷贝构造一个新的副本</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">f3</span><span class="params">(f2)</span></span>;</span><br><span class="line"><span class="built_in">f3</span>();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 可以将lambda表达式赋值给相同类型的函数指针</span></span><br><span class="line">PF = f2;</span><br><span class="line"><span class="built_in">PF</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_57023347/article/detai</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>win11安装</title>
    <link href="https://peitianyu.github.io/blog/2022/05/05/win11%E5%AE%89%E8%A3%85/"/>
    <id>https://peitianyu.github.io/blog/2022/05/05/win11%E5%AE%89%E8%A3%85/</id>
    <published>2022-05-05T04:30:12.000Z</published>
    <updated>2022-05-08T12:27:19.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/shr105/article/details/122802235?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-122802235-blog-122299782.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-122802235-blog-122299782.pc_relevant_default&utm_relevant_index=1">一步强制升级windows11_沃特陌的博客-CSDN博客_win11强制升级</a> </p><h1 id="下载win11镜像-multi-edition"><a href="#下载win11镜像-multi-edition" class="headerlink" title="下载win11镜像(multi-edition)"></a>下载win11镜像(multi-edition)</h1><p> <a href="https://www.microsoft.com/zh-cn/software-download/windows11/">Download Windows 11 (microsoft.com)</a> </p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="进入resources-找到appraiserres-dll-剪切出来-新建一个空白相同文件放进去"><a href="#进入resources-找到appraiserres-dll-剪切出来-新建一个空白相同文件放进去" class="headerlink" title="进入resources,找到appraiserres.dll,剪切出来,新建一个空白相同文件放进去"></a>进入resources,找到appraiserres.dll,剪切出来,新建一个空白相同文件放进去</h2><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="setup-exe-运行"><a href="#setup-exe-运行" class="headerlink" title="setup.exe,运行"></a>setup.exe,运行</h2><h2 id="检测满足-扫描完成后，会提示你满足，可以下一步，这时候，再把那个appraiserres-dll文件放回去。然后继续进行即可"><a href="#检测满足-扫描完成后，会提示你满足，可以下一步，这时候，再把那个appraiserres-dll文件放回去。然后继续进行即可" class="headerlink" title="检测满足, 扫描完成后，会提示你满足，可以下一步，这时候，再把那个appraiserres.dll文件放回去。然后继续进行即可"></a>检测满足, 扫描完成后，会提示你满足，可以下一步，这时候，再把那个appraiserres.dll文件放回去。然后继续进行即可</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/shr105/article/details/12280</summary>
      
    
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/categories/tool/"/>
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>c++风格</title>
    <link href="https://peitianyu.github.io/blog/2022/05/03/C++%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    <id>https://peitianyu.github.io/blog/2022/05/03/C++%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</id>
    <published>2022-05-03T04:30:12.000Z</published>
    <updated>2022-05-05T03:13:26.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/">C++ 风格指南 - 内容目录 — Google 开源项目风格指南 (zh-google-styleguide.readthedocs.io)</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 文件:</span><br><span class="line">a_b_c.cc</span><br><span class="line">&lt;PROJECT&gt;_&lt;PATH&gt;_&lt;FILE&gt;_H_</span><br><span class="line"></span><br><span class="line">#ifndef FOO_BAR_BAZ_H_</span><br><span class="line">#define FOO_BAR_BAZ_H_</span><br><span class="line">...</span><br><span class="line">#endif // FOO_BAR_BAZ_H_</span><br><span class="line">// 类型:</span><br><span class="line">struct Abc&#123;&#125;;</span><br><span class="line">class Abc&#123;&#125;;</span><br><span class="line">enum Abc&#123;&#125;;</span><br><span class="line">namespace abc&#123;&#125;</span><br><span class="line">// 变量:</span><br><span class="line">string table_name;  // 好 - 用下划线.</span><br><span class="line"></span><br><span class="line">// 类数据成员</span><br><span class="line">class TableInfo &#123;</span><br><span class="line">  ...</span><br><span class="line"> private:</span><br><span class="line">  string table_name_;  // 好 - 后加下划线.</span><br><span class="line">  string tablename_;   // 好.</span><br><span class="line">  static Pool&lt;TableInfo&gt;* pool_;  // 好.</span><br><span class="line">  static Pool&lt;TableInfo&gt;* m_pool;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 结构体变量</span><br><span class="line">struct UrlTableProperties &#123;</span><br><span class="line">  string name;</span><br><span class="line">  int num_entries;</span><br><span class="line">  static Pool&lt;UrlTableProperties&gt;* pool;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 常量命名,声明为 constexpr 或 const 的变量</span><br><span class="line">const int kDaysInAWeek = 7;</span><br><span class="line">constexpr int kDaysWeek = 7;</span><br><span class="line"></span><br><span class="line">// 枚举</span><br><span class="line">ENUM_NAME</span><br><span class="line"></span><br><span class="line">// 宏命名</span><br><span class="line">#define ROUND(x) ...</span><br><span class="line">#define PI_ROUNDED 3.0</span><br></pre></td></tr></table></figure><h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.cc文件主要用于linux</span><br><span class="line">.hpp <span class="keyword">template</span></span><br></pre></td></tr></table></figure><h2 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有当函数只有 10 行甚至更少时才将其定义为内联函数.(小且频繁)</span><br></pre></td></tr></table></figure><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  一般用于func内,不做全局static</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// static class Create();</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">create</span><span class="params">()</span></span>; <span class="comment">// 主要用于创建</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="include"><a href="#include" class="headerlink" title="#include"></a>#include</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;foo/public/fooserver.h&quot;</span> <span class="comment">// 优先位置</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hash_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;base/basictypes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;base/commandlineflags.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;foo/public/bar.h&quot;</span></span></span><br></pre></td></tr></table></figure><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 .cc 中使用别名缩短常用的命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> baz = ::foo::bar::baz;</span><br></pre></td></tr></table></figure><h2 id="const与constexpr"><a href="#const与constexpr" class="headerlink" title="const与constexpr"></a>const与constexpr</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">尽量多的使用<span class="keyword">const</span>与<span class="keyword">constexpr</span>保证安全需要</span><br></pre></td></tr></table></figure><h2 id="声明初始化"><a href="#声明初始化" class="headerlink" title="声明初始化"></a>声明初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用RAII,尽量使用POD</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">A a = <span class="built_in">A</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  <span class="built_in">A</span>()&#123;</span><br><span class="line">       b = <span class="keyword">new</span> <span class="built_in">B</span>(); </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    B* b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_useful_class.cc</span><br></pre></td></tr></table></figure><h1 id="注释-Doxygen"><a href="#注释-Doxygen" class="headerlink" title="注释(Doxygen)"></a>注释(Doxygen)</h1><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> rate = <span class="number">0.49</span>;</span><br><span class="line"><span class="comment">// lamber</span></span><br><span class="line"><span class="keyword">auto</span> r2 = [=](<span class="keyword">double</span> monty, <span class="keyword">int</span> year)-&gt;<span class="keyword">double</span>&#123;<span class="keyword">return</span> monty*rate*year; &#125;;</span><br></pre></td></tr></table></figure><h2 id="std-optional"><a href="#std-optional" class="headerlink" title="std::optional"></a>std::optional</h2><h2 id="explicit-显示表达-尽量多使用"><a href="#explicit-显示表达-尽量多使用" class="headerlink" title="explicit(显示表达)(尽量多使用)"></a>explicit(显示表达)(尽量多使用)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般用于只一个量,且容易出现隐式转换的时候</span><br></pre></td></tr></table></figure><h2 id="可拷贝类型和可移动类型"><a href="#可拷贝类型和可移动类型" class="headerlink" title="可拷贝类型和可移动类型"></a>可拷贝类型和可移动类型</h2><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyClass is neither copyable nor movable.</span></span><br><span class="line"><span class="built_in">MyClass</span>(<span class="keyword">const</span> MyClass&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">MyClass&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyClass&amp;) = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure><h2 id="结构体-VS-类"><a href="#结构体-VS-类" class="headerlink" title="结构体 VS. 类"></a>结构体 VS. 类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结构体一般只有成员变量</span><br></pre></td></tr></table></figure><h2 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h2><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseInterface</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span> <span class="keyword">public</span>: <span class="function">BaseInterface</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof()"></a>sizeof()</h2><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span>(A); <span class="comment">// 不建议</span></span><br><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span>(a); <span class="comment">// 建议</span></span><br></pre></td></tr></table></figure><h2 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h2><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(f = <span class="number">0.22</span>);</span><br></pre></td></tr></table></figure><h2 id="初始化-0-nullptr-NULL"><a href="#初始化-0-nullptr-NULL" class="headerlink" title="初始化(0,nullptr,NULL)"></a>初始化(0,nullptr,NULL)</h2><h2 id="i-与-i"><a href="#i-与-i" class="headerlink" title="i++与++i"></a>i++与++i</h2><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(intertor i = s.<span class="built_in">begin</span>();++i;s.<span class="built_in">end</span>()) <span class="comment">// 避免重复</span></span><br></pre></td></tr></table></figure><h2 id="struct初始化"><a href="#struct初始化" class="headerlink" title="struct初始化"></a>struct初始化</h2><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> =</span> &#123;<span class="number">0</span>,<span class="number">1.2</span>,<span class="string">&quot;hello&quot;</span>&#125;; <span class="comment">// POD</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zh-google-styleguide.readthedocs.io/en/late</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Hu不变矩</title>
    <link href="https://peitianyu.github.io/blog/2022/05/03/Hu%E4%B8%8D%E5%8F%98%E7%9F%A9/"/>
    <id>https://peitianyu.github.io/blog/2022/05/03/Hu%E4%B8%8D%E5%8F%98%E7%9F%A9/</id>
    <published>2022-05-03T04:30:12.000Z</published>
    <updated>2022-05-04T14:18:08.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/qq_26898461/article/details/47123405?ops_request_misc=&request_id=&biz_id=102&utm_term=Hu%E4%B8%8D%E5%8F%98%E7%9F%A9&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-47123405.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&spm=1018.2226.3001.4187">(130条消息) Hu不变矩原理及opencv实现_beihangzxm123的博客-CSDN博客_hu不变矩</a></p><p><a href="https://blog.csdn.net/purgle/article/details/50976268?ops_request_misc=%7B%22request_id%22:%22165154407916782388032079%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165154407916782388032079&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-50976268.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=hu%E4%B8%8D%E5%8F%98%E7%9F%A9%E5%80%BC%E7%9A%84%E4%BD%9C%E7%94%A8&spm=1018.2226.3001.4187">(130条消息) 图像的局部特征研究–Hu不变矩_purgle的博客-CSDN博客_hu不变矩</a></p><p><a href="https://github.com/egdw/HU">egdw/HU: Hu矩阵 C++实现 (github.com)</a></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">double</span> M[<span class="number">7</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;Mat&gt; <span class="title">cutImage</span><span class="params">(Mat image)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Mat&gt; roi;</span><br><span class="line"><span class="keyword">int</span> rwidth = image.cols/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> rheight = image.rows/<span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>;y &lt; image.rows<span class="number">-10</span>;y +=rheight)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt;  image.cols<span class="number">-10</span>;x += rwidth)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Rect <span class="title">rect</span><span class="params">(x, y, rwidth, rheight)</span></span>;</span><br><span class="line">rect &amp;= Rect(<span class="number">0</span>, <span class="number">0</span>, image.cols, image.rows);;</span><br><span class="line">roi.push_back(image(rect));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> roi;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calcHu</span><span class="params">(Mat image)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> bmpWidth = image.cols;</span><br><span class="line"><span class="keyword">int</span> bmpHeight = image.rows;</span><br><span class="line"><span class="keyword">int</span> bmpStep = image.step; </span><br><span class="line"><span class="keyword">int</span> bmpChannels = image.channels();</span><br><span class="line">uchar* pBmpBuf = image.data;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">double</span> m00=<span class="number">0</span>,m11=<span class="number">0</span>,m20=<span class="number">0</span>,m02=<span class="number">0</span>,m30=<span class="number">0</span>,m03=<span class="number">0</span>,m12=<span class="number">0</span>,m21=<span class="number">0</span>;  <span class="comment">//中心矩 </span></span><br><span class="line"><span class="keyword">double</span> x0=<span class="number">0</span>,y0=<span class="number">0</span>;                                    <span class="comment">//计算中心距时所使用的临时变量（x-x&#x27;） </span></span><br><span class="line"><span class="keyword">double</span> u20=<span class="number">0</span>,u02=<span class="number">0</span>,u11=<span class="number">0</span>,u30=<span class="number">0</span>,u03=<span class="number">0</span>,u12=<span class="number">0</span>,u21=<span class="number">0</span>;        <span class="comment">//规范化后的中心矩</span></span><br><span class="line"><span class="keyword">double</span> t1=<span class="number">0</span>,t2=<span class="number">0</span>,t3=<span class="number">0</span>,t4=<span class="number">0</span>,t5=<span class="number">0</span>;<span class="comment">//临时变量</span></span><br><span class="line"><span class="keyword">int</span> Center_x=<span class="number">0</span>,Center_y=<span class="number">0</span>;<span class="comment">//重心 </span></span><br><span class="line"><span class="keyword">int</span> i,j;            <span class="comment">//循环变量</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获得图像的区域重心(普通矩)</span></span><br><span class="line"><span class="keyword">double</span> s10=<span class="number">0</span>,s01=<span class="number">0</span>,s00=<span class="number">0</span>;  <span class="comment">//0阶矩和1阶矩  </span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;bmpHeight;j++)<span class="comment">//y</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;bmpWidth;i++)<span class="comment">//x</span></span><br><span class="line">&#123;</span><br><span class="line">s10+=i*pBmpBuf[j*bmpStep+i];</span><br><span class="line">s01+=j*pBmpBuf[j*bmpStep+i];</span><br><span class="line">s00+=pBmpBuf[j*bmpStep+i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Center_x=(<span class="keyword">int</span>)(s10/s00+<span class="number">0.5</span>);</span><br><span class="line">Center_y=(<span class="keyword">int</span>)(s01/s00+<span class="number">0.5</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  计算二阶、三阶矩(中心矩)</span></span><br><span class="line">m00=s00; </span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;bmpHeight;j++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;bmpWidth;i++)<span class="comment">//x </span></span><br><span class="line">&#123; </span><br><span class="line">x0=(i-Center_x); </span><br><span class="line">y0=(j-Center_y); </span><br><span class="line">m11+=x0*y0*pBmpBuf[j*bmpStep+i]; </span><br><span class="line">m20+=x0*x0*pBmpBuf[j*bmpStep+i]; </span><br><span class="line">m02+=y0*y0*pBmpBuf[j*bmpStep+i]; </span><br><span class="line">m03+=y0*y0*y0*pBmpBuf[j*bmpStep+i];</span><br><span class="line">m30+=x0*x0*x0*pBmpBuf[j*bmpStep+i]; </span><br><span class="line">m12+=x0*y0*y0*pBmpBuf[j*bmpStep+i]; </span><br><span class="line">m21+=x0*x0*y0*pBmpBuf[j*bmpStep+i]; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//  计算规范化后的中心矩: mij/pow(m00,((i+j+2)/2)</span></span><br><span class="line">u20=m20/<span class="built_in">pow</span>(m00,<span class="number">2</span>); </span><br><span class="line">u02=m02/<span class="built_in">pow</span>(m00,<span class="number">2</span>); </span><br><span class="line">u11=m11/<span class="built_in">pow</span>(m00,<span class="number">2</span>);</span><br><span class="line">u30=m30/<span class="built_in">pow</span>(m00,<span class="number">2.5</span>); </span><br><span class="line">u03=m03/<span class="built_in">pow</span>(m00,<span class="number">2.5</span>);</span><br><span class="line">u12=m12/<span class="built_in">pow</span>(m00,<span class="number">2.5</span>); </span><br><span class="line">u21=m21/<span class="built_in">pow</span>(m00,<span class="number">2.5</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  计算中间变量</span></span><br><span class="line">t1=(u20-u02); </span><br><span class="line">t2=(u30<span class="number">-3</span>*u12); </span><br><span class="line">t3=(<span class="number">3</span>*u21-u03); </span><br><span class="line">t4=(u30+u12);</span><br><span class="line">t5=(u21+u03);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  计算不变矩 </span></span><br><span class="line">M[<span class="number">0</span>]=u20+u02; </span><br><span class="line">M[<span class="number">1</span>]=t1*t1+<span class="number">4</span>*u11*u11; </span><br><span class="line">M[<span class="number">2</span>]=t2*t2+t3*t3; </span><br><span class="line">M[<span class="number">3</span>]=t4*t4+t5*t5;</span><br><span class="line">M[<span class="number">4</span>]=t2*t4*(t4*t4<span class="number">-3</span>*t5*t5)+t3*t5*(<span class="number">3</span>*t4*t4-t5*t5); </span><br><span class="line">M[<span class="number">5</span>]=t1*(t4*t4-t5*t5)+<span class="number">4</span>*u11*t4*t5;</span><br><span class="line">M[<span class="number">6</span>]=t3*t4*(t4*t4<span class="number">-3</span>*t5*t5)-t2*t5*(<span class="number">3</span>*t4*t4-t5*t5);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareHu</span><span class="params">(<span class="keyword">double</span> mo[<span class="number">9</span>][<span class="number">7</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> no = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>, min = <span class="number">100</span>, max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += mo[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(mo[i][<span class="number">0</span>]&gt;max)</span><br><span class="line">max = mo[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(mo[i][<span class="number">0</span>]&lt;min)</span><br><span class="line">min = mo[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">sum /= <span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>(sum - min &gt; max - sum) max = min;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line"><span class="keyword">if</span> (mo[i][<span class="number">0</span>]==max)&#123; no = i;<span class="keyword">break</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout&lt;&lt;max&lt;&lt;endl&lt;&lt;no&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawCross</span><span class="params">(<span class="keyword">int</span> n, Mat image)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> centerx = <span class="number">0</span>, centery = <span class="number">0</span>, widstep = <span class="number">0</span>, heistep = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">widstep = image.cols/<span class="number">6</span>;</span><br><span class="line">heistep = image.rows/<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">centerx = n%<span class="number">3</span> * widstep * <span class="number">2</span> + widstep;</span><br><span class="line">centery = n/<span class="number">3</span> * heistep * <span class="number">2</span> + heistep;</span><br><span class="line"></span><br><span class="line"><span class="function">Scalar <span class="title">color</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span></span>;</span><br><span class="line">line(image, Point(centerx<span class="number">-20</span>, centery), Point(centerx+<span class="number">20</span>, centery), color, <span class="number">2</span>);</span><br><span class="line">line(image, Point(centerx, centery<span class="number">-10</span>), Point(centerx, centery+<span class="number">10</span>), color, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">Mat src, binary;</span><br><span class="line"><span class="built_in">vector</span> &lt;Mat&gt; srcRoi;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">double</span> moment[<span class="number">9</span>][<span class="number">7</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (--count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> imageName[<span class="number">10</span>];</span><br><span class="line">sprintf_s(imageName, <span class="string">&quot;%d.jpg&quot;</span>, count);</span><br><span class="line">src = imread(imageName, <span class="number">1</span>);</span><br><span class="line">Canny(src, binary, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line"> </span><br><span class="line">srcRoi = cutImage(binary);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">calcHu(srcRoi[i]);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">7</span>;j++)</span><br><span class="line">moment[i][j] = M[j];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> no = compareHu(moment);</span><br><span class="line">drawCross(no, src);</span><br><span class="line">imshow(imageName, src);</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_26898461/article/details/4</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>OccupyGridMap</title>
    <link href="https://peitianyu.github.io/blog/2022/05/03/OccupyGridMap/"/>
    <id>https://peitianyu.github.io/blog/2022/05/03/OccupyGridMap/</id>
    <published>2022-05-03T04:30:12.000Z</published>
    <updated>2022-05-03T14:42:33.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://gaoyichao.com/Xiaotu/?book=probabilistic_robotics&title=pr_chapter9">无处不在的小土-pr_chapter9 (gaoyichao.com)</a></p><p><a href="https://github.com/markcsie/OccupancyGridMapping">markcsie/OccupancyGridMapping (github.com)</a></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GridMapping *laserGridMapping = <span class="keyword">new</span> GridMapping();</span><br><span class="line">updateGridMap(pose,scan);</span><br><span class="line">- gridToXY();</span><br><span class="line">- inverseSensorModel();</span><br><span class="line">showGridMap();</span><br><span class="line">saveGridMap();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://gaoyichao.com/Xiaotu/?book=probabilistic_ro</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>c++条件运算符(?:)</title>
    <link href="https://peitianyu.github.io/blog/2022/05/03/c++%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://peitianyu.github.io/blog/2022/05/03/c++%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2022-05-03T04:30:12.000Z</published>
    <updated>2022-05-03T14:42:43.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/zaishuiyifangxym/article/details/101107702?ops_request_misc=%7B%22request_id%22:%22165155021216780357213584%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165155021216780357213584&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-101107702.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=c++++:&spm=1018.2226.3001.4187">(130条消息) C++ 条件运算符 (?:)_TechArtisan6的博客-CSDN博客_c++条件运算符</a></p><h1 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表达式1 ? 表达式2 ：表达式3</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &gt; b ? a + b : a - b;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zaishuiyifangxym/article/deta</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>/dev/null使用</title>
    <link href="https://peitianyu.github.io/blog/2022/05/03/dev_null%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2022/05/03/dev_null%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-03T04:30:12.000Z</published>
    <updated>2022-05-03T14:42:50.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_44388689/article/details/120705959?ops_request_misc=&request_id=&biz_id=102&utm_term=/dev/null&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-120705959.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&spm=1018.2226.3001.4187">(130条消息) 关于/dev/null及用途（Linux黑洞）_RayPick的博客-CSDN博客_dev/null</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>用来当作垃圾站,不用的东西扔进去,可以用来清理文件内容.</p><h1 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> std:: <span class="function">ofstream <span class="title">dummy_ostream</span><span class="params">(<span class="string">&quot;/dev/null&quot;</span>,std::iso::out)</span></span>;</span><br><span class="line">std::ofstream&amp; Logger::<span class="keyword">operator</span>[](<span class="keyword">const</span> std::string&amp; name)</span><br><span class="line"><span class="keyword">return</span> (m_logs.<span class="built_in">find</span>(name) == m_logs.<span class="built_in">end</span>()) ? dummy_ostream : m_logs[names];</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_44388689/article/detai</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>代码注释</title>
    <link href="https://peitianyu.github.io/blog/2022/05/03/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A/"/>
    <id>https://peitianyu.github.io/blog/2022/05/03/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A/</id>
    <published>2022-05-03T04:30:12.000Z</published>
    <updated>2022-05-03T08:43:26.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/qq_31445217/article/details/107606652?ops_request_misc=&request_id=&biz_id=102&utm_term=fixme&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-107606652.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&spm=1018.2226.3001.4187">(130条消息) 编程规范: 代码中特殊注释TODO、FIXME、XXX 的含义_nohysiwe的博客-CSDN博客_golang 注释todo</a></p><p><a href="https://blog.csdn.net/weixin_43251037/article/details/120074702?ops_request_misc=%7B%22request_id%22:%22165156589416782425165154%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165156589416782425165154&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-16-120074702.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=fixme&spm=1018.2226.3001.4187">(130条消息) Java XXX,TODO,FIXME 使用说明_聪鸟后飞的博客-CSDN博客</a></p><h1 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NOTE: &lt;说明&gt;</span><br><span class="line">对代码如何工作的描述(当它不是不言自明时)。</span><br><span class="line">TODO: &lt;说明&gt;</span><br><span class="line">通常写在一些函数的上方或者内部，当然，实际上你可想写哪儿就写哪儿。它表示该注释标识处，有一些代码功能还未实现，未来会实现，&lt;说明&gt; 中应该简单描述下该功能。</span><br><span class="line">FIXME: &lt;说明&gt;</span><br><span class="line">该注释表示该注释标记处的代码有问题或者是错误的，有可能无法正常工作，需要修复，&lt;说明&gt; 中应该简单描述下如何修复该问题。</span><br><span class="line">XXX: &lt;说明&gt;</span><br><span class="line">该注释表示该注释标记处的代码功能虽然实现了，但是实现的方式可能并不那么的好，可以进行一些改进优化，&lt;说明&gt; 中应该简单描述下改进优化的策略。</span><br><span class="line">HACK: &lt;说明&gt;</span><br><span class="line">没有很好地编写或不规范的代码来规避问题/bug。应该被用作HACK:FIXME:</span><br><span class="line">BUG: &lt;说明&gt;</span><br><span class="line">这里有个大bug</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_31445217/article/details/1</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>ndt</title>
    <link href="https://peitianyu.github.io/blog/2022/04/29/ndt/"/>
    <id>https://peitianyu.github.io/blog/2022/04/29/ndt/</id>
    <published>2022-04-29T04:30:12.000Z</published>
    <updated>2022-04-29T07:39:13.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/softdream/ndt-algorithm">softdream/ndt-algorithm (github.com)</a></p><h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. caculateNDTByFirstScan:主要对前一祯数据做网格化,得到FirstmeanPose,与Pose_Cov</span><br><span class="line">2. estimateTransformationOnce:对当前scan做网格化,然后使用poseCov作为sigma噪声与得到FirstmeanPose做高斯牛顿,然后迭代</span><br><span class="line">3. angleNormalize:角度归一化</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>具体代码参考<a href="https://github.com/softdream/ndt-algorithm">道峰大佬ndt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/softdream/ndt-algorithm&quot;&gt;softdre</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>adb使用</title>
    <link href="https://peitianyu.github.io/blog/2022/04/28/adb%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2022/04/28/adb%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-28T04:30:12.000Z</published>
    <updated>2022-04-28T09:01:27.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_41635750/article/details/108297319?ops_request_misc=%7B%22request_id%22:%22165113153916780357210551%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165113153916780357210551&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-4-108297319.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=adb%E5%91%BD%E4%BB%A4&spm=1018.2226.3001.4187">(129条消息) 全网最全adb命令_autofelix的博客-CSDN博客</a></p><h1 id="简单实用"><a href="#简单实用" class="headerlink" title="简单实用"></a>简单实用</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb connect <span class="string">&quot;<span class="variable">$ip</span>&quot;</span></span><br><span class="line">adb shell</span><br><span class="line">adb push 本机文件 下机文件夹</span><br><span class="line">adb pull 下机文件 本机文件夹</span><br><span class="line">md5sum 文件 (对比文件是否相同)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_41635750/article/detai</summary>
      
    
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/categories/tool/"/>
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>VoxelGrid_filter</title>
    <link href="https://peitianyu.github.io/blog/2022/04/27/VoxelGrid_filter/"/>
    <id>https://peitianyu.github.io/blog/2022/04/27/VoxelGrid_filter/</id>
    <published>2022-04-27T04:30:12.000Z</published>
    <updated>2022-04-28T07:35:52.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_44494725/article/details/103156435?ops_request_misc=%7B%22request_id%22:%22165106602716781483792182%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165106602716781483792182&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~baidu_landing_v2~default-1-103156435.nonecase&utm_term=%E4%BD%93%E7%B4%A0%E6%BB%A4%E6%B3%A2+c++&spm=1018.2226.3001.4450">(129条消息) 体素栅格对点云下采样（从基础写起）——源码解析C++_weixin_44494725的博客-CSDN博客_体素栅格</a></p><p><a href="https://github.com/nestormh/voxel_odometry">nestormh/voxel_odometry: Voxel grid and particle filter based approach for estimating odometry. </a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>所谓<strong>下采样</strong>是对点云的一种滤波，目的是减少点云数目,并尽可能保持点云原有形状，从而减少计算量。<br>所谓<strong>体素栅格</strong>是将点云空间划分为一个个极小的格子，格子里包含几个点。<br>对体素栅格里面的点取平均或者加权平均，得到一个点，代替原来的几个点。<br>显然，栅格选的越大，滤波后点云点数越少，速度快，但是会对原来的点云过度模糊;<br>栅格选的越小，作用反之。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Mat <span class="title">samplePCByQuantization</span><span class="params">(Mat pc, <span class="keyword">float</span> xrange[<span class="number">2</span>], <span class="keyword">float</span> yrange[<span class="number">2</span>], <span class="keyword">float</span> zrange[<span class="number">2</span>], <span class="keyword">float</span> sampleStep, <span class="keyword">int</span> weightByCenter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::vector&lt; std::vector&lt;<span class="keyword">int</span>&gt; &gt; map;</span><br><span class="line"><span class="comment">//map.size()为体素栅格个数</span></span><br><span class="line"><span class="comment">//map[i].size()为当前体素栅格包含的点数，里面存的是pc的点索引</span></span><br><span class="line">  <span class="keyword">int</span> numSamplesDim = (<span class="keyword">int</span>)(<span class="number">1.0</span>/sampleStep);</span><br><span class="line"><span class="comment">//numSamplesDim：采样个数。sampleStep：相对采样长度</span></span><br><span class="line"><span class="comment">//sampleStep×D=实际采样距离</span></span><br><span class="line"><span class="comment">//同时，D/实际采样距离=采样个数=numSamplesDim</span></span><br><span class="line">  <span class="keyword">float</span> xr = xrange[<span class="number">1</span>] - xrange[<span class="number">0</span>];<span class="comment">//包围盒子的边长</span></span><br><span class="line">  <span class="keyword">float</span> yr = yrange[<span class="number">1</span>] - yrange[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">float</span> zr = zrange[<span class="number">1</span>] - zrange[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> numPoints = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  map.<span class="built_in">resize</span>((numSamplesDim+<span class="number">1</span>)*(numSamplesDim+<span class="number">1</span>)*(numSamplesDim+<span class="number">1</span>));</span><br><span class="line"><span class="comment">//此处resize的是map的size，表示体素栅格的个数</span></span><br><span class="line"><span class="comment">//map.size():体素栅格的个数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// OpenMP might seem like a good idea, but it didn&#x27;t speed this up for me</span></span><br><span class="line">  <span class="comment">//#pragma omp parallel for</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pc.rows; i++)<span class="comment">//遍历pc中每一个点i</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* point = pc.ptr&lt;<span class="keyword">float</span>&gt;(i);</span><br><span class="line"><span class="comment">//定义指针* point指向pc的第i个元素（六维）</span></span><br><span class="line">    <span class="comment">// quantize a point</span></span><br><span class="line"><span class="comment">//  xr/numSamplesDim=xr×sampleStep=实际采样距离</span></span><br><span class="line"><span class="comment">//(point[0]-xrange[0])/实际采样距离：代表当前坐标point[0]在第(int) 几个采样距离处</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> xCell =(<span class="keyword">int</span>) ((<span class="keyword">float</span>)numSamplesDim*(point[<span class="number">0</span>]-xrange[<span class="number">0</span>])/xr);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> yCell =(<span class="keyword">int</span>) ((<span class="keyword">float</span>)numSamplesDim*(point[<span class="number">1</span>]-yrange[<span class="number">0</span>])/yr);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> zCell =(<span class="keyword">int</span>) ((<span class="keyword">float</span>)numSamplesDim*(point[<span class="number">2</span>]-zrange[<span class="number">0</span>])/zr);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> index = xCell*numSamplesDim*numSamplesDim+yCell*numSamplesDim+zCell;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*#pragma omp critical</span></span><br><span class="line"><span class="comment">        &#123;*/</span></span><br><span class="line">    map[index].<span class="built_in">push_back</span>(i);<span class="comment">//把具有相同xCell、yCell、zCell的点i存到同一个索引index下面</span></span><br><span class="line"><span class="comment">//此时，map就是一个个体素栅格，里面包含了若干个点</span></span><br><span class="line">    <span class="comment">//  &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;map.<span class="built_in">size</span>(); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    numPoints += (map[i].<span class="built_in">size</span>()&gt;<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//把map[i]中所有的点数目统计起来，就是pc的总点数</span></span><br><span class="line">  Mat pcSampled = <span class="built_in">Mat</span>(numPoints, pc.cols, CV_32F);<span class="comment">//cols代表x,y,z,nx,ny,nz六列</span></span><br><span class="line">  <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;map.<span class="built_in">size</span>(); i++)<span class="comment">//对每一个体素栅格</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">double</span> px=<span class="number">0</span>, py=<span class="number">0</span>, pz=<span class="number">0</span>;<span class="comment">//下采样后的坐标</span></span><br><span class="line">    <span class="keyword">double</span> nx=<span class="number">0</span>, ny=<span class="number">0</span>, nz=<span class="number">0</span>;<span class="comment">//下采样后的法线</span></span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; curCell = map[i];<span class="comment">//curCell：向量包含当前体素栅格的所有点</span></span><br><span class="line"><span class="comment">//map[i]里存的是PC中点的索引（int）</span></span><br><span class="line">    <span class="keyword">int</span> cn = (<span class="keyword">int</span>)curCell.<span class="built_in">size</span>();<span class="comment">//cn:每个体素栅格包含的点数</span></span><br><span class="line">    <span class="keyword">if</span> (cn&gt;<span class="number">0</span>)<span class="comment">//因为map[i]可能为空</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (weightByCenter)<span class="comment">//体素栅格求重心</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">int</span> xCell, yCell, zCell;<span class="comment">//第几个cell</span></span><br><span class="line">        <span class="keyword">double</span> xc, yc, zc;<span class="comment">//体素栅格的质心坐标</span></span><br><span class="line">        <span class="keyword">double</span> weightSum = <span class="number">0</span> ;</span><br><span class="line">        zCell = i % numSamplesDim;<span class="comment">//这个i是map的index，</span></span><br><span class="line"><span class="comment">//index = xCell*numSamplesDim*numSamplesDim+yCell*numSamplesDim+zCell;</span></span><br><span class="line">        yCell = ((i-zCell)/numSamplesDim) % numSamplesDim;</span><br><span class="line">        xCell = ((i-zCell-yCell*numSamplesDim)/(numSamplesDim*numSamplesDim));<span class="comment">//第几个cell</span></span><br><span class="line"><span class="comment">//0.5 * (double)xr/numSamplesDim：半个格子的长度</span></span><br><span class="line"><span class="comment">//(double)xr/numSamplesDim：一个格子的长度</span></span><br><span class="line"><span class="comment">//xCell* (double)xr/numSamplesDim 前面所有整数个格子的长度</span></span><br><span class="line">        xc = ((<span class="keyword">double</span>)xCell+<span class="number">0.5</span>) * (<span class="keyword">double</span>)xr/numSamplesDim + (<span class="keyword">double</span>)xrange[<span class="number">0</span>];<span class="comment">//xc：体素栅格的重心坐标x</span></span><br><span class="line">        yc = ((<span class="keyword">double</span>)yCell+<span class="number">0.5</span>) * (<span class="keyword">double</span>)yr/numSamplesDim + (<span class="keyword">double</span>)yrange[<span class="number">0</span>];</span><br><span class="line">        zc = ((<span class="keyword">double</span>)zCell+<span class="number">0.5</span>) * (<span class="keyword">double</span>)zr/numSamplesDim + (<span class="keyword">double</span>)zrange[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cn; j++)<span class="comment">//体素栅格中每一点</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">int</span> ptInd = curCell[j];<span class="comment">//ptInd是pc中的点的索引</span></span><br><span class="line">          <span class="keyword">float</span>* point = pc.ptr&lt;<span class="keyword">float</span>&gt;(ptInd);</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">double</span> dx = point[<span class="number">0</span>]-xc;</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">double</span> dy = point[<span class="number">1</span>]-yc;</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">double</span> dz = point[<span class="number">2</span>]-zc;<span class="comment">//计算体素栅格中每一点与质心的距离：d</span></span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">double</span> d = <span class="built_in">sqrt</span>(dx*dx+dy*dy+dz*dz);</span><br><span class="line">          <span class="keyword">double</span> w = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (d&gt;EPS)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// it is possible to use different weighting schemes.</span></span><br><span class="line">            <span class="comment">// inverse weigthing was just good for me</span></span><br><span class="line">            <span class="comment">// exp( - (distance/h)**2 )</span></span><br><span class="line">            <span class="comment">//const double w = exp(-d*d);</span></span><br><span class="line">            w = <span class="number">1.0</span>/d;<span class="comment">//由d计算权重，inverse weigthing</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//float weights[3]=&#123;1,1,1&#125;;</span></span><br><span class="line">          px += w*(<span class="keyword">double</span>)point[<span class="number">0</span>];</span><br><span class="line">          py += w*(<span class="keyword">double</span>)point[<span class="number">1</span>];</span><br><span class="line">          pz += w*(<span class="keyword">double</span>)point[<span class="number">2</span>];</span><br><span class="line">          nx += w*(<span class="keyword">double</span>)point[<span class="number">3</span>];</span><br><span class="line">          ny += w*(<span class="keyword">double</span>)point[<span class="number">4</span>];</span><br><span class="line">          nz += w*(<span class="keyword">double</span>)point[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">          weightSum+=w;</span><br><span class="line">        &#125;</span><br><span class="line">        px/=(<span class="keyword">double</span>)weightSum;</span><br><span class="line">        py/=(<span class="keyword">double</span>)weightSum;</span><br><span class="line">        pz/=(<span class="keyword">double</span>)weightSum;</span><br><span class="line">        nx/=(<span class="keyword">double</span>)weightSum;</span><br><span class="line">        ny/=(<span class="keyword">double</span>)weightSum;</span><br><span class="line">        nz/=(<span class="keyword">double</span>)weightSum;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在一个体素栅格中：px=（x1*1/d1+x2*1/d2+...+xcn1/dcn）/（1/d1+1/d2+...1/dcn）</span></span><br><span class="line"><span class="comment">//py，pz同理</span></span><br><span class="line"><span class="comment">//得到加权质心</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;<span class="comment">//普通求平均的质心</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cn; j++)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">int</span> ptInd = curCell[j];</span><br><span class="line">          <span class="keyword">float</span>* point = pc.ptr&lt;<span class="keyword">float</span>&gt;(ptInd);</span><br><span class="line"></span><br><span class="line">          px += (<span class="keyword">double</span>)point[<span class="number">0</span>];</span><br><span class="line">          py += (<span class="keyword">double</span>)point[<span class="number">1</span>];</span><br><span class="line">          pz += (<span class="keyword">double</span>)point[<span class="number">2</span>];</span><br><span class="line">          nx += (<span class="keyword">double</span>)point[<span class="number">3</span>];</span><br><span class="line">          ny += (<span class="keyword">double</span>)point[<span class="number">4</span>];</span><br><span class="line">          nz += (<span class="keyword">double</span>)point[<span class="number">5</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        px/=(<span class="keyword">double</span>)cn;</span><br><span class="line">        py/=(<span class="keyword">double</span>)cn;</span><br><span class="line">        pz/=(<span class="keyword">double</span>)cn;</span><br><span class="line">        nx/=(<span class="keyword">double</span>)cn;</span><br><span class="line">        ny/=(<span class="keyword">double</span>)cn;</span><br><span class="line">        nz/=(<span class="keyword">double</span>)cn;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//定义指针pcData指向pcSampled的第c个元素</span></span><br><span class="line">      <span class="keyword">float</span> *pcData = pcSampled.ptr&lt;<span class="keyword">float</span>&gt;(c);</span><br><span class="line">      pcData[<span class="number">0</span>]=(<span class="keyword">float</span>)px;</span><br><span class="line">      pcData[<span class="number">1</span>]=(<span class="keyword">float</span>)py;</span><br><span class="line">      pcData[<span class="number">2</span>]=(<span class="keyword">float</span>)pz;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 法向量标准化</span></span><br><span class="line">      <span class="keyword">double</span> norm = <span class="built_in">sqrt</span>(nx*nx+ny*ny+nz*nz);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (norm&gt;EPS)</span><br><span class="line">      &#123;</span><br><span class="line">        pcData[<span class="number">3</span>]=(<span class="keyword">float</span>)(nx/norm);</span><br><span class="line">        pcData[<span class="number">4</span>]=(<span class="keyword">float</span>)(ny/norm);</span><br><span class="line">        pcData[<span class="number">5</span>]=(<span class="keyword">float</span>)(nz/norm);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//#pragma omp atomic</span></span><br><span class="line">      c++;</span><br><span class="line"></span><br><span class="line">      curCell.<span class="built_in">clear</span>();<span class="comment">//清空当前体素栅格</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="keyword">return</span> pcSampled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维体素滤波</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LaserScan <span class="title">Voxelfilter</span><span class="params">(LaserScan scan, <span class="keyword">float</span> Resolution)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> min_x = <span class="number">-10.0</span>;</span><br><span class="line">    <span class="keyword">float</span> min_y = <span class="number">-10.0</span>;</span><br><span class="line">    <span class="keyword">float</span> max_y = <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lenY = (<span class="keyword">int</span>)(std::<span class="built_in">round</span>((max_y - min_y) / Resolution));</span><br><span class="line">    std::map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; rebuf;</span><br><span class="line">    LaserScan result;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp;point:scan)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = point.<span class="built_in">x</span>();</span><br><span class="line">        <span class="keyword">int</span> y = point.<span class="built_in">y</span>();</span><br><span class="line">        <span class="comment">// 仅采用4m内scan数据</span></span><br><span class="line">        <span class="keyword">float</span> dis = <span class="built_in">sqrt</span>(x*x + y*y);</span><br><span class="line">        <span class="keyword">if</span>(dis &gt; <span class="number">4.0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> xGrid = (<span class="keyword">int</span>)(std::<span class="built_in">round</span>((point.x - min_x) / Resolution));</span><br><span class="line">        <span class="keyword">int</span> yGrid = (<span class="keyword">int</span>)(std::<span class="built_in">round</span>((point.y - min_y) / Resolution));</span><br><span class="line">        <span class="keyword">int</span> index = yGrid * lenY + xGrid;</span><br><span class="line">        <span class="keyword">if</span>(!rebuf[index])</span><br><span class="line">        &#123;</span><br><span class="line">            rebuf[index] = <span class="number">1</span>;</span><br><span class="line">            result.<span class="built_in">push_back</span>(point);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_44494725/article/detai</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>行为树</title>
    <link href="https://peitianyu.github.io/blog/2022/04/27/%E8%A1%8C%E4%B8%BA%E6%A0%91/"/>
    <id>https://peitianyu.github.io/blog/2022/04/27/%E8%A1%8C%E4%B8%BA%E6%A0%91/</id>
    <published>2022-04-27T04:30:12.000Z</published>
    <updated>2022-04-27T01:32:22.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/qq_30170949/article/details/118573085?ops_request_misc=%7B%22request_id%22:%22165102194816781432975965%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165102194816781432975965&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-118573085-null-null-2~all~sobaiduend~default-2-118573085.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=%E8%A1%8C%E4%B8%BA%E6%A0%91&spm=1018.2226.3001.4187">(128条消息) 行为树(Behavior trees)_念去去~的博客-CSDN博客_行为树</a></p><p><a href="https://blog.csdn.net/PresleyGo/article/details/104042749?ops_request_misc=%7B%22request_id%22:%22165095583516781483766333%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165095583516781483766333&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-104042749.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91&spm=1018.2226.3001.4187">(128条消息) 状态机和行为树_PresleyGo的博客-CSDN博客_行为树和状态机区别</a></p><p><a href="https://blog.csdn.net/weixin_44806700/article/details/121555411?ops_request_misc=%7B%22request_id%22:%22165102194816781432975965%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165102194816781432975965&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-121555411-null-null-2~all~sobaiduend~default-3-121555411.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=%E8%A1%8C%E4%B8%BA%E6%A0%91&spm=1018.2226.3001.4187">(128条消息) 行为树概念_白霞的博客-CSDN博客_行为树</a></p><p><a href="https://github.com/devildevilson/tiny_behaviour">devildevilson/tiny_behaviour: Behaviour tree header only library (github.com)</a></p><h1 id="基础定义"><a href="#基础定义" class="headerlink" title="基础定义"></a>基础定义</h1><h2 id="Tree-nodes-description"><a href="#Tree-nodes-description" class="headerlink" title="Tree nodes description"></a>Tree nodes description</h2><p>BehaviorTreeBuilder class methods:</p><h3 id="Compositor-nodes"><a href="#Compositor-nodes" class="headerlink" title="Compositor nodes:"></a>Compositor nodes:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`sequence()` - updates all nodes until faces `Status::Failure` or `Status::Running`</span><br><span class="line">`selector()` - updates all nodes until faces `Status::Success` or `Status::Running`</span><br><span class="line">`parallel(minSuccess, minFail)` - updates all nodes, return `Status::Success` if `totalSuccess` &gt;= `minSuccess` or `Status::Failure` if `totalFails` &gt;= `minFail` else `Status::Running`</span><br><span class="line">`memSelector()` - updates all nodes until faces `Status::Success` or `Status::Running`, next updation will start from that node</span><br><span class="line">`memSequence()` - updates all nodes until faces `Status::Failure` or `Status::Running`, next updation will start from that node</span><br><span class="line">`random(seed)` - updates random (depends on seed) node</span><br><span class="line">`whiledo(predicate)` - updates all nodes while `condition == true`, returns `Status::Running` in this case, if `condition == false` does nothing and returns `Status::Failure</span><br></pre></td></tr></table></figure><h3 id="Binary-nodes"><a href="#Binary-nodes" class="headerlink" title="Binary nodes:"></a>Binary nodes:</h3><p>(<code>Status::Success</code> is <code>true</code>, <code>Status::Failure</code> is <code>false</code>)<br><code>conjunction()</code> - Status first &amp;&amp; Status second<br><code>disjunction()</code> - Status first || Status second<br><code>equality()</code> - Status first == Status second<br><code>implication()</code> - Status first -&gt; Status second (!(Status first) || Status second) (<code>Status::Running</code> = <code>Status::Failure</code>)<br><code>ifelse(predicate)</code> - if <code>contidion == true</code> updates first, else second</p><h3 id="Decorator-nodes"><a href="#Decorator-nodes" class="headerlink" title="Decorator nodes:"></a>Decorator nodes:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inverter()` - inverts `Status::Success` and `Status::Failure`, `Status::Running` ignored</span><br><span class="line">`repeater(limit)` - returns `Status::Running` `limit` times, then return node status and resets</span><br><span class="line">`limiter(limit)` - returns decorator&#x27;s child status `limit` times, then return `Status::Failure`</span><br><span class="line">`untilFail()` - returns only `Status::Running` or `Status::Failure`</span><br><span class="line">`untilSuccess()` - returns only `Status::Running` or `Status::Success`</span><br><span class="line">`failer()` - returns only `Status::Failure`</span><br><span class="line">`succeeder()` - returns only `Status::Success`</span><br><span class="line">`condition(predicate)` - updates child if `predicate == true` else returns `Status::Failure</span><br></pre></td></tr></table></figure><h3 id="Special-nodes"><a href="#Special-nodes" class="headerlink" title="Special nodes:"></a>Special nodes:</h3><p><code>action(action)</code> - userdefined action function, must return statuses</p><h3 id="Other-methods"><a href="#Other-methods" class="headerlink" title="Other methods:"></a>Other methods:</h3><p><code>end()</code> - use it after every Compositor or Binary nodes<br><code>add(node)</code> - adds nodes to the current tree, NOTE: adding trees is under construction<br><code>leaf(arguments)</code> - create userdefined action node <code>build()</code> - does some postworks and returns <code>BehaviorTree</code> pointer<br><code>debug(string)</code> - just prints the string<br><code>setDebugCallback(callback)</code> - set callback function for the error strings</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_30170949/article/details/1</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>evo使用</title>
    <link href="https://peitianyu.github.io/blog/2022/04/26/evo/"/>
    <id>https://peitianyu.github.io/blog/2022/04/26/evo/</id>
    <published>2022-04-26T04:30:12.000Z</published>
    <updated>2022-04-29T01:33:33.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/hanmoge/article/details/113593380?ops_request_misc=%7B%22request_id%22:%22165094059516782425130568%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165094059516782425130568&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-113593380.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=gazebo%E8%8E%B7%E5%BE%97%E7%9C%9F%E5%AE%9E%E4%BD%8D%E5%A7%BF&spm=1018.2226.3001.4187">(128条消息) 如何获得gazebo仿真中的机器人位姿真值_寒墨阁的博客-CSDN博客_gazebo获取机器人位置</a></p><p><a href="https://blog.csdn.net/u011341856/article/details/104594392/?ops_request_misc=&request_id=&biz_id=102&utm_term=evo_traj%E8%BD%89%E6%8F%9B&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-104594392.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&spm=1018.2226.3001.4187">(128条消息) evo安装、evo使用方法详细介绍使用教程</a></p><p><a href="https://blog.csdn.net/xiaojinger_123/article/details/120141017?ops_request_misc=&request_id=&biz_id=102&utm_term=evo_traj%E8%BD%89%E6%8F%9B&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-120141017.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&spm=1018.2226.3001.4187">(128条消息) evo评测VINS-MONO—代码修改、数据格式转换、数据测试_可即的博客-CSDN博客_vins测试</a></p><p><a href="https://blog.csdn.net/qq_43265072/article/details/104715515?ops_request_misc=%7B%22request_id%22:%22165089732116780357243284%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165089732116780357243284&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-104715515.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=evo_traj+tum&spm=1018.2226.3001.4187">(128条消息) evo测评TUM数据集_dididada~的博客-CSDN博客_evo tum</a></p><h1 id="gazebo获得真实位姿"><a href="#gazebo获得真实位姿" class="headerlink" title="gazebo获得真实位姿"></a>gazebo获得真实位姿</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在gazebo仿真模型文件中添加： --&gt;</span><br><span class="line">&lt;gazebo&gt;</span><br><span class="line">  &lt;plugin name=&quot;p3d_base_controller&quot; filename=&quot;libgazebo_ros_p3d.so&quot;&gt;</span><br><span class="line">    &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;</span><br><span class="line">    &lt;updateRate&gt;50.0&lt;/updateRate&gt;</span><br><span class="line">    &lt;bodyName&gt;base_footprint&lt;/bodyName&gt;</span><br><span class="line">    &lt;topicName&gt;base_pose_ground_truth&lt;/topicName&gt;</span><br><span class="line">    &lt;gaussianNoise&gt;0.0&lt;/gaussianNoise&gt;</span><br><span class="line">    &lt;frameName&gt;map&lt;/frameName&gt;</span><br><span class="line">    &lt;xyzOffsets&gt;0 0 0&lt;/xyzOffsets&gt;</span><br><span class="line">    &lt;rpyOffsets&gt;0 0 0&lt;/rpyOffsets&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line">&lt;/gazebo&gt;</span><br></pre></td></tr></table></figure><h1 id="ros生成tum文件"><a href="#ros生成tum文件" class="headerlink" title="ros生成tum文件"></a>ros生成tum文件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/PoseWithCovarianceStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;nav_msgs/Odometry.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvoCreatTum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">EvoCreatTum</span>();</span><br><span class="line">    ~<span class="built_in">EvoCreatTum</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">poseCallback</span><span class="params">(<span class="keyword">const</span> nav_msgs::Odometry::ConstPtr&amp; msg)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ros::NodeHandle nh_;</span><br><span class="line">    ros::Subscriber sub_;</span><br><span class="line">    std::string odom_topic_;</span><br><span class="line">    nav_msgs::Odometry pose_;</span><br><span class="line">    std::string outFilename_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">EvoCreatTum::<span class="built_in">EvoCreatTum</span>()</span><br><span class="line">&#123;</span><br><span class="line">    ros::Time::<span class="built_in">init</span>();</span><br><span class="line">    nh_.param&lt;std::string&gt;(<span class="string">&quot;/odom_topic&quot;</span>, odom_topic_, <span class="string">&quot;/odom&quot;</span>);</span><br><span class="line">    nh_.param&lt;std::string&gt;(<span class="string">&quot;outFilename&quot;</span>, outFilename_, <span class="string">&quot;/root/catkin_ws/devel/lib/evo_creat_tum/outpose.txt&quot;</span>);</span><br><span class="line">    sub_ = nh_.<span class="built_in">subscribe</span>(odom_topic_, <span class="number">1</span>, &amp;EvoCreatTum::poseCallback, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EvoCreatTum::~<span class="built_in">EvoCreatTum</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvoCreatTum::poseCallback</span><span class="params">(<span class="keyword">const</span> nav_msgs::Odometry::ConstPtr &amp;msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::Time currTime = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    <span class="keyword">double</span> t_s = currTime.<span class="built_in">toSec</span>();</span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(4) &lt;&lt; &quot;t_s: &quot; &lt;&lt; t_s &lt;&lt; std::endl;</span></span><br><span class="line">    pose_ = *msg;</span><br><span class="line">    <span class="keyword">double</span> tx = pose_.pose.pose.position.x;</span><br><span class="line">    <span class="keyword">double</span> ty = pose_.pose.pose.position.y;</span><br><span class="line">    <span class="keyword">double</span> tz = pose_.pose.pose.position.z;</span><br><span class="line">    <span class="keyword">double</span> qx = pose_.pose.pose.orientation.x;</span><br><span class="line">    <span class="keyword">double</span> qy = pose_.pose.pose.orientation.y;</span><br><span class="line">    <span class="keyword">double</span> qz = pose_.pose.pose.orientation.z;</span><br><span class="line">    <span class="keyword">double</span> qw = pose_.pose.pose.orientation.w;</span><br><span class="line">    std::fstream outTumpose;</span><br><span class="line">    <span class="comment">// 打开并向后添加</span></span><br><span class="line">    outTumpose.<span class="built_in">open</span>(outFilename_, std::ios::out | std::ios::app);</span><br><span class="line">    outTumpose &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">4</span>) &lt;&lt; t_s &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">6</span>) &lt;&lt; tx &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ty &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; tz &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; qx &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; qy &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; qz &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; qw &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;evo_creat_tum_node&quot;</span>); <span class="comment">// 节点的名字</span></span><br><span class="line">    EvoCreatTum evo_creat_tum;</span><br><span class="line">    ros::<span class="built_in">spin</span>(); <span class="comment">// 程序执行到此处时开始进行等待，每次订阅的消息到来都会执行一次ScanCallback()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- creat_tum --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;/odom_topic&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/odom&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;outFilename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/root/catkin_ws/devel/lib/evo_creat_tum/outpose.txt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;evo_creat_tum&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;evo_creat_tum&quot;</span> <span class="attr">type</span>=<span class="string">&quot;evo_creat_tum&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="evo使用"><a href="#evo使用" class="headerlink" title="evo使用"></a>evo使用</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配准前</span></span><br><span class="line">evo_traj tum CameraTrajectory.txt groundtruth.txt -p</span><br><span class="line"><span class="comment"># 配准后</span></span><br><span class="line">evo_traj tum CameraTrajectory.txt --ref=groundtruth.txt -p -a</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">evo_ape tum groundtruth.txt CameraTrajectory.txt -r full -va -p --save_results results/ORB.zip</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/hanmoge/article/details/11359</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
</feed>
