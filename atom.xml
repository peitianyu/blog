<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某飞行员的随笔</title>
  
  
  <link href="https://peitianyu.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://peitianyu.github.io/blog/"/>
  <updated>2022-10-17T01:18:03.833Z</updated>
  <id>https://peitianyu.github.io/blog/</id>
  
  <author>
    <name>某飞行员</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chow_Liu Tree</title>
    <link href="https://peitianyu.github.io/blog/2022/10/12/chow_liu%20tree/"/>
    <id>https://peitianyu.github.io/blog/2022/10/12/chow_liu%20tree/</id>
    <published>2022-10-12T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:03.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/qq_35201208/article/details/126289355?ops_request_misc=%7B%22request_id%22:%22166555644916782425157603%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166555644916782425157603&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-126289355-null-null.142%5Ev53%5Econtrol_1,201%5Ev3%5Econtrol&utm_term=chow-liu%E6%A0%91&spm=1018.2226.3001.4187">(170条消息) SLAM中的位姿图稀疏化_qq_35201208的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_38023849/article/details/110306178?ops_request_misc=%7B%22request_id%22:%22166555644916782425127805%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166555644916782425127805&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-110306178-null-null.142%5Ev53%5Econtrol_1,201%5Ev3%5Econtrol&utm_term=chow-liu%E6%A0%91&spm=1018.2226.3001.4187">(170条消息) FAB_MAP算法的理论_宅男不宅的博客-CSDN博客_fabmap</a></p><p><a href="http://www.bewindoweb.com/232.html">毕业论文整理（二）：用依赖树近似离散概率分布 | 文章 | BEWINDOWEB</a></p><p><a href="https://zhuanlan.zhihu.com/p/437028454">高仙IROS论文分享丨适用于变化环境下的长期建图定位系统 - 知乎 (zhihu.com)</a></p><p><a href="https://sci-hub.se/10.1109/TIT.1968.1054142">Sci-Hub | Approximating discrete probability distributions with dependence trees. IEEE Transactions on Information Theory, 14(3), 462–467 | 10.1109/TIT.1968.1054142</a></p><h1 id="周刘树理解"><a href="#周刘树理解" class="headerlink" title="周刘树理解"></a>周刘树理解</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二阶分布的乘积近似原联合分布,使用最大互信息,求得依赖树</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_35201208/article/details/1</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>0. 简介</title>
    <link href="https://peitianyu.github.io/blog/2022/09/21/2022-9-21-0.-%E7%AE%80%E4%BB%8B/"/>
    <id>https://peitianyu.github.io/blog/2022/09/21/2022-9-21-0.-%E7%AE%80%E4%BB%8B/</id>
    <published>2022-09-21T04:30:12.000Z</published>
    <updated>2022-10-17T01:17:57.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p><a href="https://github.com/peitianyu/2d_slam_learning.git">https://github.com/peitianyu/2d_slam_learning.git</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">纸上得来终觉浅,绝知此事要躬行.</span><br><span class="line">学习slam已经有一年多,总感觉对所学掌握的不够扎实,所以通过写教程的方式记录,方便以后复习之用</span><br></pre></td></tr></table></figure><h1 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h1><p><a href="">坐标变换</a></p><p>[里程计标定]</p><p>[激光数据处理]</p><p>[卡尔曼滤波]</p><p>[非线性优化]</p><p>[激光配准]</p><p>[概率地图]</p><p>[回环检测]</p><p>[图优化]</p><p>[因子图优化]</p><p>[重定位]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码仓库&quot;&gt;&lt;a href=&quot;#代码仓库&quot; class=&quot;headerlink&quot; title=&quot;代码仓库&quot;&gt;&lt;/a&gt;代码仓库&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peitianyu/2d_slam_learning.git&quot;&gt;ht</summary>
      
    
    
    
    <category term="2d激光slam学习笔记" scheme="https://peitianyu.github.io/blog/categories/2d%E6%BF%80%E5%85%89slam%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="2d激光slam学习笔记" scheme="https://peitianyu.github.io/blog/tags/2d%E6%BF%80%E5%85%89slam%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>1. 坐标变换</title>
    <link href="https://peitianyu.github.io/blog/2022/09/21/2022-9-21-%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2/"/>
    <id>https://peitianyu.github.io/blog/2022/09/21/2022-9-21-%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2/</id>
    <published>2022-09-21T04:30:12.000Z</published>
    <updated>2022-10-17T01:17:57.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p><a href="https://github.com/peitianyu/2d_slam_learning.git">https://github.com/peitianyu/2d_slam_learning.git</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2维坐标变换相对简单,实际上主要可分为两部分,求解转换矩阵或者转换向量/求解转换后坐标</span><br><span class="line">这里主要用两个函数表示</span><br><span class="line">- TransformFrom()</span><br><span class="line">- TransformAdd()</span><br><span class="line">这里提供了两种思路</span><br><span class="line">- 根据公式直接代入,硬解: 对于2dslam,建议使用,比较简单</span><br><span class="line">- 齐次坐标使用Eigen库求解</span><br><span class="line">- 使用四元数更新(待添加)</span><br><span class="line">位姿线性差分:</span><br><span class="line">- 对差分向量进行线性差分</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接求解变换向量与变换后坐标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestDirectSolution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">old_pose</span><span class="params">(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">new_pose</span><span class="params">(<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f d_pose = Transform::<span class="built_in">TransformFrom</span>(old_pose, new_pose); <span class="comment">// 求解变换向量</span></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;d_pose: &quot;</span>&lt;&lt;d_pose.<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;transformed pose: &quot;</span>&lt;&lt;Transform::<span class="built_in">TransformAdd</span>(old_pose, d_pose).<span class="built_in">transpose</span>()&lt;&lt;std::endl; <span class="comment">// 求解变换后坐标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 齐次坐标使用Eigen求解</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestEigenSolution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">old_pose</span><span class="params">(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">new_pose</span><span class="params">(<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix3f t_d_pose = Transform::<span class="built_in">TransformFromWithEigen</span>(old_pose, new_pose); <span class="comment">// 求解变换向量</span></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;t_d_pose: \n&quot;</span>&lt;&lt;t_d_pose&lt;&lt;std::endl;</span><br><span class="line">    Eigen::Vector3f d_pose = Transform::<span class="built_in">T2V</span>(t_d_pose);</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;d_pose: &quot;</span>&lt;&lt;d_pose.<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;transformed pose: &quot;</span>&lt;&lt;Transform::<span class="built_in">TransformAddWithEigen</span>(old_pose, t_d_pose).<span class="built_in">transpose</span>()&lt;&lt;std::endl; <span class="comment">// 求解变换后坐标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试差分坐标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestDiffPose</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">old_pose</span><span class="params">(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">new_pose</span><span class="params">(<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f d_pose = Transform::<span class="built_in">TransformFrom</span>(old_pose, new_pose); </span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;d_pose: &quot;</span>&lt;&lt;d_pose.<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;transformed pose: &quot;</span>&lt;&lt;Transform::<span class="built_in">TransformAdd</span>(old_pose, d_pose/<span class="number">3.0</span>).<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;transformed pose: &quot;</span>&lt;&lt;Transform::<span class="built_in">TransformAdd</span>(old_pose, <span class="number">2.0</span>*d_pose/<span class="number">3.0</span>).<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;transformed pose: &quot;</span>&lt;&lt;Transform::<span class="built_in">TransformAdd</span>(old_pose, d_pose).<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试差分坐标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestDiffPoseWithEigen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">old_pose</span><span class="params">(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">new_pose</span><span class="params">(<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix3f t_d_pose = Transform::<span class="built_in">TransformFromWithEigen</span>(old_pose, new_pose);</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;t_d_pose: \n&quot;</span>&lt;&lt;t_d_pose&lt;&lt;std::endl;</span><br><span class="line">    Eigen::Vector3f d_pose = Transform::<span class="built_in">T2V</span>(t_d_pose);</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;d_pose: &quot;</span>&lt;&lt;d_pose.<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;transformed pose: &quot;</span>&lt;&lt;Transform::<span class="built_in">TransformAddWithEigen</span>(old_pose, Transform::<span class="built_in">V2T</span>(d_pose/<span class="number">3.0</span>)).<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;transformed pose: &quot;</span>&lt;&lt;Transform::<span class="built_in">TransformAddWithEigen</span>(old_pose, Transform::<span class="built_in">V2T</span>(<span class="number">2.0</span>*d_pose/<span class="number">3.0</span>)).<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;transformed pose: &quot;</span>&lt;&lt;Transform::<span class="built_in">TransformAddWithEigen</span>(old_pose, t_d_pose).<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-------------TestDirectSolution--------------</span><br><span class="line">d_pose:   1.38177 -0.301169         1</span><br><span class="line">transformed pose: 2 2 2</span><br><span class="line">-------------TestEigenSolution--------------</span><br><span class="line">t_d_pose:</span><br><span class="line"> 0.540302 -0.841471   1.38177</span><br><span class="line"> 0.841471  0.540302 -0.301169</span><br><span class="line">        0         0         1</span><br><span class="line">d_pose:   1.38177 -0.301169         1</span><br><span class="line">transformed pose: 2 2 2</span><br><span class="line">-------------TestDiffPose--------------</span><br><span class="line">d_pose:   1.38177 -0.301169         1</span><br><span class="line">transformed pose: 1.33333 1.33333 1.33333</span><br><span class="line">transformed pose: 1.66667 1.66667 1.66667</span><br><span class="line">transformed pose: 2 2 2</span><br><span class="line">-------------TestDiffPoseWithEigen--------------</span><br><span class="line">t_d_pose:</span><br><span class="line"> 0.540302 -0.841471   1.38177</span><br><span class="line"> 0.841471  0.540302 -0.301169</span><br><span class="line">        0         0         1</span><br><span class="line">d_pose:   1.38177 -0.301169         1</span><br><span class="line">transformed pose: 1.33333 1.33333 1.33333</span><br><span class="line">transformed pose: 1.66667 1.66667 1.66667</span><br><span class="line">transformed pose: 2 2 2</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码仓库&quot;&gt;&lt;a href=&quot;#代码仓库&quot; class=&quot;headerlink&quot; title=&quot;代码仓库&quot;&gt;&lt;/a&gt;代码仓库&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peitianyu/2d_slam_learning.git&quot;&gt;ht</summary>
      
    
    
    
    <category term="2d激光slam学习笔记" scheme="https://peitianyu.github.io/blog/categories/2d%E6%BF%80%E5%85%89slam%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="2d激光slam学习笔记" scheme="https://peitianyu.github.io/blog/tags/2d%E6%BF%80%E5%85%89slam%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>因子图优化</title>
    <link href="https://peitianyu.github.io/blog/2022/09/19/%E5%9B%A0%E5%AD%90%E5%9B%BE%E4%BC%98%E5%8C%96/"/>
    <id>https://peitianyu.github.io/blog/2022/09/19/%E5%9B%A0%E5%AD%90%E5%9B%BE%E4%BC%98%E5%8C%96/</id>
    <published>2022-09-19T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:21.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p> <a href="https://www.bilibili.com/video/BV1C4411772G?from=search&seid=522536518070545967&spm_id_from=333.337.0.0&vd_source=745fd1b1f3e42bb544237f6d0bf78bb2">【泡泡机器人公开课】第五十六课：gtsam_tutorial-董靖_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1Y54y197VW">T5 - 图优化 (第一节课)_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/106049035">战疫时期的算法课 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/Darlingqiang/article/details/121947727?ops_request_misc=&request_id=&biz_id=102&utm_term=GTSAM%E8%AE%BA%E6%96%87&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-121947727.142%5Ev47%5Ebody_digest,201%5Ev3%5Eadd_ask&spm=1018.2226.3001.4187">(164条消息) 【GTSAM】GTSAM/iSAM1/2资源整理_guoqiang_sunshine的博客-CSDN博客_gtsam isam</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址&quot;&gt;&lt;/a&gt;参考网址&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://www.bilibili.com/video/BV1C4411772G?from=sea</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>huogh_transform</title>
    <link href="https://peitianyu.github.io/blog/2022/09/19/%E7%9B%B4%E7%BA%BF%E6%A3%80%E6%B5%8B-huogh_transform/"/>
    <id>https://peitianyu.github.io/blog/2022/09/19/%E7%9B%B4%E7%BA%BF%E6%A3%80%E6%B5%8B-huogh_transform/</id>
    <published>2022-09-19T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:22.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://www.bilibili.com/video/BV1T44y1Y7kL/?spm_id_from=333.788&vd_source=745fd1b1f3e42bb544237f6d0bf78bb2"> 霍夫线变换原理_哔哩哔哩_bilibili</a></p><p><a href="https://github.com/Forrest-Z/mars_mapping/blob/master/occ_line_detection/src/occ_line_detector.cpp">mars_mapping/occ_line_detector.cpp at master · Forrest-Z/mars_mapping (github.com)</a></p><p><a href="https://blog.csdn.net/leonardohaig/article/details/87907462?ops_request_misc=&request_id=&biz_id=102&utm_term=%E9%9C%8D%E5%A4%AB%E5%8F%98%E5%8C%96%E6%A3%80%E6%B5%8B%E7%9B%B4%E7%BA%BF&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-87907462.142%5Ev47%5Ebody_digest,201%5Ev3%5Eadd_ask&spm=1018.2226.3001.4187">(164条消息) 霍夫变换直线检测（Line Detection）原理及示例_leonardohaig的博客-CSDN博客_霍夫变换直线检测原理</a></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过霍夫变换,得到霍夫空间下的(p, theta),对不同角度进行累加,若得到相近的p,则认为处于同一直线</span><br><span class="line">==&gt; 霍夫变换: p = x*cos(theta) + y*sin(theta), 细分theta与p(这里一般指地图分辨率)</span><br></pre></td></tr></table></figure><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; height;i++) <span class="comment">// 遍历地图</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; width;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = j + i * width;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(map_-&gt;data[index] &gt;= <span class="number">60</span>) <span class="comment">// 占用值大于60,认为障碍物</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> x_ = (<span class="keyword">double</span>)j + <span class="number">0.5</span>;</span><br><span class="line">            <span class="keyword">double</span> y_ = (<span class="keyword">double</span>)i + <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> phi = <span class="built_in">atan2</span>(y_,x_); <span class="comment">// 计算角度</span></span><br><span class="line">            <span class="keyword">double</span> R = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x_,<span class="number">2</span>) + <span class="built_in">pow</span>(y_,<span class="number">2</span>)) * resolution; <span class="comment">// 计算距离</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// #pragma omp parallel for</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; angle_size; k++) <span class="comment">// 关键</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">double</span> angle = (<span class="keyword">double</span>)k *  angle_resolution; <span class="comment">// 角度分辨率</span></span><br><span class="line">                <span class="keyword">double</span> r = R*<span class="built_in">cos</span>( angle/<span class="number">180.0</span>*M_PI - phi);</span><br><span class="line">                <span class="comment">// int theta_index = (angle-origin_a)/angle_resolution;</span></span><br><span class="line">                <span class="keyword">int</span> theta_index = k;</span><br><span class="line">                <span class="keyword">int</span> r_index = (r-origin_r)/r_resolution;</span><br><span class="line">                <span class="keyword">int</span> hough_index = r_index*angle_size + theta_index;</span><br><span class="line">                hough_map[hough_index]++; <span class="comment">// 累加器</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1T44y1Y7kL/?spm_id</summary>
      
    
    
    
    <category term="直线检测" scheme="https://peitianyu.github.io/blog/categories/%E7%9B%B4%E7%BA%BF%E6%A3%80%E6%B5%8B/"/>
    
    
    <category term="直线检测" scheme="https://peitianyu.github.io/blog/tags/%E7%9B%B4%E7%BA%BF%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>滤波与优化思路梳理</title>
    <link href="https://peitianyu.github.io/blog/2022/09/16/%E6%BB%A4%E6%B3%A2%E4%B8%8E%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF%E6%A2%B3%E7%90%86/"/>
    <id>https://peitianyu.github.io/blog/2022/09/16/%E6%BB%A4%E6%B3%A2%E4%B8%8E%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF%E6%A2%B3%E7%90%86/</id>
    <published>2022-09-16T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:17.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重新思考关于滤波-关于优化"><a href="#重新思考关于滤波-关于优化" class="headerlink" title="重新思考关于滤波,关于优化"></a>重新思考关于滤波,关于优化</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 优化与滤波本质上都是对数据的一种处理方式</span><br><span class="line">- 优化考虑的是批量数据, 批量处理, 对总体数据有约束作用</span><br><span class="line">- 滤波考虑的是k-1时刻的数据,实时处理</span><br></pre></td></tr></table></figure><h1 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对于这样一组数求它的均值: 12.5 12.4 12.5 12.6 12.8 12.7 12.3 12.4 12.5 12.2</span><br><span class="line">滤波做法:</span><br><span class="line">u = M(k-1)*(1-1/k) + Mk*(1/k)</span><br><span class="line">优化做法:</span><br><span class="line">u = (M1 + M2 + ... + Mk)/k</span><br><span class="line">=&gt; 这里实际上可以加入权重的概念,也就变成了</span><br><span class="line">u = (w1*M1 + w2*M2 + ... + wk*Mk)/k</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重新思考关于滤波-关于优化&quot;&gt;&lt;a href=&quot;#重新思考关于滤波-关于优化&quot; class=&quot;headerlink&quot; title=&quot;重新思考关于滤波,关于优化&quot;&gt;&lt;/a&gt;重新思考关于滤波,关于优化&lt;/h1&gt;&lt;figure class=&quot;highlight shel</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>lio_sam安装使用</title>
    <link href="https://peitianyu.github.io/blog/2022/09/15/lio_sam%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2022/09/15/lio_sam%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2022-09-15T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:07.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/QLeelq/article/details/111088136?ops_request_misc=%7B%22request_id%22:%22166315977616800180680290%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166315977616800180680290&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-111088136-null-null.142%5Ev47%5Ebody_digest,201%5Ev3%5Eadd_ask&utm_term=LIO-SAM&spm=1018.2226.3001.4187">(161条消息) LIO-sam：安装 - 运行 - 论文介绍 - 源码阅读_非晚非晚的博客-CSDN博客_lio-sam</a></p><h1 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装gtsam</span></span><br><span class="line">wget -O ~/Downloads/gtsam.zip https://github.com/borglab/gtsam/archive/4.0.2.zip</span><br><span class="line">cd ~/Downloads/ &amp;&amp; unzip gtsam.zip -d ~/Downloads/</span><br><span class="line">cd ~/Downloads/gtsam-4.0.2/</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">cmake -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF ..</span><br><span class="line">sudo make install -j6  //根据自己的cpu核数定，越多越快，本人是6核的，注意不能超出自己电脑的核数</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境</span></span><br><span class="line">nano ~/.bashrc</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib/:$LD_LIBRARY_PATH</span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装并编译lio_sam</span></span><br><span class="line">mkdir ~/catkin_ws/src </span><br><span class="line">cd ~/catkin_ws/src </span><br><span class="line">git clone https://github.com/TixiaoShan/LIO-SAM.git </span><br><span class="line">cd ..</span><br><span class="line">catkin_make</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载数据</span></span><br><span class="line">数据链接：链接：https://pan.baidu.com/s/1CbDJPIupCm3yROmM2qOsOw 提取码：ato7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">roslaunch lio_sam run.launch</span><br><span class="line">rosbag play casual_walk.bag</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/QLeelq/article/details/111088</summary>
      
    
    
    
    <category term="lio" scheme="https://peitianyu.github.io/blog/categories/lio/"/>
    
    
    <category term="lio" scheme="https://peitianyu.github.io/blog/tags/lio/"/>
    
  </entry>
  
  <entry>
    <title>协方差矩阵与椭圆</title>
    <link href="https://peitianyu.github.io/blog/2022/09/14/%E5%8D%8F%E6%96%B9%E5%B7%AE%E7%9F%A9%E9%98%B5%E4%B8%8E%E6%A4%AD%E5%9C%86/"/>
    <id>https://peitianyu.github.io/blog/2022/09/14/%E5%8D%8F%E6%96%B9%E5%B7%AE%E7%9F%A9%E9%98%B5%E4%B8%8E%E6%A4%AD%E5%9C%86/</id>
    <published>2022-09-14T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:20.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p><a href="https://www.bilibili.com/video/BV1gg41117ha?spm_id_from=333.337.search-card.all.click&vd_source=745fd1b1f3e42bb544237f6d0bf78bb2">程序员的数学2（概率统计2020）：协方差矩阵与椭圆的关系.mp4_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1ib411t7YR?spm_id_from=333.337.search-card.all.click">线性代数视频教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/372315811">路径规划 | 随机采样算法：Informed-RRT* - 知乎 (zhihu.com)</a></p><h1 id="椭圆求解"><a href="#椭圆求解" class="headerlink" title="椭圆求解"></a>椭圆求解</h1><p><a href="https://imgse.com/i/vx9nsI"><img src="https://s1.ax1x.com/2022/09/14/vx9nsI.png" alt="vx9nsI.png"></a></p><h1 id="椭圆采样"><a href="#椭圆采样" class="headerlink" title="椭圆采样"></a>椭圆采样</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 根据长轴,短轴采样,(x, y)</span><br><span class="line">(x^2 / a^2) + (y^2 / b^2) &lt; 1</span><br><span class="line"># 根据转移向量与旋转矩阵变换坐标</span><br><span class="line">X1 = R * X0 + T</span><br><span class="line"># 求解旋转矩阵,theata = atan(y/x)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址&quot;&gt;&lt;/a&gt;参考网址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1gg41117ha?spm_id_fr</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>c++那些事</title>
    <link href="https://peitianyu.github.io/blog/2022/09/05/c++11%E5%AD%A6%E4%B9%A0/"/>
    <id>https://peitianyu.github.io/blog/2022/09/05/c++11%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-09-05T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:02.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://en.cppreference.com/w/cpp/11">C++11 - cppreference.com</a></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">and</span> <span class="keyword">decltype</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">auto</span> z = x + y; <span class="comment">// 一般用于类型过长</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">decltype</span>(z) a = x + y; <span class="comment">// 推导类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt;</span></span><br><span class="line"><span class="function"><span class="title">decltype</span><span class="params">(a+b)</span> <span class="title">Add</span><span class="params">(A&amp; a, B&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trailing <span class="keyword">return</span> type</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Y&gt;</span><br><span class="line"><span class="keyword">auto</span> <span class="built_in">add</span>(T v1, Y v2) -&gt; <span class="keyword">decltype</span>(v1 + v2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> v1 + v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">and</span> <span class="keyword">final</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>:</span>Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">final</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>:</span>A</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">override</span></span>; <span class="comment">// error</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lvalue <span class="keyword">and</span> rvalue</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">8</span>; <span class="comment">// 坐标为左值右边为右值</span></span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;x: &quot;</span>&lt;&lt;x&lt;&lt;std::endl;</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">1.</span> 左值可变,右值不可变(<span class="keyword">const</span> type)</span><br><span class="line"><span class="number">2.</span> 左值生存周期可以很长,右值只用一次</span><br><span class="line"><span class="number">3.</span> 左值储存在内存区,右值没有固定地址,用完即释放</span><br><span class="line"><span class="number">4.</span> 左值可以取地址,右值不可以</span><br><span class="line">&#125;</span><br><span class="line">使用:</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;x = a;  <span class="comment">// 复制引用传参</span></span><br><span class="line"><span class="keyword">int</span> &amp;&amp;x = a; <span class="comment">// error</span></span><br><span class="line"><span class="keyword">int</span> &amp;&amp;x = <span class="number">8</span>; <span class="comment">// 移动右值传参</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;x = <span class="number">8</span>; <span class="comment">// ok, 但实际上是将8转化为临时变量, 然后左值引用</span></span><br><span class="line"></span><br><span class="line">有什么用:</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">int</span> &amp;&amp;x)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;x: &quot;</span>&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">and</span> <span class="keyword">delete</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">A</span>() = <span class="keyword">default</span>;</span><br><span class="line">~<span class="built_in">A</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">const</span> A&amp;) = <span class="keyword">default</span>; <span class="comment">// 复制传参</span></span><br><span class="line"><span class="built_in">A</span>(A&amp;&amp;) = <span class="keyword">default</span>;      <span class="comment">// 移动传参</span></span><br><span class="line">A&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> A&amp;) = <span class="keyword">default</span>; <span class="comment">// 可以连等</span></span><br><span class="line">A&amp; <span class="keyword">operator</span>=(A&amp;&amp;) = <span class="keyword">default</span>; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">B&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> B&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move constructors</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>;</span></span><br><span class="line">B b;</span><br><span class="line">B a = std::<span class="built_in">move</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scoped enums</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> :</span> <span class="keyword">int</span>&#123;</span><br><span class="line">a = <span class="number">0</span>,</span><br><span class="line">b,</span><br><span class="line">c,</span><br><span class="line">d</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> x = <span class="number">8</span>; <span class="comment">// 常量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delegating <span class="keyword">and</span> inherited constructors</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">const</span> in&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span><br><span class="line">:<span class="built_in">m_x</span>(x),<span class="built_in">m_y</span>(y)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span><br><span class="line">:<span class="built_in">A</span>(<span class="number">2</span>,y)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_x;</span><br><span class="line"><span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> A&amp;&#123;</span><br><span class="line"><span class="built_in">B</span>(<span class="keyword">const</span> in&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span><br><span class="line">:<span class="built_in">A</span>(x, y)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type aliases</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> Degree = Angle&lt;is_degree&gt;;</span><br><span class="line"><span class="keyword">using</span> Radian = Angle&lt;is_radian&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variadic templates </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;class... Types&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tuple</span> &#123;</span>&#125;;</span><br><span class="line"> </span><br><span class="line">Tuple&lt;&gt; t0;           <span class="comment">// Types contains no arguments</span></span><br><span class="line">Tuple&lt;<span class="keyword">int</span>&gt; t1;        <span class="comment">// Types contains one argument: int</span></span><br><span class="line">Tuple&lt;<span class="keyword">int</span>, <span class="keyword">float</span>&gt; t2; <span class="comment">// Types contains two arguments: int and float</span></span><br><span class="line">Tuple&lt;<span class="number">0</span>&gt; t3;          <span class="comment">// error: 0 is not a type</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class... Types&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(Types... args)</span></span>; <span class="comment">// </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">f</span>();       <span class="comment">// OK: args contains no arguments</span></span><br><span class="line"><span class="built_in">f</span>(<span class="number">1</span>);      <span class="comment">// OK: args contains one argument: int</span></span><br><span class="line"><span class="built_in">f</span>(<span class="number">2</span>, <span class="number">1.0</span>); <span class="comment">// OK: args contains two arguments: int and double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lambda</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> a = []()-&gt;type&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">range-<span class="keyword">for</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : a)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static_assert</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">static_assert</span></span>(<span class="literal">true</span>, <span class="string">&quot;success pass!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alignof</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::<span class="keyword">size_t</span> <span class="title">alignof</span><span class="params">(type)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/11&quot;&gt;C++11 - cppre</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>lite_slam - 搭建测试环境</title>
    <link href="https://peitianyu.github.io/blog/2022/09/05/lite_slam0%20-%201/"/>
    <id>https://peitianyu.github.io/blog/2022/09/05/lite_slam0%20-%201/</id>
    <published>2022-09-05T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:07.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- Ubuntu18</span><br><span class="line">- Eigen</span><br><span class="line">- opencv(仅用于显示)</span><br></pre></td></tr></table></figure><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> g++ / gcc</span></span><br><span class="line">sudo apt install g++</span><br><span class="line"><span class="meta">#</span><span class="bash"> cmake</span></span><br><span class="line">sudo apt install cmake</span><br><span class="line"><span class="meta">#</span><span class="bash"> Eigen</span></span><br><span class="line">    #1.安装：</span><br><span class="line">    sudo apt-get install libeigen3-dev</span><br><span class="line">    # 2 调整，默认安装路径是：/usr/include/eigen3 </span><br><span class="line">    cd /usr/include/eigen3</span><br><span class="line">    ls</span><br><span class="line">    # $ Eigen  signature_of_eigen3_matrix_library  unsupported  </span><br><span class="line">    # 3.需要执行复制命令，将Eigen文件夹放在/usr/include 下面</span><br><span class="line">    sudo cp Eigen/ .. -R</span><br><span class="line"><span class="meta">#</span><span class="bash"> opencv</span></span><br><span class="line">sudo apt-get install libcv-dev</span><br><span class="line">sudo apt-get install libopencv-dev</span><br></pre></td></tr></table></figure><h1 id="安装测试数据"><a href="#安装测试数据" class="headerlink" title="安装测试数据"></a>安装测试数据</h1><h2 id="使用测试data"><a href="#使用测试data" class="headerlink" title="使用测试data"></a>使用测试data</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 百度云下载:</span><br><span class="line">链接：https://pan.baidu.com/s/19gm9azasi70CXTWbQ7dGrw?pwd=jned </span><br><span class="line">提取码：jned </span><br><span class="line">2. 将其复制于文件夹中</span><br><span class="line">3. mkdir build</span><br><span class="line">4. cd build &amp;&amp; cmake ..</span><br><span class="line">5. make -j4</span><br></pre></td></tr></table></figure><h2 id="文件夹结构"><a href="#文件夹结构" class="headerlink" title="文件夹结构"></a>文件夹结构</h2><p><a href="https://imgse.com/i/vLMkuQ"><img src="https://s1.ax1x.com/2022/09/09/vLMkuQ.png" alt="vLMkuQ.png"></a></p><h2 id="使用自己的rosbag"><a href="#使用自己的rosbag" class="headerlink" title="使用自己的rosbag"></a>使用自己的rosbag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 下载下来</span><br><span class="line">cd ~/catkin_ws/src</span><br><span class="line">git clone https://ghproxy.com/https://github.com/peitianyu/bag2txt</span><br><span class="line">cd .. &amp;&amp; catkin_make</span><br><span class="line"># 修改launch文件,并运行</span><br><span class="line">&lt;launch&gt;</span><br><span class="line">    &lt;node name=&quot;odom2txt&quot; pkg=&quot;ros_data2txt&quot; type=&quot;odom2txt&quot; respawn=&quot;false&quot; output=&quot;screen&quot; &gt;</span><br><span class="line">        &lt;param name=&quot;file_name&quot;         type=&quot;string&quot; value=&quot;/mnt/d/file_ws/Learning/ros/bag2txt_ws/log/9_2_odom.txt&quot;/&gt; // 修改</span><br><span class="line">        &lt;param name=&quot;topic_name&quot;         type=&quot;string&quot; value=&quot;/odom&quot;/&gt;  </span><br><span class="line">    &lt;/node&gt;</span><br><span class="line"></span><br><span class="line">    &lt;node name=&quot;laser_scan2txt&quot; pkg=&quot;ros_data2txt&quot; type=&quot;laser_scan2txt&quot; respawn=&quot;false&quot; output=&quot;screen&quot; &gt;</span><br><span class="line">        &lt;param name=&quot;file_name&quot;         type=&quot;string&quot; value=&quot;/mnt/d/file_ws/Learning/ros/bag2txt_ws/log/9_2_scan.txt&quot;/&gt; // 修改</span><br><span class="line">        &lt;param name=&quot;topic_name&quot;         type=&quot;string&quot; value=&quot;/scan&quot;/&gt;  </span><br><span class="line">    &lt;/node&gt;</span><br><span class="line"></span><br><span class="line">    &lt;node name=&quot;playbag&quot; pkg=&quot;rosbag&quot; type=&quot;play&quot;</span><br><span class="line">      args=&quot;--clock /mnt/d/file_ws/Learning/ros/bag2txt_ws/bag/scan_odom_2022_9_2.bag&quot; /&gt; // 修改</span><br><span class="line">&lt;/launch&gt;</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">roslaunch ros_data2txt bag2txt.launch 自动生成</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/categories/lite-slam/"/>
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/tags/lite-slam/"/>
    
  </entry>
  
  <entry>
    <title>lite_slam - 整体框架简介</title>
    <link href="https://peitianyu.github.io/blog/2022/09/05/lite_slam0/"/>
    <id>https://peitianyu.github.io/blog/2022/09/05/lite_slam0/</id>
    <published>2022-09-05T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:08.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/peitianyu/lite_slam">peitianyu/lite_slam (github.com)</a></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- Ubuntu18</span><br><span class="line">- Eigen</span><br><span class="line">- opencv(仅用于显示)</span><br></pre></td></tr></table></figure><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><h2 id="建图框架"><a href="#建图框架" class="headerlink" title="建图框架"></a>建图框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- grid_map作为概率地图</span><br><span class="line">- map_manage用于显示,保存,读取grid_map</span><br><span class="line">- down_sample_map用于降采样概率图</span><br><span class="line">- scantomap作为匹配</span><br><span class="line">- 为加快速度,采用多层地图,即down_sample_map</span><br><span class="line">- 为加快速度,采用scan_points体素滤波</span><br><span class="line">- 为加快速度,当迭代到一定程度时会提前退出迭代</span><br><span class="line">- scan_context作为回环检测模块</span><br><span class="line">- 通过开源nanoflann库进行kdtree搜索得到先验pose</span><br><span class="line">- 然后通过scantomap进行精确定位得到回环pose</span><br><span class="line">- graph_optimize图优化模块,图优化完后,更新关键帧与地图</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">(<span class="keyword">const</span> Pose2d&amp; prior_pose = Pose2d())</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> uint is_first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is_first++ &lt; <span class="number">20</span>)&#123;</span><br><span class="line">        <span class="built_in">Init</span>(prior_pose); <span class="comment">// 建图初始化</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Location</span>(); <span class="comment">// 定位</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UpdateKeyFrame</span>(); <span class="comment">// 更新keyframe与更新地图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示pose与显示grid_map</span></span><br><span class="line">    <span class="keyword">static</span> uint id = <span class="number">0</span>;</span><br><span class="line">    std::cout&lt;&lt;id++&lt;&lt;<span class="string">&quot; m_estimate_pose: &quot;</span>&lt;&lt;m_estimate_pose.<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line">    m_map_manager-&gt;<span class="built_in">DisplayGridMap</span>(m_scan_matcher-&gt;<span class="built_in">GetGridMap</span>(), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="纯定位框架"><a href="#纯定位框架" class="headerlink" title="纯定位框架"></a>纯定位框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 保存scan_context相关的KeyFrame到txt文本中</span><br><span class="line">- 保存原始grid_map用于纯定位</span><br><span class="line">- scan_context用于重定位,由于场景时agv,所以路线一般固定,可以直接进行kdtree搜索得到先验pose,后scantomap得到精确pose</span><br><span class="line">- scantomap用于纯定位</span><br><span class="line">- 根据不同需求更新地图</span><br></pre></td></tr></table></figure><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">(<span class="keyword">const</span> Pose2d&amp; prior_pose = Pose2d())</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> uint is_first = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(is_first++ == <span class="number">20</span>) &#123;<span class="built_in">Init</span>(prior_pose);&#125; <span class="comment">// 纯定位初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> is_loop_closure = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!is_loop_closure)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">LoopClosure</span>() != <span class="number">-1</span>) &#123;is_loop_closure = <span class="literal">true</span>;&#125; <span class="comment">// 重定位,若重定位成功</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;   </span><br><span class="line"><span class="built_in">Location</span>(); <span class="comment">// 定位   </span></span><br><span class="line"><span class="built_in">UpdateKeyFrame</span>(); <span class="comment">// 更新keyframe与更新地图</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示</span></span><br><span class="line"><span class="keyword">static</span> uint id = <span class="number">0</span>;</span><br><span class="line">std::cout&lt;&lt;id++&lt;&lt;<span class="string">&quot; m_estimate_pose: &quot;</span>&lt;&lt;m_estimate_pose.<span class="built_in">transpose</span>()&lt;&lt;std::endl;</span><br><span class="line">m_map_manager-&gt;<span class="built_in">DisplayGridMap</span>(m_scan_matcher-&gt;<span class="built_in">GetGridMap</span>(), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peitianyu/lite_slam&quot;&gt;peitianyu/l</summary>
      
    
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/categories/lite-slam/"/>
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/tags/lite-slam/"/>
    
  </entry>
  
  <entry>
    <title>lite_slam - 文章索引</title>
    <link href="https://peitianyu.github.io/blog/2022/09/05/lite_slam-%E6%96%87%E7%AB%A0%E7%B4%A2%E5%BC%95/"/>
    <id>https://peitianyu.github.io/blog/2022/09/05/lite_slam-%E6%96%87%E7%AB%A0%E7%B4%A2%E5%BC%95/</id>
    <published>2022-09-05T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:08.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章索引"><a href="#文章索引" class="headerlink" title="文章索引"></a>文章索引</h1><p><a href="https://blog.csdn.net/qq_30554779/article/details/126752121?spm=1001.2014.3001.5502">从零开始构建2d激光slam-0.整体框架简介</a></p><p><a href="https://blog.csdn.net/qq_30554779/article/details/126752232?spm=1001.2014.3001.5502">从零开始构建2d激光slam-1.概率地图</a></p><p><a href="https://blog.csdn.net/qq_30554779/article/details/126752249?spm=1001.2014.3001.5502">从零开始构建2d激光slam-2.激光里程计</a></p><p><a href="https://blog.csdn.net/qq_30554779/article/details/126752338?spm=1001.2014.3001.5502">从零开始构建2d激光slam-3.回环检测</a></p><p><a href="https://blog.csdn.net/qq_30554779/article/details/126752287?spm=1001.2014.3001.5502">从零开始构建2d激光slam-4.图优化</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文章索引&quot;&gt;&lt;a href=&quot;#文章索引&quot; class=&quot;headerlink&quot; title=&quot;文章索引&quot;&gt;&lt;/a&gt;文章索引&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_30554779/article/details/126</summary>
      
    
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/categories/lite-slam/"/>
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/tags/lite-slam/"/>
    
  </entry>
  
  <entry>
    <title>lite_slam - grid_map模块</title>
    <link href="https://peitianyu.github.io/blog/2022/09/05/lite_slam1/"/>
    <id>https://peitianyu.github.io/blog/2022/09/05/lite_slam1/</id>
    <published>2022-09-05T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:08.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/peitianyu/lite_slam">peitianyu/lite_slam (github.com)</a></p><h1 id="GridMap框架"><a href="#GridMap框架" class="headerlink" title="GridMap框架"></a>GridMap框架</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. GridMapBase作为基类派生GridMapDownSamlple,GridMapUtils</span><br><span class="line">2. GridManage用于读取,显示,保存GridMap</span><br><span class="line">3. GridSubMap实现子图功能</span><br></pre></td></tr></table></figure><h1 id="GridMapBase"><a href="#GridMapBase" class="headerlink" title="GridMapBase"></a>GridMapBase</h1><h3 id="参考网址-1"><a href="#参考网址-1" class="headerlink" title="参考网址"></a>参考网址</h3><p><a href="https://zhuanlan.zhihu.com/p/339812617">如何理解概率栅格地图（Probability Grid Map）&amp; 概率更新公式 - 知乎 (zhihu.com)</a></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关于配置参数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Params</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> resolution = <span class="number">0.05</span>; <span class="comment">// meter / pixel</span></span><br><span class="line">    Eigen::Vector2i size = Eigen::<span class="built_in">Vector2i</span>(<span class="number">2000</span>, <span class="number">2000</span>); <span class="comment">//地图尺寸</span></span><br><span class="line">    Eigen::Vector2f origin = Eigen::<span class="built_in">Vector2f</span>(<span class="number">-60.0f</span>, <span class="number">-60.0f</span>); <span class="comment">// 右上角为(0, 0)的建图原点</span></span><br><span class="line">    <span class="keyword">float</span> log_odds_p_occ = <span class="number">0.6f</span>; <span class="comment">// 更新地图格式为log(odds), 遇到障碍物会增加此值,反之减小此值,具体接下来代码与文献有讲解</span></span><br><span class="line">    <span class="keyword">float</span> log_odds_p_free = <span class="number">0.4f</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="对于概率图理解"><a href="#对于概率图理解" class="headerlink" title="对于概率图理解"></a>对于概率图理解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Q: 为何使用log-odds表示概率图</span><br><span class="line">A: 由于激光打在障碍物上的概率符合正太分布,因此可以写成标准正太分布形式,</span><br><span class="line">   又由于exp()相乘计算复杂,所以将其保存为log-odds形式进行加法运算,加快计算速度.</span><br><span class="line">   当然还有一个考虑,在log-odds在0附近变化剧烈,这样可以尽快将占用与空闲分开</span><br></pre></td></tr></table></figure><h3 id="代码体现"><a href="#代码体现" class="headerlink" title="代码体现"></a>代码体现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存格式为MatrixXf m_data</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GridMapBase::SetCellOccupied</span><span class="params">(<span class="keyword">const</span> Eigen::Vector2i&amp; cell_index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">IsValid</span>(cell_index))</span><br><span class="line">        <span class="built_in">m_data</span>(<span class="built_in">cell_index</span>(<span class="number">0</span>), <span class="built_in">cell_index</span>(<span class="number">1</span>)) += m_params.log_odds_p_occ; <span class="comment">// 只是对对应位置的log-odds进行加减操作,减小了计算量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GridMapBase::SetCellFree</span><span class="params">(<span class="keyword">const</span> Eigen::Vector2i&amp; cell_index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">IsValid</span>(cell_index))</span><br><span class="line">        <span class="built_in">m_data</span>(<span class="built_in">cell_index</span>(<span class="number">0</span>), <span class="built_in">cell_index</span>(<span class="number">1</span>)) -= m_params.log_odds_p_free; <span class="comment">// 只是对对应位置的log-odds进行加减操作,减小了计算量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">GridMapBase::GetCellProb</span><span class="params">(<span class="keyword">const</span> Eigen::Vector2i&amp; cell_index)</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">IsValid</span>(cell_index)) <span class="keyword">return</span> <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> odds = std::<span class="built_in">exp</span>(<span class="built_in">GetCellLogOdds</span>(cell_index)); <span class="comment">// log-odds2odds</span></span><br><span class="line">    <span class="keyword">float</span> prob = (odds / (odds + <span class="number">1</span>)); <span class="comment">// odds2prob</span></span><br><span class="line">    <span class="keyword">if</span>(std::<span class="built_in">isnan</span>(prob)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> prob;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对于map的常见工具"><a href="#对于map的常见工具" class="headerlink" title="对于map的常见工具"></a>对于map的常见工具</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得非0最大矩阵</span></span><br><span class="line"><span class="function">Eigen::Matrix2i <span class="title">GridMapBase::GetMapLimit</span><span class="params">()</span> <span class="keyword">const</span> <span class="comment">// top-bottom, left-right</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Matrix2i map_limit = Eigen::Matrix2i::<span class="built_in">Zero</span>();</span><br><span class="line">    map_limit &lt;&lt; m_params.<span class="built_in">size</span>(<span class="number">1</span>) , <span class="number">0</span>, m_params.<span class="built_in">size</span>(<span class="number">0</span>) , <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_params.<span class="built_in">size</span>(<span class="number">0</span>); i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_params.<span class="built_in">size</span>(<span class="number">1</span>); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(<span class="built_in">m_data</span>(i,j)) &gt; <span class="number">1.0f</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; <span class="built_in">map_limit</span>(<span class="number">0</span>,<span class="number">0</span>)) &#123;<span class="built_in">map_limit</span>(<span class="number">0</span>,<span class="number">0</span>) = i;&#125;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="built_in">map_limit</span>(<span class="number">0</span>,<span class="number">1</span>)) &#123;<span class="built_in">map_limit</span>(<span class="number">0</span>,<span class="number">1</span>) = i;&#125;</span><br><span class="line">                <span class="keyword">if</span>(j &lt; <span class="built_in">map_limit</span>(<span class="number">1</span>,<span class="number">0</span>)) &#123;<span class="built_in">map_limit</span>(<span class="number">1</span>,<span class="number">0</span>) = j;&#125;</span><br><span class="line">                <span class="keyword">if</span>(j &gt; <span class="built_in">map_limit</span>(<span class="number">1</span>,<span class="number">1</span>)) &#123;<span class="built_in">map_limit</span>(<span class="number">1</span>,<span class="number">1</span>) = j;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map_limit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否合法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GridMapBase::IsValid</span><span class="params">(<span class="keyword">const</span> Eigen::Vector2i&amp; cell_index)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">cell_index</span>(<span class="number">0</span>) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">cell_index</span>(<span class="number">0</span>) &lt; m_params.<span class="built_in">size</span>(<span class="number">0</span>) &amp;&amp; <span class="built_in">cell_index</span>(<span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">cell_index</span>(<span class="number">1</span>) &lt; m_params.<span class="built_in">size</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GridMapUtils"><a href="#GridMapUtils" class="headerlink" title="GridMapUtils"></a>GridMapUtils</h1><h2 id="框架理解"><a href="#框架理解" class="headerlink" title="框架理解"></a>框架理解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 更新概率地图 - bresenham(好处: 只用了整形加减,降低计算量)</span><br><span class="line">2. 世界坐标与地图坐标相互转换</span><br></pre></td></tr></table></figure><h2 id="更新概率地图"><a href="#更新概率地图" class="headerlink" title="更新概率地图"></a>更新概率地图</h2><h3 id="代码框架"><a href="#代码框架" class="headerlink" title="代码框架"></a>代码框架</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: 当前robot_in_world_pose与scan_points</span><br><span class="line">0. robot_in_world_pose转化为地图坐标作为起始点</span><br><span class="line">1. 对于每一个scan_point转化为世界坐标作为终点</span><br><span class="line">2. 使用bresenham画线</span><br></pre></td></tr></table></figure><h3 id="参考网址-2"><a href="#参考网址-2" class="headerlink" title="参考网址"></a>参考网址</h3><p><a href="https://www.jianshu.com/p/d63bf63a0e28">Bresenham画线算法 - 简书 (jianshu.com)</a></p><h3 id="代码体现-1"><a href="#代码体现-1" class="headerlink" title="代码体现"></a>代码体现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GridMapUtils::UpdateByScan</span><span class="params">(<span class="keyword">const</span> Eigen::Vector3f&amp; pose_in_world, <span class="keyword">const</span> std::vector&lt;Eigen::Vector2f&gt;&amp; scan_points)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Eigen::Vector3f pose_in_map = <span class="built_in">WorldToMapFloat</span>(pose_in_world); <span class="comment">// 转化为地图坐标</span></span><br><span class="line">Eigen::Vector2i begin_point_in_map_int = Eigen::<span class="built_in">Vector2i</span>(<span class="built_in">pose_in_map</span>(<span class="number">0</span>), <span class="built_in">pose_in_map</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Eigen::Vector2f point : scan_points)</span><br><span class="line">&#123;</span><br><span class="line">Eigen::Vector2f end_point_in_world = <span class="built_in">LaserPointToWorld</span>(point, pose_in_world);</span><br><span class="line"></span><br><span class="line">Eigen::Vector2f end_point_in_map = <span class="built_in">WorldToMapFloat</span>(end_point_in_world);</span><br><span class="line"></span><br><span class="line"><span class="function">Eigen::Vector2i <span class="title">end_point_in_map_int</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;( ::round(end_point_in_map(<span class="number">0</span>))), <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;( ::round(end_point_in_map(<span class="number">1</span>))))</span></span>; <span class="comment">// 转化为世界坐标系下的地图坐标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(begin_point_in_map_int != end_point_in_map_int)</span><br><span class="line"><span class="built_in">InverseModel</span>(begin_point_in_map_int, end_point_in_map_int); <span class="comment">// bresenham画线</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GridMapUtils::InverseModel</span><span class="params">(<span class="keyword">const</span> Eigen::Vector2i &amp;p0, <span class="keyword">const</span> Eigen::Vector2i &amp;p1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">BresenhamCellOccupied</span>(p1); <span class="comment">// 更新占用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">BresenhamCellFree</span>(p0, p1); <span class="comment">// 更新空闲</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GridMapUtils::BrasenHam</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> dx = ::<span class="built_in">abs</span>( x1 - x0 );</span><br><span class="line"><span class="keyword">int</span> dy = ::<span class="built_in">abs</span>( y1 - y0 );</span><br><span class="line"><span class="keyword">bool</span> inter_change = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> e = -dx;<span class="comment">// error</span></span><br><span class="line"><span class="keyword">int</span> signX = x1 &gt; x0 ? <span class="number">1</span> : ( ( x1 &lt; x0 ) ? <span class="number">-1</span> : <span class="number">0</span> );</span><br><span class="line"><span class="keyword">int</span> signY = y1 &gt; y0 ? <span class="number">1</span> : ( ( y1 &lt; y0 ) ? <span class="number">-1</span> : <span class="number">0</span> );</span><br><span class="line"><span class="keyword">if</span> (dy &gt; dx) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = dx; dx = dy; dy = temp; inter_change = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = x0, y = y0;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= dx; i++) &#123; </span><br><span class="line">m_down_map-&gt;<span class="built_in">SetCellFree</span>(Eigen::<span class="built_in">Vector2i</span>(x, y)); <span class="comment">// 更新空闲</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!inter_change) &#123;x += signX;&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;y += signY;&#125;</span><br><span class="line">e += <span class="number">2</span> * dy;</span><br><span class="line"><span class="keyword">if</span> (e &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!inter_change) &#123;y += signY;&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;x += signX;&#125;</span><br><span class="line">e -= <span class="number">2</span> * dx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="世界坐标与地图坐标相互转换"><a href="#世界坐标与地图坐标相互转换" class="headerlink" title="世界坐标与地图坐标相互转换"></a>世界坐标与地图坐标相互转换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 根据对地图的定义,实现世界坐标与地图坐标转换</span><br><span class="line">2. 优化: 填加根据不同地图方向转化坐标的功能</span><br></pre></td></tr></table></figure><h3 id="代码实现-没啥技术含量-直接看源码"><a href="#代码实现-没啥技术含量-直接看源码" class="headerlink" title="代码实现(没啥技术含量,  直接看源码)"></a>代码实现(没啥技术含量,  直接看源码)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Vector2f <span class="title">LaserInScaledLaser</span><span class="params">(<span class="keyword">const</span> Eigen::Vector2f&amp; laser_point)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Eigen::Vector2f <span class="title">LaserPointToWorld</span><span class="params">(<span class="keyword">const</span> Eigen::Vector2f&amp; point_in_laser, <span class="keyword">const</span> Eigen::Vector3f&amp; pose_in_world)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Eigen::Vector3f <span class="title">WorldToMapFloat</span><span class="params">(<span class="keyword">const</span> Eigen::Vector3f&amp; pose_in_world)</span> <span class="keyword">const</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">Eigen::Vector2f <span class="title">WorldToMapFloat</span><span class="params">(<span class="keyword">const</span> Eigen::Vector2f&amp; point_in_world)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Eigen::Vector3f <span class="title">MapToWorldFloat</span><span class="params">(<span class="keyword">const</span> Eigen::Vector3f&amp; pose_in_map)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><h1 id="GridMapDownSamlple"><a href="#GridMapDownSamlple" class="headerlink" title="GridMapDownSamlple"></a>GridMapDownSamlple</h1><h2 id="降采样地图理解"><a href="#降采样地图理解" class="headerlink" title="降采样地图理解"></a>降采样地图理解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0. 继承GridMapBase</span><br><span class="line">1. 对上层地图长宽降采样为原来一半</span><br><span class="line">2. 采用上层地图四方格log-odds中最大的作为下层地图log-odds值(可根据自己需要定义,比如采用高斯核降采样等)</span><br></pre></td></tr></table></figure><h3 id="代码体现-2"><a href="#代码体现-2" class="headerlink" title="代码体现"></a>代码体现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">DownSampleMap::<span class="built_in">DownSampleMap</span>(<span class="keyword">const</span> Params&amp; p)</span><br><span class="line">:<span class="built_in">GridMapBase</span>(p)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若输入原始地图,则将其作为降采样地图 </span></span><br><span class="line">DownSampleMap::<span class="built_in">DownSampleMap</span>(<span class="keyword">const</span> GridMapBase&amp; grid_map)</span><br><span class="line">&#123;</span><br><span class="line">    m_params = grid_map.<span class="built_in">GetParams</span>();</span><br><span class="line">    m_data.<span class="built_in">setZero</span>();</span><br><span class="line">    m_data = grid_map.<span class="built_in">GetData</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若输入降采样地图,则将其降采样 </span></span><br><span class="line">DownSampleMap::<span class="built_in">DownSampleMap</span>(<span class="keyword">const</span> DownSampleMap&amp; down_map)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 重新设置配置文件</span></span><br><span class="line">    m_params = down_map.<span class="built_in">GetParams</span>();</span><br><span class="line">    m_params.resolution = down_map.<span class="built_in">GetResolution</span>() * <span class="number">2.0</span>;</span><br><span class="line">    m_params.size = Eigen::<span class="built_in">Vector2i</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(down_map.<span class="built_in">GetSize</span>()(<span class="number">0</span>) / <span class="number">2.0</span> + <span class="number">0.5</span>), <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(down_map.<span class="built_in">GetSize</span>()(<span class="number">1</span>) / <span class="number">2.0</span> + <span class="number">0.5</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据配置文件重新设置地图大小,并初始化</span></span><br><span class="line">    m_data.<span class="built_in">resize</span>(m_params.<span class="built_in">size</span>(<span class="number">0</span>), m_params.<span class="built_in">size</span>(<span class="number">1</span>)); </span><br><span class="line">    m_data.<span class="built_in">setConstant</span>(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; m_params.<span class="built_in">size</span>(<span class="number">0</span>); row++)&#123; <span class="comment">// 实现了四个方格中取最大值操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; m_params.<span class="built_in">size</span>(<span class="number">1</span>); col++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">m_data</span>(row, col) = (<span class="built_in">m_data</span>(row, col) &lt; <span class="built_in">fabs</span>(down_map.<span class="built_in">GetCellLogOdds</span>(Eigen::<span class="built_in">Vector2i</span>(<span class="number">2</span> * row + i, <span class="number">2</span> * col + j)))) ? </span><br><span class="line">                down_map.<span class="built_in">GetCellLogOdds</span>(Eigen::<span class="built_in">Vector2i</span>(<span class="number">2</span> * row + i, <span class="number">2</span> * col + j)):<span class="built_in">m_data</span>(row, col);   </span><br><span class="line">        &#125;    </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GridManage"><a href="#GridManage" class="headerlink" title="GridManage"></a>GridManage</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要用于保存,显示,读取概率地图</span><br></pre></td></tr></table></figure><h3 id="代码实现-没啥技术含量-直接看源码-1"><a href="#代码实现-没啥技术含量-直接看源码-1" class="headerlink" title="代码实现(没啥技术含量,  直接看源码)"></a>代码实现(没啥技术含量,  直接看源码)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveGridMap</span><span class="params">(<span class="keyword">const</span> std::string&amp; datafile, std::shared_ptr&lt;GridMapBase&gt; grid_map)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveProbMap</span><span class="params">(<span class="keyword">const</span> std::string&amp; datafile, std::shared_ptr&lt;GridMapBase&gt; grid_map)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadGridMap</span><span class="params">(<span class="keyword">const</span> std::string&amp; datafile, std::shared_ptr&lt;GridMapBase&gt;&amp; grid_map)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayGridMap</span><span class="params">(std::shared_ptr&lt;GridMapBase&gt; grid_map, <span class="keyword">const</span> uint&amp; type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveMapPng</span><span class="params">(std::shared_ptr&lt;GridMapBase&gt; grid_map, <span class="keyword">const</span> std::string&amp; datafile)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="GridSubMap"><a href="#GridSubMap" class="headerlink" title="GridSubMap"></a>GridSubMap</h1><h2 id="总体思路-待完成"><a href="#总体思路-待完成" class="headerlink" title="总体思路(待完成)"></a>总体思路(待完成)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. </span><br><span class="line">struct&#123;</span><br><span class="line">uint id;</span><br><span class="line">Eigen::Vector3f map_pose;</span><br><span class="line">std::shared_ptr&lt;GridMapBase&gt; gird_map;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">2. submap回环:</span><br><span class="line">1.</span><br><span class="line">- 通过scan_context查找周围几个submap判断回环,减低计算量</span><br><span class="line">- 根据回环点优化相关submap并更新子图与key_frames</span><br><span class="line">2.</span><br><span class="line">- csm + 分支定界 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peitianyu/lite_slam&quot;&gt;peitianyu/l</summary>
      
    
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/categories/lite-slam/"/>
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/tags/lite-slam/"/>
    
  </entry>
  
  <entry>
    <title>lite_slam - PoseGraphOptimize</title>
    <link href="https://peitianyu.github.io/blog/2022/09/05/lite_slam4/"/>
    <id>https://peitianyu.github.io/blog/2022/09/05/lite_slam4/</id>
    <published>2022-09-05T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:08.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/peitianyu/lite_slam">peitianyu/lite_slam (github.com)</a></p><p><a href="https://github.com/versatran01/graphslam">versatran01/graphslam: graphslam (github.com)</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A Tutorial on Graph-Based SLAM</span><br></pre></td></tr></table></figure><h1 id="GraphOptimize"><a href="#GraphOptimize" class="headerlink" title="GraphOptimize"></a>GraphOptimize</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 使用了Cholesky分解加速</span><br><span class="line">- 优化方向: </span><br><span class="line">- 由于使用的是scan_points具有角度不变性,因此可以将3 * num的H,降低为2 * num,降低计算量</span><br><span class="line">- 加入残差判断</span><br></pre></td></tr></table></figure><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddVertex</span><span class="params">(<span class="keyword">const</span> uint &amp;id, <span class="keyword">const</span> Eigen::Vector3f &amp;pose)</span></span>; <span class="comment">// 添加顶点 std::map&lt;uint, Eigen::Vector3f&gt; vertex</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">const</span> uint &amp;from_id, <span class="keyword">const</span> uint &amp;to_id, <span class="keyword">const</span> Eigen::Vector3f &amp;measurement, <span class="keyword">const</span> Eigen::Matrix3f &amp;info_matrix)</span></span>;<span class="comment">// 添加边约束 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Optimize</span><span class="params">()</span></span>; <span class="comment">// 通过高斯牛顿优化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> std::vector&lt;Eigen::Vector3f&gt; &amp;<span class="title">GetOptimizedPoses</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 获得优化后坐标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> std::map&lt;uint, Eigen::Vector3f&gt; &amp;<span class="title">GetOptimizedVertexes</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 获得优化后顶点</span></span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphOptimize::EstimateOnce</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::MatrixXf H = Eigen::MatrixXf::<span class="built_in">Zero</span>(m_vertex.<span class="built_in">size</span>() * <span class="number">3</span>, m_vertex.<span class="built_in">size</span>() * <span class="number">3</span>); <span class="comment">// 之后优化这部分</span></span><br><span class="line">    Eigen::VectorXf b = Eigen::VectorXf::<span class="built_in">Zero</span>(m_vertex.<span class="built_in">size</span>() * <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">GetHessianDerived</span>(H, b); </span><br><span class="line"></span><br><span class="line">    Eigen::SimplicialLDLT&lt;Eigen::SparseMatrix&lt;<span class="keyword">float</span>&gt;&gt; solver;</span><br><span class="line">    solver.<span class="built_in">compute</span>(H.<span class="built_in">sparseView</span>());</span><br><span class="line">    <span class="keyword">if</span>(solver.<span class="built_in">info</span>() != Eigen::Success)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    Eigen::VectorXf d_x = Eigen::VectorXf::<span class="built_in">Zero</span>(m_vertex.<span class="built_in">size</span>() * <span class="number">3</span>);</span><br><span class="line">    d_x = solver.<span class="built_in">solve</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(solver.<span class="built_in">info</span>() != Eigen::Success)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    m_ret_poses.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;vertice : m_vertex)</span><br><span class="line">    &#123;</span><br><span class="line">        vertice.second += d_x.segment&lt;<span class="number">3</span>&gt;(vertice.first * <span class="number">3</span>);</span><br><span class="line">        m_ret_poses.<span class="built_in">push_back</span>(vertice.second);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NormalizePose</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peitianyu/lite_slam&quot;&gt;peitianyu/l</summary>
      
    
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/categories/lite-slam/"/>
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/tags/lite-slam/"/>
    
  </entry>
  
  <entry>
    <title>lite_slam - ScanContext</title>
    <link href="https://peitianyu.github.io/blog/2022/09/05/lite_slam3/"/>
    <id>https://peitianyu.github.io/blog/2022/09/05/lite_slam3/</id>
    <published>2022-09-05T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:08.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/peitianyu/lite_slam">peitianyu/lite_slam (github.com)</a></p><p><a href="https://peitianyu.github.io/blog/2022/03/06/scan_context/">scan_context | 某飞行员的随笔 (peitianyu.github.io)</a></p><h1 id="ScanContext"><a href="#ScanContext" class="headerlink" title="ScanContext"></a>ScanContext</h1><h2 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 构建KeyFrame(id, pose, key, scan_context)</span><br><span class="line">- 输入(id, pose, scan)MakeScanContext构造scan_context</span><br><span class="line">- 这里key使用scan_context在ring方向上pca构造</span><br><span class="line">- AddKeyFrame添加关键帧用于之后的匹配</span><br><span class="line">- DetectLoopClosure()寻找回环id并输出回环坐标</span><br><span class="line"></span><br><span class="line">- 关键:</span><br><span class="line">* scan_context构建</span><br><span class="line">* key构建</span><br><span class="line">* nanoflann构建kdtree并搜索key</span><br><span class="line">* AlignScanContext()对齐scan_context获得先验坐标</span><br></pre></td></tr></table></figure><h1 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 将距离分成60份,角度分成60份,组成60*60矩阵,然后对距离pca化得到60维向量</span><br><span class="line">2. 通过kdtree搜索key找到回环</span><br><span class="line">3. 通过对齐60*60矩阵找到粗匹配,距离偏差与角度偏差,得到d_pose</span><br><span class="line">4. 在loop_pose基础变换得到粗匹配值</span><br></pre></td></tr></table></figure><h2 id="代码体现"><a href="#代码体现" class="headerlink" title="代码体现"></a>代码体现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AddKeyFrame()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ScanContext::AddKeyFrame</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> &amp;id, <span class="keyword">const</span> Eigen::Vector3f&amp; curr_pose, <span class="keyword">const</span> std::vector&lt;Eigen::Vector2f&gt; &amp;scan)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::MatrixXf scan_context = <span class="built_in">MakeScanContext</span>(scan);</span><br><span class="line">    KeyFrame key_frame = KeyFrame&#123;id, curr_pose, scan_context&#125;;</span><br><span class="line">    m_key_frames-&gt;<span class="built_in">push_back</span>(key_frame);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建pca_key</span></span><br><span class="line"><span class="function">Eigen::VectorXf <span class="title">CalculatePcaForKeyResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::MatrixXf tmp_scan_context = scan_context;</span><br><span class="line">    tmp_scan_context.<span class="built_in">colwise</span>() -= tmp_scan_context.<span class="built_in">rowwise</span>().<span class="built_in">mean</span>();</span><br><span class="line">    Eigen::MatrixXf cov = tmp_scan_context.<span class="built_in">transpose</span>() * tmp_scan_context * (<span class="number">1</span> / tmp_scan_context.<span class="built_in">rows</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="function">Eigen::SelfAdjointEigenSolver&lt;Eigen::MatrixXf&gt; <span class="title">eigen_solver</span><span class="params">(cov)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eigen_solver.<span class="built_in">eigenvectors</span>().<span class="built_in">rightCols</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回环流程</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">ScanContext::DetectLoopClosure</span><span class="params">(<span class="keyword">const</span> std::vector&lt;Eigen::Vector2f&gt; &amp;scan, Eigen::Vector3f &amp;loop_pose)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::MatrixXf scan_context = <span class="built_in">MakeScanContext</span>(scan);</span><br><span class="line">    KeyFrame key_frame = KeyFrame&#123;std::numeric_limits&lt;<span class="keyword">size_t</span>&gt;::<span class="built_in">max</span>(), Eigen::Vector3f::<span class="built_in">Zero</span>(), scan_context&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m_key_frames-&gt;<span class="built_in">size</span>() &lt; m_params.num_exclude_recent + <span class="number">1</span>)&#123; <span class="comment">// 排除最接近的一定数量特征匹配</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::vector&lt;<span class="keyword">size_t</span>&gt; <span class="title">indexes</span><span class="params">(m_params.leaf_max_size)</span></span>;</span><br><span class="line">    <span class="built_in">FindNearestNeighbor</span>(key_frame, *m_key_frames, indexes); <span class="comment">// nanoflann搜索</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> min_dist = std::numeric_limits&lt;<span class="keyword">float</span>&gt;::<span class="built_in">max</span>(); <span class="comment">// 求最近的一个</span></span><br><span class="line">    <span class="keyword">size_t</span> nearest_id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> &amp;index: indexes)&#123;</span><br><span class="line">        <span class="keyword">float</span> dist = (m_key_frames-&gt;key_frames[index].key_pose.<span class="built_in">head</span>(<span class="number">2</span>) - key_frame.key_pose.<span class="built_in">head</span>(<span class="number">2</span>)).<span class="built_in">norm</span>();</span><br><span class="line">        <span class="keyword">if</span>(dist &lt; min_dist)&#123;</span><br><span class="line">            min_dist = dist; nearest_id = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(min_dist &lt; m_params.min_dist)&#123; </span><br><span class="line">        Eigen::Vector3f delta_pose = <span class="built_in">AlignScanContext</span>(scan_context, m_key_frames-&gt;key_frames[nearest_id].scan_context);</span><br><span class="line">        loop_pose = <span class="built_in">TransformAdd</span>(m_key_frames-&gt;key_frames[nearest_id].key_pose, delta_pose); <span class="comment">//通过对齐输出回环先验坐标</span></span><br><span class="line">        <span class="built_in">NormalizePose</span>(loop_pose);</span><br><span class="line">        <span class="keyword">return</span> m_key_frames-&gt;key_frames[nearest_id].id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建scan_context</span></span><br><span class="line"><span class="function">Eigen::MatrixXf <span class="title">ScanContext::MakeScanContext</span><span class="params">(<span class="keyword">const</span> std::vector&lt;Eigen::Vector2f&gt; &amp;scan)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Eigen::MatrixXf <span class="title">scan_context</span><span class="params">(m_params.num_ring, m_params.num_sector)</span></span>;</span><br><span class="line">    scan_context.<span class="built_in">setZero</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> point: scan)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">float</span> angle = std::<span class="built_in">atan2</span>(<span class="built_in">point</span>(<span class="number">0</span>), <span class="built_in">point</span>(<span class="number">1</span>)) / M_PI * <span class="number">180.0f</span> + <span class="number">180.0f</span>;</span><br><span class="line">        <span class="keyword">float</span> dist = std::<span class="built_in">hypot</span>(<span class="built_in">point</span>(<span class="number">0</span>), <span class="built_in">point</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dist &gt;= m_params.min_range &amp;&amp; dist &lt;= m_params.max_range)&#123;</span><br><span class="line">            <span class="keyword">int</span> ring = std::<span class="built_in">max</span>(std::<span class="built_in">min</span>(m_params.num_ring - <span class="number">1</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">round</span>((dist / m_params.max_range) * m_params.num_ring))), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> sector = std::<span class="built_in">max</span>(std::<span class="built_in">min</span>(m_params.num_sector - <span class="number">1</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">round</span>((angle / <span class="number">360.0f</span>) * m_params.num_sector))), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">scan_context</span>(ring, sector) += <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> scan_context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对齐scan_context用于输出先验坐标</span></span><br><span class="line"><span class="function">Eigen::Vector3f <span class="title">ScanContext::AlignScanContext</span><span class="params">(<span class="keyword">const</span> Eigen::MatrixXf &amp;curr_scan_context, <span class="keyword">const</span> Eigen::MatrixXf &amp;loop_scan_context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::MatrixXf tmp_scan_context = loop_scan_context;</span><br><span class="line">    <span class="keyword">float</span> sum = std::numeric_limits&lt;<span class="keyword">float</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="keyword">int</span> d_sector = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_params.num_sector; i++) <span class="comment">// 对列进行查找最接近的,求解偏差角度</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp_scan_context.<span class="built_in">setZero</span>();</span><br><span class="line">        tmp_scan_context.<span class="built_in">rightCols</span>(i) = loop_scan_context.<span class="built_in">leftCols</span>(i);</span><br><span class="line">        tmp_scan_context.<span class="built_in">leftCols</span>(m_params.num_sector - i) = loop_scan_context.<span class="built_in">rightCols</span>(m_params.num_sector - i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> d_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_params.num_sector; j++)&#123;</span><br><span class="line">            d_sum += <span class="built_in">fabs</span>(tmp_scan_context.<span class="built_in">col</span>(j).<span class="built_in">sum</span>() -  curr_scan_context.<span class="built_in">col</span>(j).<span class="built_in">sum</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( sum &gt; d_sum)&#123;</span><br><span class="line">            sum = d_sum; d_sector = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum = std::numeric_limits&lt;<span class="keyword">float</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="keyword">int</span> d_ring = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_params.num_ring; i++)<span class="comment">// 对行进行查找最接近的,求解偏差距离</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp_scan_context.<span class="built_in">setZero</span>();</span><br><span class="line">        tmp_scan_context.<span class="built_in">topRows</span>(i) = loop_scan_context.<span class="built_in">bottomRows</span>(i);</span><br><span class="line">        tmp_scan_context.<span class="built_in">bottomRows</span>(m_params.num_ring - i) = loop_scan_context.<span class="built_in">topRows</span>(m_params.num_ring - i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> d_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_params.num_ring; j++)&#123;</span><br><span class="line">            d_sum += <span class="built_in">fabs</span>(tmp_scan_context.<span class="built_in">row</span>(j).<span class="built_in">sum</span>() -  curr_scan_context.<span class="built_in">row</span>(j).<span class="built_in">sum</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( sum &gt; d_sum)&#123;</span><br><span class="line">            sum = d_sum; d_ring = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> tmp_d_ring = m_params.num_ring - d_ring;</span><br><span class="line">    <span class="keyword">if</span>(tmp_d_ring &gt; m_params.num_ring / <span class="number">2</span>) tmp_d_ring - m_params.num_ring; <span class="comment">// 求解距离偏差id</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> angle = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;((d_sector + <span class="number">0.5</span>) * <span class="number">360</span> / m_params.num_sector) / <span class="number">180.0f</span> * M_PI; <span class="comment">// 求解预测偏差角度</span></span><br><span class="line">    <span class="keyword">float</span> min_dist = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(tmp_d_ring + <span class="number">0.5</span>) * m_params.max_range / m_params.num_ring; <span class="comment">// 求解预测偏差距离</span></span><br><span class="line">    <span class="keyword">if</span>(angle &gt; M_PI) angle -= <span class="number">2</span> * M_PI;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Eigen::<span class="built_in">Vector3f</span>(min_dist * <span class="built_in">cos</span>(angle), min_dist * <span class="built_in">sin</span>(angle), angle); <span class="comment">// 输出d_pose</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peitianyu/lite_slam&quot;&gt;peitianyu/l</summary>
      
    
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/categories/lite-slam/"/>
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/tags/lite-slam/"/>
    
  </entry>
  
  <entry>
    <title>lite_slam - ScanMatch</title>
    <link href="https://peitianyu.github.io/blog/2022/09/05/lite_slam2/"/>
    <id>https://peitianyu.github.io/blog/2022/09/05/lite_slam2/</id>
    <published>2022-09-05T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:08.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/peitianyu/lite_slam">peitianyu/lite_slam (github.com)</a></p><p><a href="https://www.cnblogs.com/cyberniklee/p/8484104.html">Hector SLAM解读（1）原文翻译 - cyberniklee - 博客园 (cnblogs.com)</a></p><h2 id="ScanMatch"><a href="#ScanMatch" class="headerlink" title="ScanMatch"></a>ScanMatch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">目的主要是输出激光里程计,这里使用的是scantomap</span><br><span class="line">采用的数据集是r2000数据包,因此对于数据预处理比较简单,且定位精度足够</span><br><span class="line">为加快速度:</span><br><span class="line">- 多层地图(避免局部最优)</span><br><span class="line">- 多种分辨率滤波后的激光</span><br><span class="line">- 迭代残差足够小退出迭代</span><br><span class="line">整体流程:</span><br><span class="line">输入: pose, scan_points, grid_map(来源: 1, 建图 2, 加载)</span><br><span class="line">迭代直到更新距离足够小或者超出最大迭代次数</span><br><span class="line">输出: estimate_pose</span><br></pre></td></tr></table></figure><h2 id="迭代一次流程"><a href="#迭代一次流程" class="headerlink" title="迭代一次流程"></a>迭代一次流程</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ScanToMap::EstimateTransformationOnce</span><span class="params">(<span class="keyword">const</span> std::vector&lt;Eigen::Vector2f&gt; &amp;scan_points, std::shared_ptr&lt;GridMapUtils&gt; map_utils, Eigen::Vector3f &amp;estimate_in_world)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Matrix3f H = Eigen::Matrix3f::<span class="built_in">Zero</span>();</span><br><span class="line">    Eigen::Vector3f dTr = Eigen::Vector3f::<span class="built_in">Zero</span>();</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f last_estimate_pose = estimate_in_world;</span><br><span class="line">    <span class="built_in">GetHessianDerivative</span>(estimate_in_world, scan_points, map_utils, H, dTr); <span class="comment">// 求解海森矩阵, 通过高斯牛顿求解</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">H</span>(<span class="number">0</span>, <span class="number">0</span>) != <span class="number">0</span> || <span class="built_in">H</span>(<span class="number">1</span>, <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Eigen::Vector3f d_pose_in_map = H.<span class="built_in">inverse</span>() * dTr;</span><br><span class="line">        <span class="built_in">UpdateEstimatedPose</span>(map_utils, estimate_in_world, d_pose_in_map); <span class="comment">// 更新预测坐标</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">PoseDiffSmallerThan</span>(last_estimate_pose, estimate_in_world)) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 判断更新距离足够小,则退出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对于scantomap理解"><a href="#对于scantomap理解" class="headerlink" title="对于scantomap理解"></a>对于scantomap理解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 通过scan_point与grid_map匹配构建最小二乘,通过高斯牛顿求解</span><br><span class="line">2. 由于求解时发现grid_map是离散的需要线性化,所以进行双线性插补,得到线性化后map,即▽map</span><br><span class="line">3. 由于匹配时间过长以及担心局部最优,进行多分辨率地图设计</span><br></pre></td></tr></table></figure><h2 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h2><p><a href="https://imgse.com/i/v7JwZj"><img src="https://s1.ax1x.com/2022/09/06/v7JwZj.png" alt="v7JwZj.png"></a></p><h2 id="代码体现"><a href="#代码体现" class="headerlink" title="代码体现"></a>代码体现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ScanToMap::GetHessianDerivative</span><span class="params">(<span class="keyword">const</span> Eigen::Vector3f &amp;robot_in_world, <span class="keyword">const</span> std::vector&lt;Eigen::Vector2f&gt; &amp;scan_point, </span></span></span><br><span class="line"><span class="params"><span class="function">                                            std::shared_ptr&lt;GridMapUtils&gt; map_utils, Eigen::Matrix3f &amp;H, Eigen::Vector3f &amp;dTr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> ss = <span class="built_in">sin</span>(<span class="built_in">robot_in_world</span>(<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">float</span> cs = <span class="built_in">cos</span>(<span class="built_in">robot_in_world</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(uint i = <span class="number">0</span>; i &lt; scan_point.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Eigen::Vector2f point_in_scaled_laser = map_utils-&gt;<span class="built_in">LaserInScaledLaser</span>(scan_point[i]); <span class="comment">// 获得栅格化的laser_point</span></span><br><span class="line"></span><br><span class="line">        Eigen::Vector2f point_in_world = map_utils-&gt;<span class="built_in">LaserPointToWorld</span>(scan_point[i], robot_in_world); <span class="comment">// 求解世界坐标系下的point</span></span><br><span class="line"></span><br><span class="line">        Eigen::Vector2f point_in_map = map_utils-&gt;<span class="built_in">WorldToMapFloat</span>(point_in_world); <span class="comment">// 求解地图坐标系下的laser_point</span></span><br><span class="line"></span><br><span class="line">        Eigen::Vector3f interpolated_value = <span class="built_in">BilinearInterpolationWithDerivative</span>(point_in_map, map_utils); <span class="comment">// 双线性插补</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> func_val = <span class="number">1</span> - <span class="built_in">interpolated_value</span>(<span class="number">0</span>); <span class="comment">// 具体公式参考hector论文</span></span><br><span class="line">        <span class="built_in">dTr</span>(<span class="number">0</span>) += func_val * <span class="built_in">interpolated_value</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">dTr</span>(<span class="number">1</span>) += func_val * <span class="built_in">interpolated_value</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">float</span> rot_deriv = (<span class="built_in">interpolated_value</span>(<span class="number">1</span>) * (-ss * <span class="built_in">point_in_scaled_laser</span>(<span class="number">0</span>) - cs * <span class="built_in">point_in_scaled_laser</span>(<span class="number">1</span>)) +</span><br><span class="line">                           <span class="built_in">interpolated_value</span>(<span class="number">2</span>) * (cs * <span class="built_in">point_in_scaled_laser</span>(<span class="number">0</span>) - ss * <span class="built_in">point_in_scaled_laser</span>(<span class="number">1</span>)));</span><br><span class="line">        <span class="built_in">dTr</span>(<span class="number">2</span>) += rot_deriv * func_val;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">H</span>(<span class="number">0</span>, <span class="number">0</span>) += <span class="built_in">interpolated_value</span>(<span class="number">1</span>) * <span class="built_in">interpolated_value</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">H</span>(<span class="number">1</span>, <span class="number">1</span>) += <span class="built_in">interpolated_value</span>(<span class="number">2</span>) * <span class="built_in">interpolated_value</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">H</span>(<span class="number">2</span>, <span class="number">2</span>) += rot_deriv * rot_deriv;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">H</span>(<span class="number">0</span>, <span class="number">1</span>) += <span class="built_in">interpolated_value</span>(<span class="number">1</span>) * <span class="built_in">interpolated_value</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">H</span>(<span class="number">0</span>, <span class="number">2</span>) += <span class="built_in">interpolated_value</span>(<span class="number">1</span>) * rot_deriv;</span><br><span class="line">        <span class="built_in">H</span>(<span class="number">1</span>, <span class="number">2</span>) += <span class="built_in">interpolated_value</span>(<span class="number">2</span>) * rot_deriv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">H</span>(<span class="number">1</span>, <span class="number">0</span>) = <span class="built_in">H</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">H</span>(<span class="number">2</span>, <span class="number">0</span>) = <span class="built_in">H</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">H</span>(<span class="number">2</span>, <span class="number">1</span>) = <span class="built_in">H</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Eigen::Vector3f <span class="title">ScanToMap::BilinearInterpolationWithDerivative</span><span class="params">(<span class="keyword">const</span> Eigen::Vector2f &amp;point_in_map, std::shared_ptr&lt;GridMapUtils&gt; map_utils)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">float</span> factor0 = <span class="built_in">point_in_map</span>(<span class="number">0</span>) - <span class="built_in">floor</span>(<span class="built_in">point_in_map</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">float</span> factor1 = <span class="built_in">point_in_map</span>(<span class="number">1</span>) - <span class="built_in">floor</span>(<span class="built_in">point_in_map</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">float</span> factor0_inv = <span class="number">1</span> - factor0;</span><br><span class="line">    <span class="keyword">float</span> factor1_inv = <span class="number">1</span> - factor1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> p00 = map_utils-&gt;<span class="built_in">GetCellProb</span>(point_in_map.cast&lt;<span class="keyword">int</span>&gt;()); <span class="comment">// 栅格四角prob</span></span><br><span class="line">    <span class="keyword">float</span> p01 = map_utils-&gt;<span class="built_in">GetCellProb</span>(point_in_map.cast&lt;<span class="keyword">int</span>&gt;() + Eigen::<span class="built_in">Vector2i</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">float</span> p10 = map_utils-&gt;<span class="built_in">GetCellProb</span>(point_in_map.cast&lt;<span class="keyword">int</span>&gt;() + Eigen::<span class="built_in">Vector2i</span>(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">float</span> p11 = map_utils-&gt;<span class="built_in">GetCellProb</span>(point_in_map.cast&lt;<span class="keyword">int</span>&gt;() + Eigen::<span class="built_in">Vector2i</span>(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Eigen::<span class="built_in">Vector3f</span>(((factor1*(factor0*p11 + factor0_inv*p01)) + (factor1_inv * (factor0*p10 + factor0_inv*p00))),</span><br><span class="line">                                ( factor1 * ( p11 - p01 ) + factor1_inv * ( p10 - p00 ) ),</span><br><span class="line">                                ( factor0 * ( p11 - p10 ) + factor0_inv * ( p01 - p00 ) ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peitianyu/lite_slam&quot;&gt;peitianyu/l</summary>
      
    
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/categories/lite-slam/"/>
    
    
    <category term="lite_slam" scheme="https://peitianyu.github.io/blog/tags/lite-slam/"/>
    
  </entry>
  
  <entry>
    <title>滤波-互补滤波</title>
    <link href="https://peitianyu.github.io/blog/2022/06/15/%E6%BB%A4%E6%B3%A2-%E4%BA%92%E8%A1%A5%E6%BB%A4%E6%B3%A2/"/>
    <id>https://peitianyu.github.io/blog/2022/06/15/%E6%BB%A4%E6%B3%A2-%E4%BA%92%E8%A1%A5%E6%BB%A4%E6%B3%A2/</id>
    <published>2022-06-15T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:17.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p> <a href="https://blog.csdn.net/ysudykx/article/details/68945567">(139条消息) 一阶互补滤波_求索_free的博客-CSDN博客_一阶互补滤波</a> </p><h1 id="互补滤波基本公式"><a href="#互补滤波基本公式" class="headerlink" title="互补滤波基本公式"></a>互补滤波基本公式</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new_data = a * new_data + (<span class="number">1</span> - a) * last_data;</span><br><span class="line"><span class="comment">// a为时间常数,可以通过两次采样时间来确定</span></span><br><span class="line">a = T / (T + dt);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址&quot;&gt;&lt;/a&gt;参考网址&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/ysudykx/article/details/689455</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>非阻塞检测键盘</title>
    <link href="https://peitianyu.github.io/blog/2022/06/13/%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%A3%80%E6%B5%8B%E9%94%AE%E7%9B%98/"/>
    <id>https://peitianyu.github.io/blog/2022/06/13/%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%A3%80%E6%B5%8B%E9%94%AE%E7%9B%98/</id>
    <published>2022-06-13T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:15.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p> <a href="https://blog.csdn.net/zydlyq/article/details/50963360?ops_request_misc=%7B%22request_id%22:%22165510176816781667814216%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165510176816781667814216&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-50963360-null-null.142%5Ev14%5Epc_search_result_control_group,157%5Ev14%5Enew_3&utm_term=%E9%9D%9E%E9%98%BB%E5%A1%9Egetchar&spm=1018.2226.3001.4187">(138条消息) 嵌入式linux:getchar() 非阻塞_起点的博客-CSDN博客_getchar 非阻塞</a> </p><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于getchar() 函数会一直阻塞，网上搜到下面的函数来实现非阻塞的读取。实际使用的时候只需要调用kbhit() 函数即可。其他函数没有看是什么意思</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">ori_attr</span>, <span class="title">cur_attr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> __inline <span class="keyword">int</span> <span class="title">tty_reset</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;ori_attr) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> __inline <span class="keyword">int</span> <span class="title">tty_set</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">tcgetattr</span>(STDIN_FILENO, &amp;ori_attr))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;cur_attr, &amp;ori_attr, <span class="built_in"><span class="keyword">sizeof</span></span>(cur_attr));</span><br><span class="line">    cur_attr.c_lflag &amp;= ~ICANON;</span><br><span class="line">    <span class="comment">//        cur_attr.c_lflag |= ECHO;</span></span><br><span class="line">    cur_attr.c_lflag &amp;= ~ECHO;</span><br><span class="line">    cur_attr.c_cc[VMIN] = <span class="number">1</span>;</span><br><span class="line">    cur_attr.c_cc[VTIME] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;cur_attr) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> __inline <span class="keyword">int</span> <span class="title">kbhit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    fd_set rfds;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">    <span class="keyword">int</span> retval;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Watch stdin (fd 0) to see when it has input. */</span></span><br><span class="line">    <span class="built_in">FD_ZERO</span>(&amp;rfds);</span><br><span class="line">    <span class="built_in">FD_SET</span>(<span class="number">0</span>, &amp;rfds);</span><br><span class="line">    <span class="comment">/* Wait up to five seconds. */</span></span><br><span class="line">    tv.tv_sec = <span class="number">0</span>;</span><br><span class="line">    tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    retval = <span class="built_in">select</span>(<span class="number">1</span>, &amp;rfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv);</span><br><span class="line">    <span class="comment">/* Don&#x27;t rely on the value of tv now! */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retval == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;select()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (retval)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* FD_ISSET(0, &amp;rfds) will be true. */</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tty_set_flag;</span><br><span class="line">    tty_set_flag = <span class="built_in">tty_set</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">kbhit</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> key = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c pressed\n&quot;</span>, key);</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;&lt;no key detected&gt;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tty_set_flag == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">tty_reset</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kbhit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">oldt</span>, <span class="title">newt</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">int</span> oldf;</span><br><span class="line">    <span class="built_in">tcgetattr</span>(STDIN_FILENO, &amp;oldt);</span><br><span class="line">    newt = oldt;</span><br><span class="line">    newt.c_lflag &amp;= ~(ICANON | ECHO);</span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;newt);</span><br><span class="line">    oldf = <span class="built_in">fcntl</span>(STDIN_FILENO, F_GETFL, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fcntl</span>(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);</span><br><span class="line">    ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;oldt);</span><br><span class="line">    <span class="built_in">fcntl</span>(STDIN_FILENO, F_SETFL, oldf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ch != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ungetc</span>(ch, stdin);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">kbhit</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;keyboard hit\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="built_in">getchar</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;keyboard not hit\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址&quot;&gt;&lt;/a&gt;参考网址&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/zydlyq/article/details/5096336</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置cmake调试</title>
    <link href="https://peitianyu.github.io/blog/2022/06/07/vscode%E9%85%8D%E7%BD%AEcmake%E8%B0%83%E8%AF%95/"/>
    <id>https://peitianyu.github.io/blog/2022/06/07/vscode%E9%85%8D%E7%BD%AEcmake%E8%B0%83%E8%AF%95/</id>
    <published>2022-06-07T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:14.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p> <a href="https://blog.csdn.net/LiuXF93/article/details/123066248?ops_request_misc=%7B%22request_id%22:%22165460710316782388054405%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165460710316782388054405&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-7-123066248-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev13%5Econtrol&utm_term=vscode%E9%85%8D%E7%BD%AEcmake%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83&spm=1018.2226.3001.4187">(137条消息) Ubuntu下VsCode和CMake联合调试C++工程_还没想好~的博客-CSDN博客</a> </p><p> <a href="https://blog.csdn.net/Stone_OverLooking/article/details/109544940?ops_request_misc=%7B%22request_id%22:%22165460710316782388054405%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165460710316782388054405&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-9-109544940-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev13%5Econtrol&utm_term=vscode%E9%85%8D%E7%BD%AEcmake%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83&spm=1018.2226.3001.4187">(137条消息) Ubuntu下VSCode+Cmake配置开发环境_Stone_OverLooking的博客-CSDN博客</a> </p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="安装gdb"><a href="#安装gdb" class="headerlink" title="安装gdb"></a>安装gdb</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unable to start debugging. Launch ...... </span></span><br><span class="line">apt-get install gdb</span><br></pre></td></tr></table></figure><h2 id="cmake配置"><a href="#cmake配置" class="headerlink" title="cmake配置"></a>cmake配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置编译模式</span><br><span class="line">set( CMAKE_BUILD_TYPE &quot;Debug&quot; )</span><br><span class="line">set(CMAKE_CXX_FLAGS_DEBUG &quot;$ENV&#123;CXXFLAGS&#125; -O0 -Wall -g2 -ggdb&quot;)</span><br><span class="line">set(CMAKE_CXX_FLAGS_RELEASE &quot;$ENV&#123;CXXFLAGS&#125; -O3 -Wall&quot;)</span><br><span class="line">add_definitions(-std=c++11)</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. &amp;&amp; make -j8</span><br></pre></td></tr></table></figure><h2 id="c-cpp-properties-json"><a href="#c-cpp-properties-json" class="headerlink" title="c_cpp_properties.json"></a>c_cpp_properties.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Linux&quot;</span>,</span><br><span class="line">            <span class="comment">//本地标准头文件</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/usr/include&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/usr/local/include&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span> <span class="comment">//工作目录下的所有子路径</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;defines&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span>: <span class="string">&quot;/usr/bin/gcc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span>: <span class="string">&quot;c11&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span>: <span class="string">&quot;c++17&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span>: <span class="string">&quot;clang-x64&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;compileCommands&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/build/compile_commands.json&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/build/Groot&quot;</span>,<span class="comment">// 表示可执行程序所在的路径，其中，$&#123;workspaceRoot&#125;表示VScode加载的文件夹的根目录</span></span><br><span class="line">            <span class="comment">// &quot;program&quot;: &quot;$&#123;command:cmake.launchTargetPath&#125;&quot;,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;make build&quot;</span> <span class="comment">//###最好删了，不然会影响调试，每次调试都直接执行make build</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // See https://go.microsoft.com/fwlink/?LinkId=733558</span><br><span class="line">    // for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;make build&quot;, </span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;cd ./build ;cmake ../ ;make -8&quot;,</span><br><span class="line">            &quot;group&quot;: &#123;</span><br><span class="line">                &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">                &quot;isDefault&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;clean&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;make clean&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/LiuXF93/article/details/1230</summary>
      
    
    
    
    <category term="模板" scheme="https://peitianyu.github.io/blog/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="模板" scheme="https://peitianyu.github.io/blog/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>C++编译问题</title>
    <link href="https://peitianyu.github.io/blog/2022/06/03/C++%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/"/>
    <id>https://peitianyu.github.io/blog/2022/06/03/C++%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/</id>
    <published>2022-06-03T04:30:12.000Z</published>
    <updated>2022-10-17T01:18:02.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="error-extra-qualification"><a href="#error-extra-qualification" class="headerlink" title="error: extra qualification"></a>error: extra qualification</h1><p> <a href="https://blog.csdn.net/jianguo_liao19840726/article/details/8504354">(136条消息) c++ extra qualification_沈纵情的博客-CSDN博客_extra qualification</a> </p><p>error: extra qualification ‘int_item::’ on member ‘to_editor’ [-fpermissive]</p><p>将int_item::去掉即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;error-extra-qualification&quot;&gt;&lt;a href=&quot;#error-extra-qualification&quot; class=&quot;headerlink&quot; title=&quot;error: extra qualification&quot;&gt;&lt;/a&gt;error: ext</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
</feed>
