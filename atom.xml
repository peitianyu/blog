<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某飞行员的随笔</title>
  
  
  <link href="https://peitianyu.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://peitianyu.github.io/blog/"/>
  <updated>2021-11-26T06:12:11.961Z</updated>
  <id>https://peitianyu.github.io/blog/</id>
  
  <author>
    <name>某飞行员</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mk60+shell_letter</title>
    <link href="https://peitianyu.github.io/blog/2021/11/26/shell_letter/"/>
    <id>https://peitianyu.github.io/blog/2021/11/26/shell_letter/</id>
    <published>2021-11-26T04:30:12.000Z</published>
    <updated>2021-11-26T06:12:11.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/Mculover666/article/details/105141286?ops_request_misc=%7B%22request_id%22:%22163790121416780357282944%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163790121416780357282944&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-105141286.pc_search_mgc_flag&utm_term=%E5%B5%8C%E5%85%A5%E5%BC%8Fshell&spm=1018.2226.3001.4187">letter-shell | 一个功能强大的嵌入式shell_Mculover666的博客（嵌入式）-CSDN博客_letter shell</a></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//shell_port.c</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @briefshell移植到STM32L431时的接口实现</span></span><br><span class="line"><span class="comment"> * @authormculover666</span></span><br><span class="line"><span class="comment"> * @date2020/03/27 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;shell.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;shell_port.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 创建shell对象，开辟shell缓冲区 */</span></span><br><span class="line">Shell shell;</span><br><span class="line"><span class="keyword">char</span> shell_buffer[<span class="number">512</span>];</span><br><span class="line"><span class="comment">/* 2. 自己实现shell写函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shell写函数原型：typedef void (*shellWrite)(const char);</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 用户shell写</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param data 数据</span></span><br><span class="line"><span class="comment"> * @param len 数据长度</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return short 实际写入的数据长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="title">userShellWrite</span><span class="params">(<span class="keyword">char</span> *data, <span class="keyword">unsigned</span> <span class="keyword">short</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">UART_WriteByte(HW_UART0, data[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 编写初始化函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">User_Shell_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//注册自己实现的写函数</span></span><br><span class="line">    shell.write = userShellWrite;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用shell初始化函数</span></span><br><span class="line">    shellInit(&amp;shell, shell_buffer, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shell_port.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SHELL_PORT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>_SHELL_PORT_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;shell.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将shell定义为外部变量，在串口中断回调函数中还要使用 */</span></span><br><span class="line"><span class="keyword">extern</span> Shell shell;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明自己编写的初始化函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">User_Shell_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _SHELL_PORT_H_ */</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;common.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cpuidy.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;shell_port.h&quot;</span></span></span><br><span class="line"><span class="keyword">uint16_t</span> recv_buf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">char</span> ch, <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input int: %d, char: %c, string: %s\r\n&quot;</span>, i, ch, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UART_RX_ISR</span><span class="params">(<span class="keyword">uint16_t</span> byteReceived)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//调用shell处理数据的接口</span></span><br><span class="line">recv_buf = byteReceived;</span><br><span class="line">shellHandler(&amp;shell, recv_buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DelayInit();</span><br><span class="line">    <span class="keyword">uint32_t</span> instance = GPIO_QuickInit(HW_GPIOE, <span class="number">0</span>, kGPIO_Mode_OPP);</span><br><span class="line">    UART_QuickInit(UART0_RX_PA01_TX_PA02, <span class="number">115200</span>);</span><br><span class="line">    <span class="comment">/*  配置UART 中断配置 打开接收中断 安装中断回调函数 */</span></span><br><span class="line">    UART_CallbackRxInstall(HW_UART0, UART_RX_ISR);</span><br><span class="line">    <span class="comment">/* 打开串口接收中断功能 IT 就是中断的意思*/</span></span><br><span class="line">    UART_ITDMAConfig(HW_UART0, kUART_IT_Rx, <span class="literal">true</span>);</span><br><span class="line">    User_Shell_Init();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 闪烁小灯 */</span></span><br><span class="line">        GPIO_ToggleBit(HW_GPIOE, <span class="number">0</span>);</span><br><span class="line">        DelayMs(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出到命令列表里</span></span><br><span class="line">SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(<span class="number">0</span>)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_FUNC), test, test, test);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Mculover666/article/details/1</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>amcl原理分析</title>
    <link href="https://peitianyu.github.io/blog/2021/11/25/amcl%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://peitianyu.github.io/blog/2021/11/25/amcl%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</id>
    <published>2021-11-25T04:30:12.000Z</published>
    <updated>2021-11-25T09:33:29.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/p942005405/article/details/108569970?ops_request_misc=%7B%22request_id%22:%22163486681116780264091671%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163486681116780264091671&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-108569970.pc_search_ecpm_flag&utm_term=amcl&spm=1018.2226.3001.4187">slam 学习之 AMCL 概念与原理分析_学之知之的博客-CSDN博客_amcl定位原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/126199044">机器人定位技术：AMCL的参数你真的会调了吗？(一） - 知乎 (zhihu.com)</a></p><p>改写amcl</p><p><a href="https://zhuanlan.zhihu.com/p/28137335">ROS导航包源码学习2 — 定位 - 知乎 (zhihu.com)</a></p><h1 id="概念算法"><a href="#概念算法" class="headerlink" title="概念算法"></a>概念算法</h1><ul><li>运动模型(里程计模型)</li><li>测量模型(波束模型与似然域模型)</li><li>采样算法(KLD采样)</li><li>蒙特卡洛算法</li><li>自适应蒙特卡洛算法</li></ul><h1 id="运动模型"><a href="#运动模型" class="headerlink" title="运动模型"></a>运动模型</h1><p>关于<code>速度模型</code>与<code>里程计模型</code> ,主要采取<code>采样模型</code></p><p><a href="https://peitianyu.github.io/blog/2021/10/28/%E6%A6%82%E7%8E%87%E6%9C%BA%E5%99%A8%E4%BA%BA/">概率机器人</a></p><p>这里主要使用里程计模型</p><h1 id="测量模型"><a href="#测量模型" class="headerlink" title="测量模型"></a>测量模型</h1><p><code>波束模型</code>主要调整六个参数:<img src="https://www.zhihu.com/equation?tex=%5Calpha_%7Bhit%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=%5Calpha_%7Bshort%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=%5Calpha_%7Brand%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=%5Calpha_%7Bmax%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=b" alt="[公式]"> （ <img src="https://www.zhihu.com/equation?tex=P_%7Bhit%7D" alt="[公式]"> 的方差）和λ（动态障碍物的影响力度)</p><p><img src="https://pic4.zhimg.com/80/v2-d036db5bb440afe522b644db5bf3324f_720w.jpg" alt="img"></p><p>似然域模型主要调整两个参数<img src="https://www.zhihu.com/equation?tex=%5Calpha_%7Bhit%7D" alt="[公式]">  <img src="https://www.zhihu.com/equation?tex=%5Calpha_%7Brand%7D" alt="[公式]"> 。</p><p><img src="https://pic1.zhimg.com/80/v2-107260979458a0bffb5a1ba9e22d2168_720w.jpg" alt="img"></p><h1 id="KLD采样"><a href="#KLD采样" class="headerlink" title="KLD采样"></a>KLD采样</h1><p><strong>目的</strong>:<strong>将估计的概率分布转化为真实的概率分布。</strong></p><p><img src="https://img-blog.csdnimg.cn/20190720103418660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjUzMDIzOQ==,size_16,color_FFFFFF,t_70" alt="img"></p><h1 id="蒙特卡洛算法"><a href="#蒙特卡洛算法" class="headerlink" title="蒙特卡洛算法"></a>蒙特卡洛算法</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/p942005405/article/details/10</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>boost_thread</title>
    <link href="https://peitianyu.github.io/blog/2021/11/25/boost_thread/"/>
    <id>https://peitianyu.github.io/blog/2021/11/25/boost_thread/</id>
    <published>2021-11-25T04:30:12.000Z</published>
    <updated>2021-11-25T08:34:45.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p>了解boost</p><p><a href="https://zhuanlan.zhihu.com/p/66486828">C++ Boost库分类总结（个人收藏） - 知乎 (zhihu.com)</a></p><p>boost教程</p><p><a href="http://zh.highscore.de/cpp/boost/multithreading.html">Highscore - Boost C++ 库 - 多线程</a></p><h1 id="boost多线程同步简单使用"><a href="#boost多线程同步简单使用" class="headerlink" title="boost多线程同步简单使用"></a>boost多线程同步简单使用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> seconds)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  boost::this_thread::<span class="built_in">sleep</span>(boost::posix_time::<span class="built_in">seconds</span>(seconds)); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">boost::mutex mutex; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="built_in">wait</span>(<span class="number">1</span>); </span><br><span class="line">    mutex.<span class="built_in">lock</span>(); </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Thread &quot;</span> &lt;&lt; boost::this_thread::<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; i &lt;&lt; std::endl; </span><br><span class="line">    mutex.<span class="built_in">unlock</span>(); </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="function">boost::thread <span class="title">t1</span><span class="params">(thread)</span></span>; </span><br><span class="line">  <span class="function">boost::thread <span class="title">t2</span><span class="params">(thread)</span></span>; </span><br><span class="line">  t1.<span class="built_in">join</span>(); </span><br><span class="line">  t2.<span class="built_in">join</span>(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;了解boost&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/6648682</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>amcl简单使用</title>
    <link href="https://peitianyu.github.io/blog/2021/11/25/amcl%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://peitianyu.github.io/blog/2021/11/25/amcl%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-11-25T04:30:12.000Z</published>
    <updated>2021-11-25T08:55:51.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/zx3517288/article/details/78454196">AMCL介绍及参数说明_走过_冬天的博客-CSDN博客_amcl参数配置</a></p><p><a href="https://blog.csdn.net/qq_34672671/article/details/105729458?ops_request_misc=%7B%22request_id%22:%22163540823116780274178002%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163540823116780274178002&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v29_ecpm-29-105729458.pc_search_ecpm_flag&utm_term=amcl&spm=1018.2226.3001.4187">深入AMCL(三):AMCL手动初始化后如何自动定位_yuanguobin01的博客-CSDN博客</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>amcl_demo.launch</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- r2000驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find pepperl_fuchs_r2000)/launch/gui_example.launch&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Map server --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发布map.yaml,其中包含了pgm文件位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;map_file&quot;</span> <span class="attr">default</span>=<span class="string">&quot;$(find run)/map/mymap.yaml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">type</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">args</span>=<span class="string">&quot;$(arg map_file)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Localization --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find run)/launch/amcl.launch&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 获取odom数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 由于采用的是里程计模型,注意里程计的位置输出尤为关键 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;node name=&quot;tcp_server&quot; pkg=&quot;tcp_server&quot; type=&quot;tcp_server&quot; /&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 注意坐标转换:map-&gt;odom-&gt;base_link-&gt;laser_link --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果转换多了,会报错,多转换可能会报laserscan超时,少了,rviz会报没有上级坐标系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;map_to_odom_broadcaster&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0 0 0 0 0 0  /map /odom 100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;base_to_laser_broadcaster&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0 0 0 0 0 0 /base_link /laser_link 100&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find run)/rviz/hector_map.rviz&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>amcl.launch</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;use_map_topic&quot;</span>   <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;scan_topic&quot;</span>      <span class="attr">default</span>=<span class="string">&quot;scan&quot;</span>/&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;initial_pose_x&quot;</span>  <span class="attr">default</span>=<span class="string">&quot;0.0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;initial_pose_y&quot;</span>  <span class="attr">default</span>=<span class="string">&quot;0.0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;initial_pose_a&quot;</span>  <span class="attr">default</span>=<span class="string">&quot;0.0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;odom_frame_id&quot;</span>   <span class="attr">default</span>=<span class="string">&quot;odom&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;base_frame_id&quot;</span>   <span class="attr">default</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;global_frame_id&quot;</span> <span class="attr">default</span>=<span class="string">&quot;map&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;amcl&quot;</span> <span class="attr">type</span>=<span class="string">&quot;amcl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;amcl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;use_map_topic&quot;</span>             <span class="attr">value</span>=<span class="string">&quot;$(arg use_map_topic)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Publish scans from best pose at a max of 10 Hz --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 差分模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_model_type&quot;</span>           <span class="attr">value</span>=<span class="string">&quot;diff&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 速度模型参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_alpha5&quot;</span>               <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;gui_publish_rate&quot;</span>          <span class="attr">value</span>=<span class="string">&quot;10.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_max_beams&quot;</span>           <span class="attr">value</span>=<span class="string">&quot;810&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_max_range&quot;</span>           <span class="attr">value</span>=<span class="string">&quot;-1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;min_particles&quot;</span>             <span class="attr">value</span>=<span class="string">&quot;500&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;max_particles&quot;</span>             <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;kld_err&quot;</span>                   <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;kld_z&quot;</span>                     <span class="attr">value</span>=<span class="string">&quot;0.99&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 里程计模型调节超参 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_alpha1&quot;</span>               <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_alpha2&quot;</span>               <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_alpha3&quot;</span>               <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_alpha4&quot;</span>               <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 一般情况而言,高斯误差会比较大,可以设置大一些 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_z_hit&quot;</span>               <span class="attr">value</span>=<span class="string">&quot;0.95&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_z_short&quot;</span>             <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_z_max&quot;</span>               <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_z_rand&quot;</span>              <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_sigma_hit&quot;</span>           <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_lambda_short&quot;</span>        <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_model_type&quot;</span>          <span class="attr">value</span>=<span class="string">&quot;likelihood_field&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;param name=&quot;laser_model_type&quot; value=&quot;beam&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_likelihood_max_dist&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;update_min_d&quot;</span>              <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;update_min_a&quot;</span>              <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_frame_id&quot;</span>             <span class="attr">value</span>=<span class="string">&quot;$(arg odom_frame_id)&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_frame_id&quot;</span>             <span class="attr">value</span>=<span class="string">&quot;$(arg base_frame_id)&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;global_frame_id&quot;</span>           <span class="attr">value</span>=<span class="string">&quot;$(arg global_frame_id)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;resample_interval&quot;</span>         <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Increase tolerance because the computer can get quite busy --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;transform_tolerance&quot;</span>       <span class="attr">value</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 快慢指针,一般slow会小一些,良好的值可能为0.001,fast可能为0.01 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;recovery_alpha_slow&quot;</span>       <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;recovery_alpha_fast&quot;</span>       <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 初始位姿 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;initial_pose_x&quot;</span>            <span class="attr">value</span>=<span class="string">&quot;$(arg initial_pose_x)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;initial_pose_y&quot;</span>            <span class="attr">value</span>=<span class="string">&quot;$(arg initial_pose_y)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;initial_pose_a&quot;</span>            <span class="attr">value</span>=<span class="string">&quot;$(arg initial_pose_a)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;scan&quot;</span>                      <span class="attr">to</span>=<span class="string">&quot;$(arg scan_topic)&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zx3517288/article/details/784</summary>
      
    
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/categories/slam/"/>
    
    
    <category term="slam" scheme="https://peitianyu.github.io/blog/tags/slam/"/>
    
  </entry>
  
  <entry>
    <title>boost安装与测试</title>
    <link href="https://peitianyu.github.io/blog/2021/11/25/boost%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B5%8B%E8%AF%95/"/>
    <id>https://peitianyu.github.io/blog/2021/11/25/boost%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B5%8B%E8%AF%95/</id>
    <published>2021-11-25T04:30:12.000Z</published>
    <updated>2021-11-25T08:36:56.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/zhangxiao93/article/details/51077933?ops_request_misc=%7B%22request_id%22:%22163782562316780255241172%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163782562316780255241172&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-51077933.pc_search_mgc_flag&utm_term=ubuntu+boost%E5%BA%93%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Ubuntu下安装boost库_上善若水-CSDN博客</a></p><p><a href="https://blog.csdn.net/yhrun/article/details/8099630">在Ubuntu上安装boost库_一点一滴-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_41722524/article/details/114322697?ops_request_misc=%7B%22request_id%22:%22163782562316780255241172%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163782562316780255241172&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-114322697.pc_search_mgc_flag&utm_term=ubuntu+boost%E5%BA%93%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Ubuntu20.04安装boost库_vanyongqi-CSDN博客_ubuntu 安装boost</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="apt安装"><a href="#apt安装" class="headerlink" title="apt安装"></a>apt安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libboost-dev</span><br></pre></td></tr></table></figure><h2 id="build安装"><a href="#build安装" class="headerlink" title="build安装"></a>build安装</h2><ul><li>下载boost库:<a href="https://www.boost.org/">Boost C++ Libraries</a></li><li>解压: <code>tar -xzvf boost_1_xx_xx.tar.gz</code></li><li>进入解压目录,执行脚本,<code>sudo ./bootstrap.sh</code></li><li>安装, <code>sudo ./b2 install</code></li><li>测试环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/profile</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">在文件末尾添加</span></span><br><span class="line">export CPLUS_INCLUDE_PATH=/usr/local/include/boost:$CPLUS_INCLUDE_PATH</span><br><span class="line">export LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano test.cpp</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m=<span class="number">1</span>;<span class="keyword">int</span> n=<span class="number">2</span>;</span><br><span class="line">cout&lt;&lt;boost::<span class="built_in">bind</span>(fun,_1,_2)(m,n)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ test.cpp -o test</span><br></pre></td></tr></table></figure><h1 id="cmake使用boost库"><a href="#cmake使用boost库" class="headerlink" title="cmake使用boost库"></a>cmake使用boost库</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// CMakeLists.txt</span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">3</span>)</span><br><span class="line"><span class="keyword">project</span>(boost_test)</span><br><span class="line"><span class="keyword">find_package</span>(Boost REQUIRED COMPONENTS system thread)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(boost_test boost_test.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(boost_test <span class="variable">$&#123;Boost_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boost_test.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m=<span class="number">1</span>;<span class="keyword">int</span> n=<span class="number">2</span>;</span><br><span class="line">cout&lt;&lt;boost::<span class="built_in">bind</span>(fun,_1,_2)(m,n)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhangxiao93/article/details/5</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>strcpy重写</title>
    <link href="https://peitianyu.github.io/blog/2021/11/25/strcpy%E9%87%8D%E5%86%99/"/>
    <id>https://peitianyu.github.io/blog/2021/11/25/strcpy%E9%87%8D%E5%86%99/</id>
    <published>2021-11-25T04:30:12.000Z</published>
    <updated>2021-11-25T05:41:55.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/m0_57304511/article/details/121503898">什么？面试官让我写strcpy()函数_m0_57304511的博客-CSDN博客</a></p><h1 id="strpy"><a href="#strpy" class="headerlink" title="strpy"></a>strpy</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src)</span></span></span><br><span class="line"><span class="function"><span class="comment">//const可以防止源字符串被改变</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 使用断言避免传入空指针</span></span><br><span class="line"><span class="built_in">assert</span>( dest &amp;&amp; src );</span><br><span class="line"><span class="keyword">char</span>* ret = dest;</span><br><span class="line">    <span class="comment">// 按地址复制,直到为空</span></span><br><span class="line"><span class="keyword">while</span>(*dest++ = *src++)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr1[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> arr2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">my_strcpy</span>(arr1, arr2));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mempy"><a href="#mempy" class="headerlink" title="mempy"></a>mempy</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memcpy</span><span class="params">(<span class="keyword">void</span> *dest, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span></span>;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span> ((src == <span class="literal">NULL</span>) || (dest == <span class="literal">NULL</span>))  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">while</span> (count--)  </span><br><span class="line">        *dest++ = *src++;  </span><br><span class="line">          </span><br><span class="line">    <span class="keyword">return</span> dest;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_57304511/article/details/1</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>cjson精度丢失</title>
    <link href="https://peitianyu.github.io/blog/2021/11/24/cjson%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/"/>
    <id>https://peitianyu.github.io/blog/2021/11/24/cjson%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/</id>
    <published>2021-11-24T04:30:12.000Z</published>
    <updated>2021-11-24T05:45:10.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_33858485/article/details/93953963?ops_request_misc=&request_id=&biz_id=102&utm_term=cjson%E4%BF%9D%E7%95%99%E4%B8%A4%E4%BD%8D%E5%B0%8F%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-6-93953963.pc_search_mgc_flag&spm=1018.2226.3001.4187">(80条消息) cJSON精度丢失问题_weixin_33858485的博客-CSDN博客</a></p><p>在<code>cJSON.c</code>中的<code>print_number</code>函数中的<code>sprintf((char*)number_buffer, &quot;%1.17g&quot;, d);</code>更改为</p><p><code>sprintf((char*)number_buffer, &quot;%1.4g&quot;, d);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Render the number nicely from the given item into a string. */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> cJSON_bool <span class="title">print_number</span><span class="params">(<span class="keyword">const</span> cJSON * <span class="keyword">const</span> item, printbuffer * <span class="keyword">const</span> output_buffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *output_pointer = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">double</span> d = item-&gt;valuedouble;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> number_buffer[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">/* temporary buffer to print the number into */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> decimal_point = get_decimal_point();</span><br><span class="line">    <span class="keyword">double</span> test = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (output_buffer == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This checks for NaN and Infinity */</span></span><br><span class="line">    <span class="keyword">if</span> (isnan(d) || isinf(d))</span><br><span class="line">    &#123;</span><br><span class="line">        length = <span class="built_in">sprintf</span>((<span class="keyword">char</span>*)number_buffer, <span class="string">&quot;null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */</span></span><br><span class="line">        <span class="comment">// 更改这里的1.4,这里指的是保留4位小数</span></span><br><span class="line">        length = <span class="built_in">sprintf</span>((<span class="keyword">char</span>*)number_buffer, <span class="string">&quot;%1.4g&quot;</span>, d);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Check whether the original double can be recovered */</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">sscanf</span>((<span class="keyword">char</span>*)number_buffer, <span class="string">&quot;%lg&quot;</span>, &amp;test) != <span class="number">1</span>) || !compare_double((<span class="keyword">double</span>)test, d))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* If not, print with 17 decimal places of precision */</span></span><br><span class="line">            <span class="comment">// 更改这里的1.4,这里指的是保留4位小数</span></span><br><span class="line">            length = <span class="built_in">sprintf</span>((<span class="keyword">char</span>*)number_buffer, <span class="string">&quot;%1.4g&quot;</span>, d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* sprintf failed or buffer overrun occurred */</span></span><br><span class="line">    <span class="keyword">if</span> ((length &lt; <span class="number">0</span>) || (length &gt; (<span class="keyword">int</span>)(<span class="keyword">sizeof</span>(number_buffer) - <span class="number">1</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* reserve appropriate space in the output */</span></span><br><span class="line">    output_pointer = ensure(output_buffer, (<span class="keyword">size_t</span>)length + <span class="keyword">sizeof</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (output_pointer == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy the printed number to the output and replace locale</span></span><br><span class="line"><span class="comment">     * dependent decimal point with &#x27;.&#x27; */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ((<span class="keyword">size_t</span>)length); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (number_buffer[i] == decimal_point)</span><br><span class="line">        &#123;</span><br><span class="line">            output_pointer[i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        output_pointer[i] = number_buffer[i];</span><br><span class="line">    &#125;</span><br><span class="line">    output_pointer[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    output_buffer-&gt;offset += (<span class="keyword">size_t</span>)length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_33858485/article/detai</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>FTP服务</title>
    <link href="https://peitianyu.github.io/blog/2021/11/23/FTP/"/>
    <id>https://peitianyu.github.io/blog/2021/11/23/FTP/</id>
    <published>2021-11-23T04:30:12.000Z</published>
    <updated>2021-11-23T13:34:07.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/ncut_wxj/article/details/106198896?ops_request_misc=%7B%22request_id%22:%22163767320116780264025266%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163767320116780264025266&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-106198896.pc_search_mgc_flag&utm_term=ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85ftp&spm=1018.2226.3001.4187">在虚拟机的Ubuntu上部署FTP服务器_ncut_wxj的博客-CSDN博客</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Example config file /etc/vsftpd.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># The default compiled in settings are fairly paranoid. This sample file</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Please see vsftpd.conf.5 <span class="keyword">for</span> all compiled <span class="keyword">in</span> defaults.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Please <span class="built_in">read</span> the vsftpd.conf.5 manual page to get a full idea of vsftpd<span class="string">&#x27;s</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> capabilities.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> daemon started from an initscript.</span></span></span><br><span class="line">listen=NO</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># This directive enables listening on IPv6 sockets. By default, listening</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> sockets. If you want that (perhaps because you want to listen on specific</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> addresses) then you must run two copies of vsftpd with two configuration</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> files.</span></span></span><br><span class="line">listen_ipv6=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># Allow anonymous FTP? (Disabled by default).</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">这个是设置是否允许匿名登录ftp服务器，不允许。</span></span></span><br><span class="line">anonymous_enable=NO</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># Uncomment this to allow local users to log in.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">是否允许本机用户登录</span></span></span><br><span class="line">local_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># Uncomment this to enable any form of FTP write command.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">允许上传文件到ftp服务器</span></span></span><br><span class="line">write_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># Default umask for local users is 077. You may wish to change this to 022,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> if your users expect that (022 is used by most other ftpd&#x27;</span>s)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">local_umask=022</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> has an effect <span class="keyword">if</span> the above global write <span class="built_in">enable</span> is activated. Also, you will</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> obviously need to create a directory writable by the FTP user.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">anon_upload_enable=YES</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Uncomment this if you want the anonymous FTP user to be able to create</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> new directories.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">anon_mkdir_write_enable=YES</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Activate directory messages - messages given to remote users when they</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> go into a certain directory.</span></span><br><span class="line">dirmessage_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># If enabled, vsftpd will display directory listings with the time</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span>  your  <span class="built_in">local</span>  time  zone.  The default is to display GMT. The</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">times</span> returned by the MDTM FTP <span class="built_in">command</span> are also affected by this</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> option.</span></span><br><span class="line">use_localtime=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Activate logging of uploads/downloads.</span></span></span><br><span class="line">xferlog_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span></span><br><span class="line">connect_from_port_20=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a different user. Note! Using <span class="string">&quot;root&quot;</span> <span class="keyword">for</span> uploaded files is not</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> recommended!</span></span><br><span class="line"><span class="meta">#</span><span class="bash">chown_uploads=YES</span></span><br><span class="line"><span class="meta">#</span><span class="bash">chown_username=whoever</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># You may override where the log file goes if you like. The default is shown</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> below.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">xferlog_file=/var/<span class="built_in">log</span>/vsftpd.log</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># If you want, you can have your log file in standard ftpd xferlog format.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Note that the default <span class="built_in">log</span> file location is /var/<span class="built_in">log</span>/xferlog <span class="keyword">in</span> this <span class="keyword">case</span>.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">xferlog_std_format=YES</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># You may change the default value for timing out an idle session.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">idle_session_timeout=600</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># You may change the default value for timing out a data connection.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">data_connection_timeout=120</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># It is recommended that you define on your system a unique user which the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nopriv_user=ftpsecure</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> recommended <span class="keyword">for</span> security (the code is non-trivial). Not enabling it,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> however, may confuse older FTP clients.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">async_abor_enable=YES</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the request. Turn on the below options to have the server actually <span class="keyword">do</span> ASCII</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mangling on files when <span class="keyword">in</span> ASCII mode.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> attack (DoS) via the <span class="built_in">command</span> <span class="string">&quot;SIZE /big/file&quot;</span> <span class="keyword">in</span> ASCII mode. vsftpd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> predicted this attack and has always been safe, reporting the size of the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> raw file.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ASCII mangling is a horrible feature of the protocol.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ascii_upload_enable=YES</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ascii_download_enable=YES</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># You may fully customise the login banner string:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">ftpd_banner=Welcome to blah FTP service.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> useful <span class="keyword">for</span> combatting certain DoS attacks.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">deny_email_enable=YES</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (default follows)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># You may restrict local users to their home directories.  See the FAQ for</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the possible risks <span class="keyword">in</span> this before using chroot_local_user or</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chroot_list_enable below.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">chroot_local_user=YES</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># You may specify an explicit list of local users to chroot() to their home</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> directory. If chroot_local_user is YES, <span class="keyword">then</span> this list becomes a list of</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> users to NOT chroot().</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (Warning! chroot<span class="string">&#x27;ing can be very dangerous. If using chroot, make sure that</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> the user does not have write access to the top level directory within the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> chroot)</span></span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> (default follows) 允许chroot_list文件中配置的用户登录此ftp服务器。</span></span></span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> default to avoid remote users being able to cause excessive I/O on large</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">ls_recurse_enable=YES</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># Customization</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># Some of vsftpd&#x27;</span>s settings don<span class="string">&#x27;t fit the filesystem layout by</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> default.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># This option should be the name of a directory which is empty.  Also, the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> directory should not be writable by the ftp user. This directory is used</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> as a secure chroot() jail at times vsftpd does not require filesystem</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> access.</span></span></span><br><span class="line">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># This string is the name of the PAM service vsftpd will use.</span></span></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># This option specifies the location of the RSA certificate to use for SSL</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> encrypted connections.</span></span></span><br><span class="line">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class="line">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">ssl_enable=NO</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">utf8_filesystem=YES</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">配置ftp服务器的上传下载文件所在的目录。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">这个地址中的 “/home/python” 是这个Ubuntu系统的用户主目录</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">它的用户名叫 “python”，文件夹 “ftpfile” 是后来创建的</span></span></span><br><span class="line">local_root=/home/python/ftpfile</span><br></pre></td></tr></table></figure><h1 id="给ftp服务器配置使用用户等信息"><a href="#给ftp服务器配置使用用户等信息" class="headerlink" title="给ftp服务器配置使用用户等信息"></a>给ftp服务器配置使用用户等信息</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/vsftpd.chroot_list</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">ftp_user</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="文件夹内输入"><a href="#文件夹内输入" class="headerlink" title="文件夹内输入"></a>文件夹内输入</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp:/192.168.xx.xx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ncut_wxj/article/details/1061</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux_gpio</title>
    <link href="https://peitianyu.github.io/blog/2021/11/23/linux_gpio/"/>
    <id>https://peitianyu.github.io/blog/2021/11/23/linux_gpio/</id>
    <published>2021-11-23T04:30:12.000Z</published>
    <updated>2021-11-23T13:50:42.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/lell3538/article/details/51277870?ops_request_misc=%7B%22request_id%22:%22163767480816780261986595%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163767480816780261986595&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-51277870.pc_search_mgc_flag&utm_term=linux%E6%93%8D%E4%BD%9Cgpio&spm=1018.2226.3001.4187">Linux操作GPIO（文件IO方式）_Leon-CSDN博客</a></p><p><a href="https://blog.csdn.net/u010299133/article/details/82286700?ops_request_misc=%7B%22request_id%22:%22163767480816780261986595%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163767480816780261986595&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-82286700.pc_search_mgc_flag&utm_term=linux%E6%93%8D%E4%BD%9Cgpio&spm=1018.2226.3001.4187">在Linux 中的应用层操作gpio的方法_仗劍走天涯-CSDN博客</a></p><h1 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h1><p><code>控制GPIO</code>的目录位于<code>/sys/class/gpio</code></p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 导出</span><br><span class="line">/sys/class/gpio# echo 44 &gt; export</span><br><span class="line">2. 设置方向</span><br><span class="line">/sys/class/gpio/gpio44# echo out &gt; direction</span><br><span class="line">3. 查看方向</span><br><span class="line">/sys/class/gpio/gpio44# cat direction</span><br><span class="line">4. 设置输出</span><br><span class="line">/sys/class/gpio/gpio44# echo 1 &gt; value</span><br><span class="line">5. 查看输出值</span><br><span class="line">/sys/class/gpio/gpio44# cat value</span><br><span class="line">6. 取消导出</span><br><span class="line">/sys/class/gpio# echo 44 &gt; unexport</span><br></pre></td></tr></table></figure><p> 以<strong>echo</strong>的形式调用<strong>system</strong>函数进行操作，这种形式编程比较简单，结构比较清晰，如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_gpio64_low</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;echo 64 &gt; /sys/class/gpio/export&quot;</span>);  </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;echo out &gt; /sys/class/gpio/gpio64/direction&quot;</span>);  </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;echo 0 &gt; /sys/class/gpio/gpio64/value&quot;</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p> 通过<strong>文件</strong>的形式来调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span>   <span class="comment">//define O_WRONLY and O_RDONLY</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initGpio</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp =<span class="built_in">fdopen</span>(<span class="string">&quot;/sys/class/gpio/export&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;export open filed&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;   <span class="comment">//create gpio file</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGpioDirection</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> *direction)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> path[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(path,<span class="string">&quot;/sys/class/gpio/gpio%d/direction&quot;</span>,n);</span><br><span class="line">    FILE * fp =<span class="built_in">fdopen</span>(path,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;direction open filed&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s&quot;</span>,direction);</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;   <span class="comment">//set gpio &quot;in&quot; or &quot;out&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getGpioValue</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> path[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> value_str[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">snprintf</span>(path, <span class="built_in"><span class="keyword">sizeof</span></span>(path), <span class="string">&quot;/sys/class/gpio/gpio%d/value&quot;</span>, n);</span><br><span class="line">    fd = <span class="built_in">open</span>(path, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;Failed to open gpio value for reading!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">read</span>(fd, value_str, <span class="number">3</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;Failed to read value!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">atoi</span>(value_str));</span><br><span class="line">&#125;   <span class="comment">//get gpio(n)&#x27;s value</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">initGpio</span>(<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">setGpioDirection</span>(<span class="number">18</span>,<span class="string">&quot;in&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">getGpioValue</span>(<span class="number">18</span>));&lt;span style=<span class="string">&quot;white-space:pre&quot;</span>&gt;&lt;/span&gt;<span class="comment">//每隔1s输出一次gpio18的值</span></span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/lell3538/article/details/5127</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shm</title>
    <link href="https://peitianyu.github.io/blog/2021/11/23/shm/"/>
    <id>https://peitianyu.github.io/blog/2021/11/23/shm/</id>
    <published>2021-11-23T04:30:12.000Z</published>
    <updated>2021-11-23T14:17:34.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/ypt523/article/details/79958188?ops_request_misc=%7B%22request_id%22:%22163767553616780274114023%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163767553616780274114023&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-79958188.pc_search_mgc_flag&utm_term=%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98+%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1&spm=1018.2226.3001.4187">进程间通信——共享内存（Shared Memory）_ypt-CSDN博客_共享内存</a></p><h1 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//comm.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _COMM_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _COMM_H__</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PATHNAME <span class="meta-string">&quot;.&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROJ_ID 0x6666</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateShm</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DestroyShm</span><span class="params">(<span class="keyword">int</span> shmid)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetShm</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//comm.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;comm.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">CommShm</span><span class="params">(<span class="keyword">int</span> size,<span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">key_t</span> key = ftok(PATHNAME,PROJ_ID);</span><br><span class="line"><span class="keyword">if</span>(key &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;ftok&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> shmid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>((shmid = shmget(key,size,flags)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;shmget&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> shmid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DestroyShm</span><span class="params">(<span class="keyword">int</span> shmid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(shmctl(shmid,IPC_RMID,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;shmctl&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateShm</span><span class="params">(<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> CommShm(size,IPC_CREAT | IPC_EXCL | <span class="number">0666</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetShm</span><span class="params">(<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> CommShm(size,IPC_CREAT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//client.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;comm.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 获得共享内存的id</span></span><br><span class="line"><span class="keyword">int</span> shmid = GetShm(<span class="number">4096</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 将共享内存映射到本进程的地址空间</span></span><br><span class="line"><span class="keyword">char</span> *addr = shmat(shmid,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">26</span>)</span><br><span class="line">&#123;</span><br><span class="line">addr[i] = <span class="string">&#x27;A&#x27;</span> + i;</span><br><span class="line">i++;</span><br><span class="line">addr[i] = <span class="number">0</span>;</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将共享内存从本进程的地址空间中卸载</span></span><br><span class="line">shmdt(addr);</span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;comm.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建并获得共享内存的id</span></span><br><span class="line"><span class="keyword">int</span> shmid = CreateShm(<span class="number">4096</span>);</span><br><span class="line"><span class="comment">// 将共享内存映射到本进程的地址空间</span></span><br><span class="line"><span class="keyword">char</span> *addr = shmat(shmid,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i++ &lt; <span class="number">26</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client# %s\n&quot;</span>,addr);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将共享内存从本进程的地址空间中卸载</span></span><br><span class="line">shmdt(addr);</span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 删除共享内存</span></span><br><span class="line">DestroyShm(shmid);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//Makefile</span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>:all</span></span><br><span class="line"><span class="section">all:server client</span></span><br><span class="line"> </span><br><span class="line"><span class="section">client:client.c comm.c</span></span><br><span class="line">gcc -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"><span class="section">server:server.c comm.c</span></span><br><span class="line">gcc -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"> </span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f client server</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ypt523/article/details/799581</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu14</title>
    <link href="https://peitianyu.github.io/blog/2021/11/23/ubuntu14/"/>
    <id>https://peitianyu.github.io/blog/2021/11/23/ubuntu14/</id>
    <published>2021-11-23T04:30:12.000Z</published>
    <updated>2021-11-23T12:30:28.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装服务</span></span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看ssh服务是否启动</span></span><br><span class="line">sudo ps -e |grep ssh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动ssh服务</span></span><br><span class="line">sudo service ssh start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置服务</span></span><br><span class="line">sudo gedit /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash">找到下面相关配置：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Authentication:</span></span><br><span class="line">LoginGraceTime 120</span><br><span class="line">PermitRootLogin prohibit-password</span><br><span class="line">StrictModes yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">更改为：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Authentication:</span></span><br><span class="line">LoginGraceTime 120</span><br><span class="line"><span class="meta">#</span><span class="bash">PermitRootLogin prohibit-password</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line">StrictModes yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启ssh</span></span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak </span><br><span class="line">sudo nano /etc/apt/sources.list </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 预发布软件源，不建议启用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h1 id="右键没有terminal"><a href="#右键没有terminal" class="headerlink" title="右键没有terminal"></a>右键没有terminal</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nautilus-open-terminal </span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装ssh&quot;&gt;&lt;a href=&quot;#安装ssh&quot; class=&quot;headerlink&quot; title=&quot;安装ssh&quot;&gt;&lt;/a&gt;安装ssh&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>状态机</title>
    <link href="https://peitianyu.github.io/blog/2021/11/23/%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    <id>https://peitianyu.github.io/blog/2021/11/23/%E7%8A%B6%E6%80%81%E6%9C%BA/</id>
    <published>2021-11-23T04:30:12.000Z</published>
    <updated>2021-11-23T14:54:12.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/daocaokafei/article/details/108922604?ops_request_misc=%7B%22request_id%22:%22163767858216780366532578%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163767858216780366532578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108922604.pc_search_mgc_flag&utm_term=%E7%8A%B6%E6%80%81%E6%9C%BA&spm=1018.2226.3001.4187">什么是状态机？用C语言实现进程5状态模型_一口Linux的专栏-CSDN博客</a></p><h1 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stateMachine.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  sta_origin=<span class="number">0</span>,</span><br><span class="line">  sta_running,</span><br><span class="line">  sta_owencpu,</span><br><span class="line">  sta_sleep_int,</span><br><span class="line">  sta_sleep_unint</span><br><span class="line">&#125;State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span>  <span class="keyword">char</span> *statename[]=&#123;</span><br><span class="line"><span class="string">&quot;origin&quot;</span>,</span><br><span class="line"><span class="string">&quot;running&quot;</span>,</span><br><span class="line"><span class="string">&quot;owencpu&quot;</span>,</span><br><span class="line"><span class="string">&quot;sleep_int&quot;</span>,</span><br><span class="line"><span class="string">&quot;sleep_unint&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span></span><br><span class="line">  evt_fork=<span class="number">0</span>,</span><br><span class="line">  evt_sched,</span><br><span class="line">  evt_wait,</span><br><span class="line">  evt_wait_unint,</span><br><span class="line">  evt_wake_up,</span><br><span class="line">  evt_wake, </span><br><span class="line">&#125;EventID;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span>  <span class="title">void</span> <span class="params">(*CallBack)</span><span class="params">(<span class="keyword">void</span> *)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  State curState;<span class="comment">//当前状态</span></span><br><span class="line">  EventID eventId;<span class="comment">//事件ID</span></span><br><span class="line">  State nextState;<span class="comment">//下个状态</span></span><br><span class="line">  CallBack action;<span class="comment">//回调函数</span></span><br><span class="line">&#125;StateTransform ; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">State globalState = sta_origin;</span><br><span class="line"><span class="keyword">pthread_t</span> pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">action_callback</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StateTransform *statTran = (StateTransform *)arg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(statename[statTran-&gt;curState] == statename[statTran-&gt;nextState])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;invalid event,state not change\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;call back state from %s --&gt; %s\n&quot;</span>,</span><br><span class="line">statename[statTran-&gt;curState],</span><br><span class="line">statename[statTran-&gt;nextState]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*origin*/</span></span><br><span class="line">StateTransform stateTran_0[]=&#123;</span><br><span class="line">&#123;sta_origin,evt_fork,         sta_running,action_callback&#125;,</span><br><span class="line">&#123;sta_origin,evt_sched,      sta_origin,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_origin,evt_wait,        sta_origin,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_origin,evt_wait_unint,sta_origin,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_origin,evt_wake_up,   sta_origin,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_origin,evt_wake,        sta_origin,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*running*/</span></span><br><span class="line">StateTransform stateTran_1[]=&#123;</span><br><span class="line">&#123;sta_running,evt_fork,         sta_running,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_running,evt_sched,      sta_owencpu,action_callback&#125;,</span><br><span class="line">&#123;sta_running,evt_wait,        sta_running,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_running,evt_wait_unint,sta_running,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_running,evt_wake_up,   sta_running,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_running,evt_wake,        sta_running,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">/*owencpu*/</span></span><br><span class="line">StateTransform stateTran_2[]=&#123;</span><br><span class="line">&#123;sta_owencpu,evt_fork,         sta_owencpu,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_owencpu,evt_sched,      sta_owencpu,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_owencpu,evt_wait,        sta_sleep_int,action_callback&#125;,</span><br><span class="line">&#123;sta_owencpu,evt_wait_unint,sta_sleep_unint,action_callback&#125;,</span><br><span class="line">&#123;sta_owencpu,evt_wake_up,   sta_owencpu,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_owencpu,evt_wake,        sta_owencpu,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*sleep_int*/</span></span><br><span class="line">StateTransform stateTran_3[]=&#123;</span><br><span class="line">&#123;sta_sleep_int,evt_fork,         sta_sleep_int,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_sleep_int,evt_sched,      sta_sleep_int,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_sleep_int,evt_wait,        sta_sleep_int,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_sleep_int,evt_wait_unint,sta_sleep_int,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_sleep_int,evt_wake_up,   sta_sleep_int,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_sleep_int,evt_wake,        sta_running,action_callback&#125;,</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">/*sleep_unint*/</span></span><br><span class="line">StateTransform stateTran_4[]=&#123;</span><br><span class="line">&#123;sta_sleep_unint,evt_fork,         sta_sleep_unint,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_sleep_unint,evt_sched,      sta_sleep_unint,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_sleep_unint,evt_wait,        sta_sleep_unint,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_sleep_unint,evt_wait_unint,sta_sleep_unint,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;sta_sleep_unint,evt_wake_up,   sta_running,action_callback&#125;,</span><br><span class="line">&#123;sta_sleep_unint,evt_wake,        sta_sleep_unint,<span class="literal">NULL</span>&#125;,</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_machine</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">globalState = sta_origin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*显示当前状态*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">show_stat</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">64</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;cur stat:%s\n&quot;</span>,statename[globalState]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATETRANS(n)  (stateTran_##n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*change state &amp; call callback()*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_action</span><span class="params">(StateTransform *statTran)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == statTran)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;statTran is NULL\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">globalState = statTran-&gt;nextState;</span><br><span class="line"><span class="keyword">if</span>(statTran-&gt;action != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">statTran-&gt;action((<span class="keyword">void</span>*)statTran);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;invalid event,state not change\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_happen</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(globalState)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> sta_origin:</span><br><span class="line">do_action(&amp;STATETRANS(<span class="number">0</span>)[event]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> sta_running:</span><br><span class="line">do_action(&amp;STATETRANS(<span class="number">1</span>)[event]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> sta_owencpu:</span><br><span class="line">do_action(&amp;STATETRANS(<span class="number">2</span>)[event]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> sta_sleep_int:</span><br><span class="line">do_action(&amp;STATETRANS(<span class="number">3</span>)[event]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> sta_sleep_unint:</span><br><span class="line">do_action(&amp;STATETRANS(<span class="number">4</span>)[event]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;state is invalid\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init_machine();</span><br><span class="line"></span><br><span class="line">pthread_create(&amp;pid, <span class="literal">NULL</span>,show_stat, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>);</span><br><span class="line">event_happen(evt_fork);</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>);</span><br><span class="line">event_happen(evt_sched);</span><br><span class="line">sleep(<span class="number">5</span>);</span><br><span class="line">event_happen(evt_sched);</span><br><span class="line">sleep(<span class="number">5</span>);</span><br><span class="line">event_happen(evt_wait);</span><br><span class="line">sleep(<span class="number">5</span>);</span><br><span class="line">event_happen(evt_wake);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main stateMachine.c -pthread -g</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/daocaokafei/article/details/1</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ros教程</title>
    <link href="https://peitianyu.github.io/blog/2021/11/13/ros%E6%95%99%E7%A8%8B/"/>
    <id>https://peitianyu.github.io/blog/2021/11/13/ros%E6%95%99%E7%A8%8B/</id>
    <published>2021-11-13T04:30:12.000Z</published>
    <updated>2021-11-13T03:15:23.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><strong>古月居21讲</strong></p><p><a href="https://www.guyuehome.com/blog/index">博客 - 古月居 (guyuehome.com)</a></p><p><strong>创客智造</strong></p><p><a href="https://www.ncnynl.com/archives/201608/496.html">ROS入门教程-目录 - 创客智造 (ncnynl.com)</a></p><p><a href="https://blog.csdn.net/wuzhishiwo/category_10362422.html">(70条消息) ros机器人_wuzhishiwo的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/zhangjiali12011/article/details/91885148?ops_request_misc=%7B%22request_id%22:%22162976489016780269870400%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=162976489016780269870400&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v29_ecpm-27-91885148.pc_search_similar&utm_term=%E5%8F%A4%E6%9C%88%E5%B1%85ros%E8%AF%BE%E7%A8%8B&spm=1018.2226.3001.4187">ROS资源整理-学习ROS用得到的一些资料（持续更新）_Jiali Zhang的博客-CSDN博客</a></p><p><strong>国外教程(需要科学上网)</strong>,可在线模拟,有开源代码</p><p><a href="https://app.theconstructsim.com/en/signup/#/LearningPaths">Learn Robotics from Zero - Robotics &amp; ROS Online Courses (theconstructsim.com)</a></p><p><strong>很现成的模拟</strong>舒爽</p><p><a href="https://www.icourse163.org/course/NUDT-1205969803">智能机器人系统_国防科技大学_中国大学MOOC(慕课) (icourse163.org)</a></p><p><strong>外文教程</strong></p><p><a href="https://cyberbotics.com/doc/guide/tutorial-8-using-ros">Webots: tutorial- (cyberbotics.com)</a></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>通过<code>WSL</code>+<code>melodic</code>+<code>vscode</code>+<code>xlaunch</code>实现<code>ros</code>环境模拟</p><p><code>wsl安装</code>:<a href="https://peitianyu.github.io/blog/2021/10/19/wsl/">wsl安装与使用 | 某飞行员的随笔 (peitianyu.github.io)</a></p><p><code>melodic安装</code>:<a href="https://peitianyu.github.io/blog/2021/10/19/ros%E5%AE%89%E8%A3%85/">ros安装 | 某飞行员的随笔 (peitianyu.github.io)</a></p><p><code>vscode安装</code>:<a href="https://peitianyu.github.io/blog/2021/11/13/vscode/">vscode | 某飞行员的随笔 (peitianyu.github.io)</a></p><p><code>vscode配置ros:</code>安装<em>C/C++<em>，</em>CMake</em>，<em>CMake Tools</em>，<em>Code Runner</em>，<em>ROS</em>，<em>Chinese</em> 这些插件</p><p><a href="https://blog.csdn.net/qq_42688495/article/details/107750466?ops_request_misc=%7B%22request_id%22:%22163676717216780274154447%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163676717216780274154447&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107750466.pc_search_mgc_flag&utm_term=vscode+ros&spm=1018.2226.3001.4187">使用VScode搭建ROS开发环境_白鸟无言的博客-CSDN博客</a></p><p><code>xlaunch安装</code>:<a href="https://blog.csdn.net/beyond9305/article/details/95494863?ops_request_misc=%7B%22request_id%22:%22163676668916780255220278%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163676668916780255220278&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-14-95494863.pc_search_mgc_flag&utm_term=xlaunch&spm=1018.2226.3001.4187">(https://windows.podnova.com/software/3151375.htm)</a></p><p>下载好之后,配置<code>~/.bashrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo nano ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入编辑文件,在最后添加上</span></span><br><span class="line">export DISPLAY=localhost:0</span><br><span class="line"><span class="meta">#</span><span class="bash"> CTRL+S + CTRL+X保存退出</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h1 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h1><h2 id="古月居二十一讲"><a href="#古月居二十一讲" class="headerlink" title="古月居二十一讲"></a>古月居二十一讲</h2><p>这一步需要每一个实验都过一遍,编译一遍,不必要太过详尽,重在了解ros流程,之后回来重新复习</p><ul><li><a href="https://www.bilibili.com/video/BV1L44y167ox?p=3">古月居二十一讲视频</a></li><li><a href="https://blog.csdn.net/weixin_48395629/article/details/109022916?ops_request_misc=%7B%22request_id%22:%22162968965016780255230305%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162968965016780255230305&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109022916.pc_search_similar&utm_term=%E5%8F%A4%E6%9C%88%E5%B1%85ros%E5%85%A5%E9%97%A821%E8%AE%B2&spm=1018.2226.3001.4187">古月居二十一讲笔记</a></li><li><a href="https://pan.baidu.com/s/1E5jvjjGtjhaeT7ivmySfAg">古月居二十一讲讲义与代码</a> 密码:4n76</li><li><a href="https://www.guyuehome.com/blog/index/category/11">ROS探索总结 - 古月居 </a></li></ul><h2 id="ROS-Academy-for-Beginners"><a href="#ROS-Academy-for-Beginners" class="headerlink" title="ROS-Academy-for-Beginners"></a>ROS-Academy-for-Beginners</h2><ul><li><p><a href="https://sychaichangkun.gitbooks.io/ros-tutorial-icourse163/content/">中国大学MOOC《机器人操作系统入门》讲义</a></p></li><li><p><a href="https://github.com/DroidAITech/ROS-Academy-for-Beginners">中国大学MOOC《机器人操作系统入门》课程代码示例</a></p></li></ul><p>注意下载自<code>己需要的版本</code>,别下错了,然后有显示的问题,可以试试</p><p><code>rosdep install --from-paths src --ignore-src --rosdistro=melodic -y</code></p><h2 id="navigation"><a href="#navigation" class="headerlink" title="navigation"></a>navigation</h2><ul><li><p><a href="https://www.zhihu.com/column/ros-nav">ros navigation stack源码学习 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://github.com/meiqua/navigation"> ROS Navigation stack源码</a></p></li></ul><h2 id="激光slam"><a href="#激光slam" class="headerlink" title="激光slam"></a>激光slam</h2><p>根据以下的几种尝试看源码</p><ul><li><a href="https://www.cnblogs.com/li-yao7758258/p/8213578.html">对比几种在ROS中常用的几种SLAM算法</a></li><li><a href="https://blog.csdn.net/m0_37604894/article/details/89207705?ops_request_misc=&request_id=&biz_id=102&utm_term=%E6%BF%80%E5%85%89SLAM&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-89207705.pc_search_insert_js_new&spm=1018.2226.3001.4187"> 激光SLAM学习</a></li><li><a href="https://blog.csdn.net/m0_37340621/category_9607656.html"> 移动机器人_少磊的博客</a></li></ul><h2 id="路径参考"><a href="#路径参考" class="headerlink" title="路径参考"></a>路径参考</h2><p><a href="https://mp.weixin.qq.com/s/-UHXkgg_CjaPW0yXzE4VuA">记得收藏丨ROS开发工程师学习指南 (qq.com)</a></p><h1 id="几款适合copy的源码"><a href="#几款适合copy的源码" class="headerlink" title="几款适合copy的源码"></a>几款适合copy的源码</h1><p><a href="https://github.com/ros/ros_tutorials">ros_tutorials</a></p><p><a href="https://github.com/ROBOTIS-GIT/ros_tutorials">ros_tutorials: ROS Tutorials for beginner</a></p><p><a href="https://github.com/guyuehome/ros_basic_tutorials">ros_basic_tutorials</a></p><p><a href="https://github.com/guyuehome/ros_advanced_tutorials">ROS进阶攻略系列视频课程</a></p><p><a href="https://github.com/ros-planning/navigation_tutorials">Tutorials about using the ROS Navigation stack</a></p><p><a href="https://github.com/RobotnikAutomation/agvs_sim">Agvs robot simulation packages for ROS </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;古月居21讲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.guyuehom</summary>
      
    
    
    
    <category term="ros" scheme="https://peitianyu.github.io/blog/categories/ros/"/>
    
    
    <category term="ros" scheme="https://peitianyu.github.io/blog/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>vscode</title>
    <link href="https://peitianyu.github.io/blog/2021/11/13/vscode/"/>
    <id>https://peitianyu.github.io/blog/2021/11/13/vscode/</id>
    <published>2021-11-13T04:30:12.000Z</published>
    <updated>2021-11-13T01:22:17.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/weixin_48468423/article/details/118950592?ops_request_misc=%7B%22request_id%22:%22163676464916780262571699%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163676464916780262571699&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-118950592.pc_search_mgc_flag&utm_term=vscode&spm=1018.2226.3001.4187">VsCode安装和配置c/c++环境（超完整，小白专用）_黄化的多多-CSDN博客_vscode配置c++环境</a></p><p><a href="https://blog.csdn.net/iceboy314159/article/details/107886801?ops_request_misc=%7B%22request_id%22:%22163676572516780271510489%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163676572516780271510489&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107886801.pc_search_mgc_flag&utm_term=vscode+wsl&spm=1018.2226.3001.4187">vscode 与 WSL 进行linux开发_从零开始-CSDN博客_vscode wsl</a></p><p><a href="https://blog.csdn.net/reeeeein/article/details/104628415?ops_request_misc=%7B%22request_id%22:%22163676572516780271510489%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163676572516780271510489&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-104628415.pc_search_mgc_flag&utm_term=vscode+wsl&spm=1018.2226.3001.4187">在WSL中安装并配置VSCode_reeeeein的博客-CSDN博客_wsl安装vscode</a></p><p><a href="https://blog.csdn.net/weixin_43876113/article/details/105261577?ops_request_misc=%7B%22request_id%22:%22163676572516780271510489%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163676572516780271510489&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-105261577.pc_search_mgc_flag&utm_term=vscode+wsl&spm=1018.2226.3001.4187">WIN10安装WSL并使用VScode连接WSL_作业君的博客-CSDN博客_vscode wsl</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>vscode</code>配置<code>wsl</code></p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="下载安装vscode"><a href="#下载安装vscode" class="headerlink" title="下载安装vscode:"></a>下载安装<code>vscode</code>:</h2><p><a href="https://code.visualstudio.com/Download">Download Visual Studio Code - Mac, Linux, Windows</a></p><p>安装<code>win</code>版,一直下一步,注意改一下安装位置</p><h2 id="连接wsl"><a href="#连接wsl" class="headerlink" title="连接wsl"></a>连接<code>wsl</code></h2><p><code>ctrl + shift + x</code>打开应用商店,输入<code>Remote - WSL</code>安装由于事先安装好<code>wsl</code>了</p><p>打开左侧小电脑图标,点击进入即可进入<code>wsl</code>终端,可以通过点击左下角⚪,▲进入终端命令行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_48468423/article/detai</summary>
      
    
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/categories/tool/"/>
    
    
    <category term="tool" scheme="https://peitianyu.github.io/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>USBCAN/CANalyst-II</title>
    <link href="https://peitianyu.github.io/blog/2021/11/11/USBCAN/"/>
    <id>https://peitianyu.github.io/blog/2021/11/11/USBCAN/</id>
    <published>2021-11-11T04:30:12.000Z</published>
    <updated>2021-11-13T01:04:27.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/muyoufansem/article/details/117955581?ops_request_misc=&request_id=&biz_id=102&utm_term=canalyst&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-117955581.pc_search_mgc_flag&spm=1018.2226.3001.4187">(完整版)Python读取CANalyst-II分析仪(创芯科技)接口函数_蜡笔小新历险记的博客-CSDN博客_创芯科技can分析仪驱动</a></p><p><a href="https://blog.csdn.net/qq_38766896/article/details/109404097?ops_request_misc=%7B%22request_id%22:%22163642380516780264058809%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163642380516780264058809&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109404097.pc_search_mgc_flag&utm_term=canalyst-ii+linux&spm=1018.2226.3001.4187">Ubuntu16.04 （ROS）下通过CAN分析仪（USBCAN/CANalyst-II）调试无人车助力转向电机（1）_秋名山的过客-CSDN博客</a></p><p><a href="http://www.gcgd.net/newsinfo_726.html">USBCAN在Linux系统下使用说明 (gcgd.net)</a></p><p><a href="https://blog.csdn.net/qq_41545537/article/details/106714246?ops_request_misc=%7B%22request_id%22:%22163607238916780271515211%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163607238916780271515211&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-106714246.pc_search_mgc_flag&utm_term=ubuntucan%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">ubuntu下研华工控机CAN卡驱动的安装与测试_星辰和大海都需要门票的博客-CSDN博客</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>介绍两款使用过的<code>usb</code>转<code>can</code>的使用方法</p><p>一款是广成科技的<code>USBCAN-I PRO</code><a href="http://www.gcgd.net/tecrjlist.html">资料下载 (gcgd.net)</a></p><p>一款是创芯科技的<code>CANalyst</code><a href="https://www.zhcxgd.com/ZLXZ.html">珠海创芯科技有限公司 - 珠海创芯科技 (zhcxgd.com)</a></p><h1 id="软件安装与使用"><a href="#软件安装与使用" class="headerlink" title="软件安装与使用"></a>软件安装与使用</h1><h2 id="USBCAN"><a href="#USBCAN" class="headerlink" title="USBCAN:"></a>USBCAN:</h2><p><a href="http://www.gcgd.net/newsinfo_388.html">沈阳广成科技USBCAN系列产品驱动安装及ECANTools软件使用方法 (gcgd.net)</a></p><p><a href="https://pan.baidu.com/s/10R7zou8yxzarjlwlJkeN1A#list/path=%2FGC-USBCAN-----%E7%82%B9%E5%87%BB%E8%BF%9B%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B9%E9%80%89%E6%8B%A9%E9%9C%80%E8%A6%81%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%87%E4%BB%B6">GC-USBCAN—–点击进入文件夹选择需要下载的文件_免费高速下载|百度网盘-分享无限制 (baidu.com)</a></p><h2 id="CANalyst"><a href="#CANalyst" class="headerlink" title="CANalyst:"></a>CANalyst:</h2><p><a href="https://blog.csdn.net/muyoufansem/article/details/117955581?ops_request_misc=&request_id=&biz_id=102&utm_term=canalyst&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-117955581.pc_search_mgc_flag&spm=1018.2226.3001.4187">(完整版)Python读取CANalyst-II分析仪(创芯科技)接口函数_蜡笔小新历险记的博客-CSDN博客_创芯科技can分析仪驱动</a></p><h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><h2 id="建议采用官方例程至少不会出错"><a href="#建议采用官方例程至少不会出错" class="headerlink" title="!建议采用官方例程至少不会出错"></a>!建议采用官方例程至少不会出错</h2><h2 id="这里推荐两个例程可以验证学习"><a href="#这里推荐两个例程可以验证学习" class="headerlink" title="这里推荐两个例程可以验证学习"></a>这里推荐两个例程可以验证学习</h2><p><a href="https://github.com/VincentCheungM/ESR_canalyst_ros">VincentCheungM/ESR_canalyst_ros: A warped ROS driver for CANalyst-II and ESR Radar (github.com)</a></p><p><a href="https://github.com/Andy-jg/RaspberryCanalyst-2">Andy-jg/RaspberryCanalyst-2: linux use the canalyst-2 (github.com)</a></p><h1 id="注意"><a href="#注意" class="headerlink" title="!注意"></a>!注意</h1><p>由于can驱动使用时每次都需要<code>sudo</code>,可以加配置,这样就不需要每次都<code>sudo</code>了</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/udev/rules.d/99-myusb.rules</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ACTION==&quot;add&quot;,SUBSYSTEMS==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04d8&quot;, ATTRS&#123;idProduct&#125;==&quot;0053&quot;,</span><br><span class="line">GROUP=&quot;users&quot;, MODE=&quot;0777&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/muyoufansem/article/details/1</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>io扩展</title>
    <link href="https://peitianyu.github.io/blog/2021/11/11/io%E6%89%A9%E5%B1%95/"/>
    <id>https://peitianyu.github.io/blog/2021/11/11/io%E6%89%A9%E5%B1%95/</id>
    <published>2021-11-11T04:30:12.000Z</published>
    <updated>2021-11-11T13:15:31.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/u012388993/article/details/106386381?ops_request_misc=%7B%22request_id%22:%22163650486016780366540586%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=163650486016780366540586&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-19-106386381.pc_v2_rank_blog_default&utm_term=%E6%89%A9%E5%B1%95io&spm=1018.2226.3001.4450">IO口不够了？基于I2C的 IO扩展芯片驱动和开发_arenascat的博客-CSDN博客_io扩展芯片</a></p><p><a href="https://blog.csdn.net/zhengqijun_/article/details/53011409?ops_request_misc=%7B%22request_id%22:%22163650477816780265471235%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163650477816780265471235&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-53011409.pc_search_mgc_flag&utm_term=%E6%89%A9%E5%B1%95io&spm=1018.2226.3001.4187">单片机扩展IO口_我的博客-CSDN博客</a></p><h1 id="74HC164-三八译码器-矩阵键盘"><a href="#74HC164-三八译码器-矩阵键盘" class="headerlink" title="74HC164(三八译码器),矩阵键盘"></a>74HC164(三八译码器),矩阵键盘</h1><p>这种方式可以实现简单的io扩展,但不可以保持,也就是说,治理只是三位二进制转为八个数,虽然也可以通过加快频率的方式实现.仅用于对时序要求不高的电路,比如led流水灯,而尤其是通讯不太适用的.</p><h1 id="采用可编程I-O接口扩展芯片"><a href="#采用可编程I-O接口扩展芯片" class="headerlink" title="采用可编程I/O接口扩展芯片"></a>采用可编程I/O接口扩展芯片</h1><p>这种方式可以实现io扩展,不过需要一定的编程经验.</p><p>采用芯片有 <code>8255a</code> 与 <code>MCP23016</code></p><p><a href="https://so.szlcsc.com/global.html?k=i/o%E6%89%A9%E5%B1%95%E8%8A%AF%E7%89%87&hot-key=MB85RC16PNF-G-JNERE1">i/o扩展芯片_i/o扩展芯片采购信息-立创电子元器件商城 (szlcsc.com)</a></p><h1 id="采用A-D获取按键的位置"><a href="#采用A-D获取按键的位置" class="headerlink" title="采用A/D获取按键的位置"></a>采用A/D获取按键的位置</h1><p>通过不同电压对应不通按键,挺不错的思路</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u012388993/article/details/10</summary>
      
    
    
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/categories/sch/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/tags/sch/"/>
    
  </entry>
  
  <entry>
    <title>linux解压</title>
    <link href="https://peitianyu.github.io/blog/2021/11/11/linux%E8%A7%A3%E5%8E%8B/"/>
    <id>https://peitianyu.github.io/blog/2021/11/11/linux%E8%A7%A3%E5%8E%8B/</id>
    <published>2021-11-11T04:30:12.000Z</published>
    <updated>2021-11-11T11:25:51.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/scanf_linux/article/details/90382491?ops_request_misc=%7B%22request_id%22:%22163644518016780271536349%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163644518016780271536349&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90382491.pc_search_mgc_flag&utm_term=linux%E8%A7%A3%E5%8E%8Btar.gz&spm=1018.2226.3001.4187">Linux解压.tgz，.tar.gz文件（tar详细参数使用介绍）_echo-CSDN博客_linux解压.tar.gz文件</a></p><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成jpg.tar </span><br><span class="line">tar -czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</span><br><span class="line">tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</span><br><span class="line">tar -Jcvf [目标文件名].tar.xz [原文件名/目录名]</span><br><span class="line">tar -cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</span><br><span class="line">rar a jpg.rar *.jpg //rar格式的压缩，需要先下载 rar for linux</span><br><span class="line">zip jpg.zip *.jpg //zip格式的压缩，需要先下载 zip for linux</span><br></pre></td></tr></table></figure><h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf file.tar //解压 tar包</span><br><span class="line">tar -xzvf file.tar.gz //解压tar.gz</span><br><span class="line">tar -xjvf file.tar.bz2   //解压 tar.bz2</span><br><span class="line">tar -xZvf file.tar.Z   //解压tar.Z</span><br><span class="line">tar -Jxvf file.tar.xz</span><br><span class="line">unrar e file.rar //解压rar</span><br><span class="line">unzip file.zip //解压zip</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*.tar 用 tar -xvf 解压</span><br><span class="line">*.gz 用 gzip -d或者gunzip 解压</span><br><span class="line">*.tar.gz和*.tgz 用 tar -xzf 解压</span><br><span class="line">*.bz2 用 bzip2 -d或者用bunzip2 解压</span><br><span class="line">*.tar.bz2用tar -xjf 解压</span><br><span class="line">*.Z 用 uncompress 解压</span><br><span class="line">*.tar.Z 用tar -xZf 解压</span><br><span class="line">*.rar 用 unrar e解压</span><br><span class="line">*.zip 用 unzip 解压</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/scanf_linux/article/details/9</summary>
      
    
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/categories/linux/"/>
    
    
    <category term="linux" scheme="https://peitianyu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>cJSON</title>
    <link href="https://peitianyu.github.io/blog/2021/11/10/cJSON/"/>
    <id>https://peitianyu.github.io/blog/2021/11/10/cJSON/</id>
    <published>2021-11-10T04:30:12.000Z</published>
    <updated>2021-11-11T12:45:27.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://blog.csdn.net/Mculover666/article/details/103796256?ops_request_misc=%7B%22request_id%22:%22163610505416780261970843%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163610505416780261970843&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-103796256.pc_search_mgc_flag&utm_term=cjson&spm=1018.2226.3001.4187">(65条消息) cJSON使用详细教程 | 一个轻量级C语言JSON解析器_Mculover666的博客（嵌入式_)</a></p><p> <a href="https://github.com/DaveGamble/cJSON.git">cJSON-github</a></p><h1 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cJSON.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cJSON* cjson_test = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_address = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_skill = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建一个JSON数据对象(链表头结点) */</span></span><br><span class="line">    cjson_test = cJSON_CreateObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加一条字符串类型的JSON数据(添加一个链表节点) */</span></span><br><span class="line">    cJSON_AddStringToObject(cjson_test, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;mculover666&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加一条整数类型的JSON数据(添加一个链表节点) */</span></span><br><span class="line">    cJSON_AddNumberToObject(cjson_test, <span class="string">&quot;age&quot;</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加一条浮点类型的JSON数据(添加一个链表节点) */</span></span><br><span class="line">    cJSON_AddNumberToObject(cjson_test, <span class="string">&quot;weight&quot;</span>, <span class="number">55.5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加一个嵌套的JSON数据（添加一个链表节点） */</span></span><br><span class="line">    cjson_address = cJSON_CreateObject();</span><br><span class="line">    cJSON_AddStringToObject(cjson_address, <span class="string">&quot;country&quot;</span>, <span class="string">&quot;China&quot;</span>);</span><br><span class="line">    cJSON_AddNumberToObject(cjson_address, <span class="string">&quot;zip-code&quot;</span>, <span class="number">111111</span>);</span><br><span class="line">    cJSON_AddItemToObject(cjson_test, <span class="string">&quot;address&quot;</span>, cjson_address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加一个数组类型的JSON数据(添加一个链表节点) */</span></span><br><span class="line">    cjson_skill = cJSON_CreateArray();</span><br><span class="line">    cJSON_AddItemToArray(cjson_skill, cJSON_CreateString( <span class="string">&quot;C&quot;</span> ));</span><br><span class="line">    cJSON_AddItemToArray(cjson_skill, cJSON_CreateString( <span class="string">&quot;Java&quot;</span> ));</span><br><span class="line">    cJSON_AddItemToArray(cjson_skill, cJSON_CreateString( <span class="string">&quot;Python&quot;</span> ));</span><br><span class="line">    cJSON_AddItemToObject(cjson_test, <span class="string">&quot;skill&quot;</span>, cjson_skill);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加一个值为 False 的布尔类型的JSON数据(添加一个链表节点) */</span></span><br><span class="line">    cJSON_AddFalseToObject(cjson_test, <span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印JSON对象(整条链表)的所有数据 */</span></span><br><span class="line">    str = cJSON_Print(cjson_test);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cJSON.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *message = </span><br><span class="line"><span class="string">&quot;&#123;                              \</span></span><br><span class="line"><span class="string">    \&quot;name\&quot;:\&quot;mculover666\&quot;,   \</span></span><br><span class="line"><span class="string">    \&quot;age\&quot;: 22,                \</span></span><br><span class="line"><span class="string">    \&quot;weight\&quot;: 55.5,           \</span></span><br><span class="line"><span class="string">    \&quot;address\&quot;:                \</span></span><br><span class="line"><span class="string">        &#123;                       \</span></span><br><span class="line"><span class="string">            \&quot;country\&quot;: \&quot;China\&quot;,\</span></span><br><span class="line"><span class="string">            \&quot;zip-code\&quot;: 111111\</span></span><br><span class="line"><span class="string">        &#125;,                      \</span></span><br><span class="line"><span class="string">    \&quot;skill\&quot;: [\&quot;c\&quot;, \&quot;Java\&quot;, \&quot;Python\&quot;],\</span></span><br><span class="line"><span class="string">    \&quot;student\&quot;: false          \</span></span><br><span class="line"><span class="string">&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cJSON* cjson_test = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_name = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_age = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_weight = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_address = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_address_country = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_address_zipcode = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_skill = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON* cjson_student = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span>    skill_array_size = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    cJSON* cjson_skill_item = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析整段JSO数据 */</span></span><br><span class="line">    cjson_test = cJSON_Parse(message);</span><br><span class="line">    <span class="keyword">if</span>(cjson_test == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parse fail.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 依次根据名称提取JSON数据（键值对） */</span></span><br><span class="line">    cjson_name = cJSON_GetObjectItem(cjson_test, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    cjson_age = cJSON_GetObjectItem(cjson_test, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    cjson_weight = cJSON_GetObjectItem(cjson_test, <span class="string">&quot;weight&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name: %s\n&quot;</span>, cjson_name-&gt;valuestring);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;age:%d\n&quot;</span>, cjson_age-&gt;valueint);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;weight:%.1f\n&quot;</span>, cjson_weight-&gt;valuedouble);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析嵌套json数据 */</span></span><br><span class="line">    cjson_address = cJSON_GetObjectItem(cjson_test, <span class="string">&quot;address&quot;</span>);</span><br><span class="line">    cjson_address_country = cJSON_GetObjectItem(cjson_address, <span class="string">&quot;country&quot;</span>);</span><br><span class="line">    cjson_address_zipcode = cJSON_GetObjectItem(cjson_address, <span class="string">&quot;zip-code&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address-country:%s\naddress-zipcode:%d\n&quot;</span>, cjson_address_country-&gt;valuestring, cjson_address_zipcode-&gt;valueint);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析数组 */</span></span><br><span class="line">    cjson_skill = cJSON_GetObjectItem(cjson_test, <span class="string">&quot;skill&quot;</span>);</span><br><span class="line">    skill_array_size = cJSON_GetArraySize(cjson_skill);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;skill:[&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; skill_array_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cjson_skill_item = cJSON_GetArrayItem(cjson_skill, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s,&quot;</span>, cjson_skill_item-&gt;valuestring);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\b]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析布尔型数据 */</span></span><br><span class="line">    cjson_student = cJSON_GetObjectItem(cjson_test, <span class="string">&quot;student&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(cjson_student-&gt;valueint == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;student: false\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;student:error\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关-JSMN-仅解析"><a href="#相关-JSMN-仅解析" class="headerlink" title="相关 - JSMN(仅解析)"></a>相关 - JSMN(仅解析)</h1><p><a href="https://blog.csdn.net/aa1319594154/article/details/118934166?ops_request_misc=%7B%22request_id%22:%22163663425616780271531802%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163663425616780271531802&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-118934166.pc_search_mgc_flag&utm_term=jsmn&spm=1018.2226.3001.4187">JSMN介绍和使用_心飞的博客-CSDN博客</a></p><p><a href="https://zserge.com/jsmn/">The most simple JSON parser in C for small systems (zserge.com)</a></p><p><a href="https://github.com/zserge/jsmn">zserge/jsmn: Jsmn is a world fastest JSON parser/tokenizer. This is the official repo replacing the old one at Bitbucket (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Mculover666/article/details/1</summary>
      
    
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://peitianyu.github.io/blog/tags/cpp/"/>
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>电路设计_常见电路</title>
    <link href="https://peitianyu.github.io/blog/2021/11/08/%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1_%E5%B8%B8%E8%A7%81%E7%94%B5%E8%B7%AF/"/>
    <id>https://peitianyu.github.io/blog/2021/11/08/%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1_%E5%B8%B8%E8%A7%81%E7%94%B5%E8%B7%AF/</id>
    <published>2021-11-08T04:30:12.000Z</published>
    <updated>2021-11-09T10:17:19.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="驱动输出电路"><a href="#驱动输出电路" class="headerlink" title="驱动输出电路"></a>驱动输出电路</h1><p><img src="https://i.loli.net/2021/11/08/IcfBqFezTlgAm9b.png" alt="image-20211108152310283.png"></p><p>这里需要注意的是,<code>uln2803</code>是一种<code>npn</code>输出,输出低电平,因此在其输出端会有上拉电阻.在<code>uln2803</code>左侧接<code>gnd</code>右侧接<code>24v</code>.</p><p>这里的<code>74hct245</code>为<code>三态输出八路收发器</code>作用是增加单片机的驱动能力.</p><p>将同样用<code>74hct245</code>此电路改为<code>pnp</code>型输出,需要将<code>uln2803</code>换为<code>tbd62783</code>,需要注意输出端需要接<code>下拉电阻</code>.</p><p>**!注意:**由于改驱动芯片<code>uln2803</code>输出最大电流为<code>500ma</code>可能出现烧芯片的情况,可以加一个<code>500ma</code>熔断</p><h1 id="放大电路-opa2333"><a href="#放大电路-opa2333" class="headerlink" title="放大电路(opa2333)"></a>放大电路(opa2333)</h1><p><img src="https://i.loli.net/2021/11/08/cdPVFXozHa5hrxR.png" alt="image-20211108185457678.png"></p><p>这里通过<code>R64</code>,<code>R65</code>阻值的变化来实现放大,具体详细可参考:<a href="https://blog.csdn.net/cyousui/article/details/82936155">(61条消息) 基本运算放大器原理_小神兵之技术篇-CSDN博客_运算放大器</a></p><p>值得注意的是,由于是轨到轨的放大电路,输入<code>24v</code>,最大放大电压同样也可以达到<code>24v</code></p><h1 id="模拟量采样电路"><a href="#模拟量采样电路" class="headerlink" title="模拟量采样电路"></a>模拟量采样电路</h1><p><img src="https://i.loli.net/2021/11/08/PRZG7qv6kX3yQA9.png" alt="image-20211108191319100.png"></p><p>这里两个二极管用以防过压,电压大于<code>3.3v</code>小于<code>26.7v</code>时直接通过<code>+3.3v</code>,输出,而大于<code>26.7v</code>击穿二极管,直接导地.</p><p><img src="https://i.loli.net/2021/11/08/F1qsv4pESJwMUbN.png" alt="image-20211108191642356.png"></p><p>模拟量采集,还需要注意一点就是,对于电源要进行滤波处理,使电源信号更干净</p><h1 id="普通光耦-TLP290-4-与单向高速光耦-PC4D10"><a href="#普通光耦-TLP290-4-与单向高速光耦-PC4D10" class="headerlink" title="普通光耦(TLP290-4)与单向高速光耦(PC4D10)"></a>普通光耦(TLP290-4)与单向高速光耦(PC4D10)</h1><p><img src="https://i.loli.net/2021/11/08/Z6cxwFV4NLpevJK.png" alt="image-20211108192255515.png"></p><p><code>TLP290-4</code>为一种普通光耦,可以实现双向导通,这里原理图<code>左边部分有些出入</code>需要注意一下,输出为<code>npn</code>型输出,注意上拉电阻</p><p><img src="https://i.loli.net/2021/11/08/lESfhw24NsPrKpc.png" alt="image-20211108191804168.png"></p><p><code>pc4d10</code>为告诉光耦,实现的<code>npn</code>型输出,所以注意需要有上拉电阻.</p><h1 id="防反接电路"><a href="#防反接电路" class="headerlink" title="防反接电路"></a>防反接电路</h1><p>参考网址:<a href="https://blog.csdn.net/cgy8919/article/details/90909859?ops_request_misc=%7B%22request_id%22:%22163645288216780264054670%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163645288216780264054670&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-90909859.pc_search_mgc_flag&utm_term=%E5%8D%95%E7%89%87%E6%9C%BA%E9%98%B2%E5%8F%8D%E6%8E%A5%E7%94%B5%E8%B7%AF&spm=1018.2226.3001.4187">(62条消息) 直流电源输入防反接保护电路总结_cgy8919的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;驱动输出电路&quot;&gt;&lt;a href=&quot;#驱动输出电路&quot; class=&quot;headerlink&quot; title=&quot;驱动输出电路&quot;&gt;&lt;/a&gt;驱动输出电路&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/11/08/IcfBqFezTlgAm9</summary>
      
    
    
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/categories/sch/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/tags/sch/"/>
    
  </entry>
  
  <entry>
    <title>电路设计_稚晖君机械臂</title>
    <link href="https://peitianyu.github.io/blog/2021/11/08/%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1_%E7%A8%9A%E6%99%96%E5%90%9B%E6%9C%BA%E6%A2%B0%E8%87%82%E5%AD%A6%E4%B9%A0/"/>
    <id>https://peitianyu.github.io/blog/2021/11/08/%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1_%E7%A8%9A%E6%99%96%E5%90%9B%E6%9C%BA%E6%A2%B0%E8%87%82%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-11-08T04:30:12.000Z</published>
    <updated>2021-11-11T11:13:57.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h1><p><a href="https://github.com/peng-zhihui/Dummy-Robot">peng-zhihui/Dummy-Robot: 我的超迷你机械臂机器人项目。 (github.com)</a></p><h1 id="电源部分"><a href="#电源部分" class="headerlink" title="电源部分:"></a>电源部分:</h1><p>采用<code>TPS61040DBV</code>芯片实现的<code>5v</code>转<code>9v</code>电路,该芯片支持<code>1.8v</code>到<code>6v</code>输入,高达<code>28v</code>输出,同时还支持<code>400ma</code>的电流输出,具体可参考:</p><p><a href="https://www.ti.com/cn/lit/ds/symlink/tps61040.pdf?ts=1636365714478">TPS6104x Low-Power DC-DC Boost Converter in SOT-23 and WSON Packages datasheet (Rev. J) (ti.com)</a></p><p><img src="https://i.loli.net/2021/11/08/S7a8ycYL5rbvmOe.png" alt="image-20211108201917859.png"></p><p><code>LP2992</code>线性稳压器,输入<code>2.2v</code>到<code>16v</code>输出<code>1.5v</code>到<code>5v</code>,指定250毫安输出电流</p><p><a href="https://www.ti.com/cn/lit/ds/symlink/lp2992.pdf?ts=1636360611776">LP2992 Micropower 250-mA Low-Noise Ultra-Low-Dropout Regulator in SOT-23 and WSON Packages Designed for Use With Very Low-ESR Output Capacitors datasheet (Rev. J) (ti.com)</a></p><p><img src="https://i.loli.net/2021/11/08/Pc1Nxinl3avWTtG.png" alt="image-20211108202522586.png"></p><p><code>ME3116</code> 是一款内部集成了 <code>MOSFET</code> 的异步整流降压型 稳压器。它在很宽的输入电压范围内（<code>4.75V-40V</code>）能够提供 高达 <code>1A</code> 的负载能力。</p><p><img src="https://i.loli.net/2021/11/08/nWz2I4P8y5dTol3.png" alt="image-20211108203139049.png"></p><p><code>ME6206</code>:降压稳压器,高精度输出电压：<code>±2%</code>   输出电压：<code>1.5V~5.0V</code>(步长 <code>0.1V</code>)  最大工作电压：<code>6V</code> 带载能力强：当 <code>Vin=4.3V</code> 且 <code>Vout=3.3V</code> 时 <code>Iout=300mA</code>  极低的输入输出电压差： <code>0.2V</code> at <code>90mA</code> and <code>0.40V</code> at <code>200mA</code></p><p><img src="https://i.loli.net/2021/11/08/XljkeHb6N1pcW4y.png" alt="image-20211108204012844.png"></p><p>这里使用了<code>ss54</code>实现防反接,<code>sy8303</code>降压型<code>dc-dc</code>芯片</p><p><img src="https://i.loli.net/2021/11/11/POs7cb8Yxo3TvEU.png" alt="image-20211111191014461.png"></p><h1 id="自动下载电路"><a href="#自动下载电路" class="headerlink" title="自动下载电路"></a>自动下载电路</h1><p>采用<code>cp2101</code>usb转串口芯片,通过三极管,实现串口自动下载</p><p><img src="https://i.loli.net/2021/11/11/U3pDMn8Qt1cTLvl.png" alt="image-20211111190423177.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址&quot; class=&quot;headerlink&quot; title=&quot;参考网址:&quot;&gt;&lt;/a&gt;参考网址:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peng-zhihui/Dummy-Robot&quot;&gt;peng-zh</summary>
      
    
    
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/categories/sch/"/>
    
    
    <category term="嵌入式" scheme="https://peitianyu.github.io/blog/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="sch" scheme="https://peitianyu.github.io/blog/tags/sch/"/>
    
  </entry>
  
</feed>
